!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist/",n(n.s=2)}([function(t,e){
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
window.JSCompiler_renameProperty=function(t){return t}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"dashToCamelCase",function(){return U}),n.d(r,"camelToDashCase",function(){return B});n(9),n(0);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let o,i,a=/(url\()([^)]*)(\))/g,s=/(^\/)|(^#)|(^[\w-\d]*:)/;function l(t,e){if(t&&s.test(t))return t;if(void 0===o){o=!1;try{const t=new URL("b","http://a");t.pathname="c%20d",o="http://a/c%20d"===t.href}catch(t){}}return e||(e=document.baseURI||window.location.href),o?new URL(t,e).href:(i||((i=document.implementation.createHTMLDocument("temp")).base=i.createElement("base"),i.head.appendChild(i.base),i.anchor=i.createElement("a"),i.body.appendChild(i.anchor)),i.base.href=e,i.anchor.href=t,i.anchor.href||t)}function c(t,e){return t.replace(a,function(t,n,r,o){return n+"'"+l(r.replace(/["']/g,""),e)+"'"+o})}function u(t){return t.substring(0,t.lastIndexOf("/")+1)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/window.ShadyDOM,Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),window.customElements.polyfillWrapFlushCallback;let h=u(document.baseURI||window.location.href);let d=void 0;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let p=0;function f(){}f.prototype.__mixinApplications,f.prototype.__mixinSet;const m=function(t){let e=t.__mixinApplications;e||(e=new WeakMap,t.__mixinApplications=e);let n=p++;return function(r){let o=r.__mixinSet;if(o&&o[n])return r;let i=e,a=i.get(r);a||(a=t(r),i.set(r,a));let s=Object.create(a.__mixinSet||o||null);return s[n]=!0,a.__mixinSet=s,a}},y="link[rel=import][type~=css]",g="include",v="shady-unscoped";
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function _(t){const e=customElements.get("dom-module");return e?e.import(t):null}function b(t){const e=c((t.body?t.body:t).textContent,t.baseURI),n=document.createElement("style");return n.textContent=e,n}function w(t){const e=t.trim().split(/\s+/),n=[];for(let t=0;t<e.length;t++)n.push(...E(e[t]));return n}function E(t){const e=_(t);if(!e)return console.warn("Could not find style data in module named",t),[];if(void 0===e._styles){const t=[];t.push(...N(e));const n=e.querySelector("template");n&&t.push(...C(n,e.assetpath)),e._styles=t}return e._styles}function C(t,e){if(!t._styles){const n=[],r=t.content.querySelectorAll("style");for(let t=0;t<r.length;t++){let o=r[t],i=o.getAttribute(g);i&&n.push(...w(i).filter(function(t,e,n){return n.indexOf(t)===e})),e&&(o.textContent=c(o.textContent,e)),n.push(o)}t._styles=n}return t._styles}function N(t){const e=[],n=t.querySelectorAll(y);for(let t=0;t<n.length;t++){let r=n[t];if(r.import){const t=r.import,n=r.hasAttribute(v);if(n&&!t._unscopedStyle){const e=b(t);e.setAttribute(v,""),t._unscopedStyle=e}else t._style||(t._style=b(t));e.push(n?t._unscopedStyle:t._style)}}return e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let S={},T={};class P extends HTMLElement{static get observedAttributes(){return["id"]}static import(t,e){if(t){let n=function(t){return S[t]||T[t.toLowerCase()]}(t);return n&&e?n.querySelector(e):n}return null}attributeChangedCallback(t,e,n,r){e!==n&&this.register()}get assetpath(){if(!this.__assetpath){const t=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,e=l(this.getAttribute("assetpath")||"",t.baseURI);this.__assetpath=u(e)}return this.__assetpath}register(t){(t=t||this.id)&&(this.id=t,S[t]=this,T[t.toLowerCase()]=this,function(t){t.querySelector("style")&&console.warn("dom-module %s has style outside template",t.id)}(this))}}function O(t){return t.indexOf(".")>=0}function x(t){let e=t.indexOf(".");return-1===e?t:t.slice(0,e)}function A(t,e){return 0===t.indexOf(e+".")}function D(t,e){return 0===e.indexOf(t+".")}function M(t,e,n){return e+n.slice(t.length)}function L(t){if(Array.isArray(t)){let e=[];for(let n=0;n<t.length;n++){let r=t[n].toString().split(".");for(let t=0;t<r.length;t++)e.push(r[t])}return e.join(".")}return t}function k(t){return Array.isArray(t)?L(t).split("."):t.toString().split(".")}function j(t,e,n){let r=t,o=k(e);for(let t=0;t<o.length;t++){if(!r)return;r=r[o[t]]}return n&&(n.path=o.join(".")),r}function I(t,e,n){let r=t,o=k(e),i=o[o.length-1];if(o.length>1){for(let t=0;t<o.length-1;t++){if(!(r=r[o[t]]))return}r[i]=n}else r[e]=n;return o.join(".")}P.prototype.modules=S,customElements.define("dom-module",P);const R={},F=/-[a-z]/g,H=/([A-Z])/g;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function U(t){return R[t]||(R[t]=t.indexOf("-")<0?t:t.replace(F,t=>t[1].toUpperCase()))}function B(t){return R[t]||(R[t]=t.replace(H,"-$1").toLowerCase())}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let z=0,q=0,V=[],W=0,G=document.createTextNode("");new window.MutationObserver(function(){const t=V.length;for(let e=0;e<t;e++){let t=V[e];if(t)try{t()}catch(t){setTimeout(()=>{throw t})}}V.splice(0,t),q+=t}).observe(G,{characterData:!0});const $={run:t=>(G.textContent=W++,V.push(t),z++),cancel(t){const e=t-q;if(e>=0){if(!V[e])throw new Error("invalid async handle: "+t);V[e]=null}}},Y=m(t=>{return class extends t{static createProperties(t){const e=this.prototype;for(let n in t)n in e||e._createPropertyAccessor(n)}static attributeNameForProperty(t){return t.toLowerCase()}static typeForProperty(t){}_createPropertyAccessor(t,e){this._addPropertyToAttributeMap(t),this.hasOwnProperty("__dataHasAccessor")||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[t]||(this.__dataHasAccessor[t]=!0,this._definePropertyAccessor(t,e))}_addPropertyToAttributeMap(t){if(this.hasOwnProperty("__dataAttributes")||(this.__dataAttributes=Object.assign({},this.__dataAttributes)),!this.__dataAttributes[t]){const e=this.constructor.attributeNameForProperty(t);this.__dataAttributes[e]=t}}_definePropertyAccessor(t,e){Object.defineProperty(this,t,{get(){return this._getProperty(t)},set:e?function(){}:function(e){this._setProperty(t,e)}})}constructor(){super(),this.__dataEnabled=!1,this.__dataReady=!1,this.__dataInvalid=!1,this.__data={},this.__dataPending=null,this.__dataOld=null,this.__dataInstanceProps=null,this.__serializing=!1,this._initializeProperties()}ready(){this.__dataReady=!0,this._flushProperties()}_initializeProperties(){for(let t in this.__dataHasAccessor)this.hasOwnProperty(t)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[t]=this[t],delete this[t])}_initializeInstanceProperties(t){Object.assign(this,t)}_setProperty(t,e){this._setPendingProperty(t,e)&&this._invalidateProperties()}_getProperty(t){return this.__data[t]}_setPendingProperty(t,e,n){let r=this.__data[t],o=this._shouldPropertyChange(t,e,r);return o&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),!this.__dataOld||t in this.__dataOld||(this.__dataOld[t]=r),this.__data[t]=e,this.__dataPending[t]=e),o}_invalidateProperties(){!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,$.run(()=>{this.__dataInvalid&&(this.__dataInvalid=!1,this._flushProperties())}))}_enableProperties(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}_flushProperties(){const t=this.__data,e=this.__dataPending,n=this.__dataOld;this._shouldPropertiesChange(t,e,n)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(t,e,n))}_shouldPropertiesChange(t,e,n){return Boolean(e)}_propertiesChanged(t,e,n){}_shouldPropertyChange(t,e,n){return n!==e&&(n==n||e==e)}attributeChangedCallback(t,e,n,r){e!==n&&this._attributeToProperty(t,n),super.attributeChangedCallback&&super.attributeChangedCallback(t,e,n,r)}_attributeToProperty(t,e,n){if(!this.__serializing){const r=this.__dataAttributes,o=r&&r[t]||t;this[o]=this._deserializeValue(e,n||this.constructor.typeForProperty(o))}}_propertyToAttribute(t,e,n){this.__serializing=!0,n=arguments.length<3?this[t]:n,this._valueToNodeAttribute(this,n,e||this.constructor.attributeNameForProperty(t)),this.__serializing=!1}_valueToNodeAttribute(t,e,n){const r=this._serializeValue(e);void 0===r?t.removeAttribute(n):t.setAttribute(n,r)}_serializeValue(t){switch(typeof t){case"boolean":return t?"":void 0;default:return null!=t?t.toString():void 0}}_deserializeValue(t,e){switch(e){case Boolean:return null!==t;case Number:return Number(t);default:return t}}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let J=r;const X={};let K=HTMLElement.prototype;for(;K;){let t=Object.getOwnPropertyNames(K);for(let e=0;e<t.length;e++)X[t[e]]=!0;K=Object.getPrototypeOf(K)}const Z=m(t=>{const e=Y(t);return class extends e{static createPropertiesForAttributes(){let t=this.observedAttributes;for(let e=0;e<t.length;e++)this.prototype._createPropertyAccessor(J.dashToCamelCase(t[e]))}static attributeNameForProperty(t){return J.camelToDashCase(t)}_initializeProperties(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),super._initializeProperties()}_initializeProtoProperties(t){for(let e in t)this._setProperty(e,t[e])}_ensureAttribute(t,e){const n=this;n.hasAttribute(t)||this._valueToNodeAttribute(n,e,t)}_serializeValue(t){switch(typeof t){case"object":if(t instanceof Date)return t.toString();if(t)try{return JSON.stringify(t)}catch(t){return""}default:return super._serializeValue(t)}}_deserializeValue(t,e){let n;switch(e){case Object:try{n=JSON.parse(t)}catch(e){n=t}break;case Array:try{n=JSON.parse(t)}catch(e){n=null,console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${t}`)}break;case Date:n=isNaN(t)?String(t):Number(t),n=new Date(n);break;default:n=super._deserializeValue(t,e)}return n}_definePropertyAccessor(t,e){!function(t,e){if(!X[e]){let n=t[e];void 0!==n&&(t.__data?t._setPendingProperty(e,n):(t.__dataProto?t.hasOwnProperty(JSCompiler_renameProperty("__dataProto",t))||(t.__dataProto=Object.create(t.__dataProto)):t.__dataProto={},t.__dataProto[e]=n))}}(this,t),super._definePropertyAccessor(t,e)}_hasAccessor(t){return this.__dataHasAccessor&&this.__dataHasAccessor[t]}_isPropertyPending(t){return Boolean(this.__dataPending&&t in this.__dataPending)}}}),Q={"dom-if":!0,"dom-repeat":!0};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function tt(t){let e=t.getAttribute("is");if(e&&Q[e]){let n=t;for(n.removeAttribute("is"),t=n.ownerDocument.createElement(e),n.parentNode.replaceChild(t,n),t.appendChild(n);n.attributes.length;)t.setAttribute(n.attributes[0].name,n.attributes[0].value),n.removeAttribute(n.attributes[0].name)}return t}function et(t,e){let n=e.parentInfo&&et(t,e.parentInfo);if(!n)return t;for(let t=n.firstChild,r=0;t;t=t.nextSibling)if(e.parentIndex===r++)return t}function nt(t,e,n,r){r.id&&(e[r.id]=n)}function rt(t,e,n){if(n.events&&n.events.length)for(let r,o=0,i=n.events;o<i.length&&(r=i[o]);o++)t._addMethodEventListenerToNode(e,r.name,r.value,t)}function ot(t,e,n){n.templateInfo&&(e._templateInfo=n.templateInfo)}const it=m(t=>{return class extends t{static _parseTemplate(t,e){if(!t._templateInfo){let n=t._templateInfo={};n.nodeInfoList=[],n.stripWhiteSpace=e&&e.stripWhiteSpace||t.hasAttribute("strip-whitespace"),this._parseTemplateContent(t,n,{parent:null})}return t._templateInfo}static _parseTemplateContent(t,e,n){return this._parseTemplateNode(t.content,e,n)}static _parseTemplateNode(t,e,n){let r,o=t;return"template"!=o.localName||o.hasAttribute("preserve-content")?"slot"===o.localName&&(e.hasInsertionPoint=!0):r=this._parseTemplateNestedTemplate(o,e,n)||r,o.firstChild&&(r=this._parseTemplateChildNodes(o,e,n)||r),o.hasAttributes&&o.hasAttributes()&&(r=this._parseTemplateNodeAttributes(o,e,n)||r),r}static _parseTemplateChildNodes(t,e,n){if("script"!==t.localName&&"style"!==t.localName)for(let r,o=t.firstChild,i=0;o;o=r){if("template"==o.localName&&(o=tt(o)),r=o.nextSibling,o.nodeType===Node.TEXT_NODE){let n=r;for(;n&&n.nodeType===Node.TEXT_NODE;)o.textContent+=n.textContent,r=n.nextSibling,t.removeChild(n),n=r;if(e.stripWhiteSpace&&!o.textContent.trim()){t.removeChild(o);continue}}let a={parentIndex:i,parentInfo:n};this._parseTemplateNode(o,e,a)&&(a.infoIndex=e.nodeInfoList.push(a)-1),o.parentNode&&i++}}static _parseTemplateNestedTemplate(t,e,n){let r=this._parseTemplate(t,e);return(r.content=t.content.ownerDocument.createDocumentFragment()).appendChild(t.content),n.templateInfo=r,!0}static _parseTemplateNodeAttributes(t,e,n){let r=!1,o=Array.from(t.attributes);for(let i,a=o.length-1;i=o[a];a--)r=this._parseTemplateNodeAttribute(t,e,n,i.name,i.value)||r;return r}static _parseTemplateNodeAttribute(t,e,n,r,o){return"on-"===r.slice(0,3)?(t.removeAttribute(r),n.events=n.events||[],n.events.push({name:r.slice(3),value:o}),!0):"id"===r&&(n.id=o,!0)}static _contentForTemplate(t){let e=t._templateInfo;return e&&e.content||t.content}_stampTemplate(t){t&&!t.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(t);let e=this.constructor._parseTemplate(t),n=e.nodeInfoList,r=e.content||t.content,o=document.importNode(r,!0);o.__noInsertionPoint=!e.hasInsertionPoint;let i=o.nodeList=new Array(n.length);o.$={};for(let t,e=0,r=n.length;e<r&&(t=n[e]);e++){let n=i[e]=et(o,t);nt(0,o.$,n,t),ot(0,n,t),rt(this,n,t)}return o=o}_addMethodEventListenerToNode(t,e,n,r){let o=function(t,e,n){return t=t._methodHost||t,function(e){t[n]?t[n](e,e.detail):console.warn("listener method `"+n+"` not defined")}}(r=r||t,0,n);return this._addEventListenerToNode(t,e,o),o}_addEventListenerToNode(t,e,n){t.addEventListener(e,n)}_removeEventListenerFromNode(t,e,n){t.removeEventListener(e,n)}}}),at=r;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let st=0;const lt={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},ct=/[A-Z]/;let ut;function ht(t,e){let n=t[e];if(n){if(!t.hasOwnProperty(e)){n=t[e]=Object.create(t[e]);for(let t in n){let e=n[t],r=n[t]=Array(e.length);for(let t=0;t<e.length;t++)r[t]=e[t]}}}else n=t[e]={};return n}function dt(t,e,n,r,o,i){if(e){let a=!1,s=st++;for(let l in n)pt(t,e,s,l,n,r,o,i)&&(a=!0);return a}return!1}function pt(t,e,n,r,o,i,a,s){let l=!1,c=e[a?x(r):r];if(c)for(let e,u=0,h=c.length;u<h&&(e=c[u]);u++)e.info&&e.info.lastRun===n||a&&!ft(r,e.trigger)||(e.info&&(e.info.lastRun=n),e.fn(t,r,o,i,e.info,a,s),l=!0);return l}function ft(t,e){if(e){let n=e.name;return n==t||e.structured&&A(n,t)||e.wildcard&&D(n,t)}return!0}function mt(t,e,n,r,o){let i="string"==typeof o.method?t[o.method]:o.method,a=o.property;i?i.call(t,t.__data[a],r[a]):o.dynamicFn||console.warn("observer method `"+o.method+"` not defined")}function yt(t,e,n){let r=x(e);if(r!==e){return gt(t,B(r)+"-changed",n[e],e),!0}return!1}function gt(t,e,n,r){let o={value:n,queueProperty:!0};r&&(o.path=r),t.dispatchEvent(new CustomEvent(e,{detail:o}))}function vt(t,e,n,r,o,i){let a=(i?x(e):e)!=e?e:null,s=a?j(t,a):t.__data[e];a&&void 0===s&&(s=n[e]),gt(t,o.eventName,s,a)}function _t(t,e,n,r,o){let i=t.__data[e];d&&(i=d(i,o.attrName,"attribute",t)),t._propertyToAttribute(e,o.attrName,i)}function bt(t,e,n,r,o){let i=Pt(t,e,n,r,o),a=o.methodInfo;t.__dataHasAccessor&&t.__dataHasAccessor[a]?t._setPendingProperty(a,i,!0):t[a]=i}function wt(t,e,n,r,o,i,a){n.bindings=n.bindings||[];let s={kind:r,target:o,parts:i,literal:a,isCompound:1!==i.length};if(n.bindings.push(s),function(t){return Boolean(t.target)&&"attribute"!=t.kind&&"text"!=t.kind&&!t.isCompound&&"{"===t.parts[0].mode}(s)){let{event:t,negate:e}=s.parts[0];s.listenerEvent=t||at.camelToDashCase(o)+"-changed",s.listenerNegate=e}let l=e.nodeInfoList.length;for(let n=0;n<s.parts.length;n++){let r=s.parts[n];r.compoundIndex=n,Et(t,e,s,r,l)}}function Et(t,e,n,r,o){if(!r.literal)if("attribute"===n.kind&&"-"===n.target[0])console.warn("Cannot set attribute "+n.target+' because "-" is not a valid attribute starting character');else{let i=r.dependencies,a={index:o,binding:n,part:r,evaluator:t};for(let n=0;n<i.length;n++){let r=i[n];"string"==typeof r&&((r=Mt(r)).wildcard=!0),t._addTemplatePropertyEffect(e,r.rootProperty,{fn:Ct,info:a,trigger:r})}}}function Ct(t,e,n,r,o,i,a){let s=a[o.index],l=o.binding,c=o.part;if(i&&c.source&&e.length>c.source.length&&"property"==l.kind&&!l.isCompound&&s.__isPropertyEffectsClient&&s.__dataHasAccessor&&s.__dataHasAccessor[l.target]){let r=n[e];e=M(c.source,l.target,e),s._setPendingPropertyOrPath(e,r,!1,!0)&&t._enqueueClient(s)}else{!function(t,e,n,r,o){o=function(t,e,n,r){if(n.isCompound){let o=t.__dataCompoundStorage[n.target];o[r.compoundIndex]=e,e=o.join("")}return"attribute"!==n.kind&&("textContent"!==n.target&&("value"!==n.target||"input"!==t.localName&&"textarea"!==t.localName)||(e=void 0==e?"":e)),e}(e,o,n,r),d&&(o=d(o,n.target,n.kind,e));if("attribute"==n.kind)t._valueToNodeAttribute(e,o,n.target);else{let r=n.target;e.__isPropertyEffectsClient&&e.__dataHasAccessor&&e.__dataHasAccessor[r]?e[lt.READ_ONLY]&&e[lt.READ_ONLY][r]||e._setPendingProperty(r,o)&&t._enqueueClient(e):t._setUnmanagedPropertyToNode(e,r,o)}}(t,s,l,c,o.evaluator._evaluateBinding(t,c,e,n,r,i))}}function Nt(t,e){if(e.isCompound){let n=t.__dataCompoundStorage||(t.__dataCompoundStorage={}),r=e.parts,o=new Array(r.length);for(let t=0;t<r.length;t++)o[t]=r[t].literal;let i=e.target;n[i]=o,e.literal&&"property"==e.kind&&(t[i]=e.literal)}}function St(t,e,n){if(n.listenerEvent){let r=n.parts[0];t.addEventListener(n.listenerEvent,function(t){!function(t,e,n,r,o){let i,a=t.detail,s=a&&a.path;s?(r=M(n,r,s),i=a&&a.value):i=t.target[n],i=o?!i:i,e[lt.READ_ONLY]&&e[lt.READ_ONLY][r]||!e._setPendingPropertyOrPath(r,i,!0,Boolean(s))||a&&a.queueProperty||e._invalidateProperties()}(t,e,n.target,r.source,r.negate)})}}function Tt(t,e,n,r,o,i){i=e.static||i&&("object"!=typeof i||i[e.methodName]);let a={methodName:e.methodName,args:e.args,methodInfo:o,dynamicFn:i};for(let o,i=0;i<e.args.length&&(o=e.args[i]);i++)o.literal||t._addPropertyEffect(o.rootProperty,n,{fn:r,info:a,trigger:o});i&&t._addPropertyEffect(e.methodName,n,{fn:r,info:a})}function Pt(t,e,n,r,o){let i=t._methodHost||t,a=i[o.methodName];if(a){let r=function(t,e,n,r){let o=[];for(let i=0,a=e.length;i<a;i++){let a,s=e[i],l=s.name;if(s.literal?a=s.value:s.structured?void 0===(a=j(t,l))&&(a=r[l]):a=t[l],s.wildcard){let t=0===l.indexOf(n+"."),e=0===n.indexOf(l)&&!t;o[i]={path:e?n:l,value:e?r[n]:a,base:a}}else o[i]=a}return o}(t.__data,o.args,e,n);return a.apply(i,r)}o.dynamicFn||console.warn("method `"+o.methodName+"` not defined")}const Ot=[],xt=new RegExp("(\\[\\[|{{)\\s*(?:(!)\\s*)?((?:[a-zA-Z_$][\\w.:$\\-*]*)\\s*(?:\\(\\s*(?:(?:(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*)(?:,\\s*(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*))*)?)\\)\\s*)?)(?:]]|}})","g");function At(t){let e="";for(let n=0;n<t.length;n++){e+=t[n].literal||""}return e}function Dt(t){let e=t.match(/([^\s]+?)\(([\s\S]*)\)/);if(e){let t={methodName:e[1],static:!0,args:Ot};if(e[2].trim()){return function(t,e){return e.args=t.map(function(t){let n=Mt(t);return n.literal||(e.static=!1),n},this),e}(e[2].replace(/\\,/g,"&comma;").split(","),t)}return t}return null}function Mt(t){let e=t.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),n={name:e,value:"",literal:!1},r=e[0];switch("-"===r&&(r=e[1]),r>="0"&&r<="9"&&(r="#"),r){case"'":case'"':n.value=e.slice(1,-1),n.literal=!0;break;case"#":n.value=Number(e),n.literal=!0}return n.literal||(n.rootProperty=x(e),n.structured=O(e),n.structured&&(n.wildcard=".*"==e.slice(-2),n.wildcard&&(n.name=e.slice(0,-2)))),n}function Lt(t,e,n,r){let o=n+".splices";t.notifyPath(o,{indexSplices:r}),t.notifyPath(n+".length",e.length),t.__data[o]={indexSplices:null}}function kt(t,e,n,r,o,i){Lt(t,e,n,[{index:r,addedCount:o,removed:i,object:e,type:"splice"}])}const jt=m(t=>{const e=it(Z(t));class n extends e{constructor(){super(),this.__isPropertyEffectsClient=!0,this.__dataCounter=0,this.__dataClientsReady,this.__dataPendingClients,this.__dataToNotify,this.__dataLinkedPaths,this.__dataHasPaths,this.__dataCompoundStorage,this.__dataHost,this.__dataTemp,this.__dataClientsInitialized,this.__data,this.__dataPending,this.__dataOld,this.__computeEffects,this.__reflectEffects,this.__notifyEffects,this.__propagateEffects,this.__observeEffects,this.__readOnly,this.__templateInfo}get PROPERTY_EFFECT_TYPES(){return lt}_initializeProperties(){super._initializeProperties(),It.registerHost(this),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}_initializeProtoProperties(t){this.__data=Object.create(t),this.__dataPending=Object.create(t),this.__dataOld={}}_initializeInstanceProperties(t){let e=this[lt.READ_ONLY];for(let n in t)e&&e[n]||(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[n]=this.__dataPending[n]=t[n])}_addPropertyEffect(t,e,n){this._createPropertyAccessor(t,e==lt.READ_ONLY);let r=ht(this,e)[t];r||(r=this[e][t]=[]),r.push(n)}_removePropertyEffect(t,e,n){let r=ht(this,e)[t],o=r.indexOf(n);o>=0&&r.splice(o,1)}_hasPropertyEffect(t,e){let n=this[e];return Boolean(n&&n[t])}_hasReadOnlyEffect(t){return this._hasPropertyEffect(t,lt.READ_ONLY)}_hasNotifyEffect(t){return this._hasPropertyEffect(t,lt.NOTIFY)}_hasReflectEffect(t){return this._hasPropertyEffect(t,lt.REFLECT)}_hasComputedEffect(t){return this._hasPropertyEffect(t,lt.COMPUTE)}_setPendingPropertyOrPath(t,e,n,r){if(r||x(Array.isArray(t)?t[0]:t)!==t){if(!r){let n=j(this,t);if(!(t=I(this,t,e))||!super._shouldPropertyChange(t,e,n))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(t,e,n))return function(t,e,n){let r=t.__dataLinkedPaths;if(r){let o;for(let i in r){let a=r[i];D(i,e)?(o=M(i,a,e),t._setPendingPropertyOrPath(o,n,!0,!0)):D(a,e)&&(o=M(a,i,e),t._setPendingPropertyOrPath(o,n,!0,!0))}}}(this,t,e),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[t])return this._setPendingProperty(t,e,n);this[t]=e}return!1}_setUnmanagedPropertyToNode(t,e,n){n===t[e]&&"object"!=typeof n||(t[e]=n)}_setPendingProperty(t,e,n){let r=this.__dataHasPaths&&O(t),o=r?this.__dataTemp:this.__data;return!!this._shouldPropertyChange(t,e,o[t])&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),t in this.__dataOld||(this.__dataOld[t]=this.__data[t]),r?this.__dataTemp[t]=e:this.__data[t]=e,this.__dataPending[t]=e,(r||this[lt.NOTIFY]&&this[lt.NOTIFY][t])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[t]=n),!0)}_setProperty(t,e){this._setPendingProperty(t,e,!0)&&this._invalidateProperties()}_invalidateProperties(){this.__dataReady&&this._flushProperties()}_enqueueClient(t){this.__dataPendingClients=this.__dataPendingClients||[],t!==this&&this.__dataPendingClients.push(t)}_flushProperties(){this.__dataCounter++,super._flushProperties(),this.__dataCounter--}_flushClients(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}__enableOrFlushClients(){let t=this.__dataPendingClients;if(t){this.__dataPendingClients=null;for(let e=0;e<t.length;e++){let n=t[e];n.__dataEnabled?n.__dataPending&&n._flushProperties():n._enableProperties()}}}_readyClients(){this.__enableOrFlushClients()}setProperties(t,e){for(let n in t)!e&&this[lt.READ_ONLY]&&this[lt.READ_ONLY][n]||this._setPendingPropertyOrPath(n,t[n],!0);this._invalidateProperties()}ready(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}_propertiesChanged(t,e,n){let r=this.__dataHasPaths;this.__dataHasPaths=!1,function(t,e,n,r){let o=t[lt.COMPUTE];if(o){let i=e;for(;dt(t,o,i,n,r);)Object.assign(n,t.__dataOld),Object.assign(e,t.__dataPending),i=t.__dataPending,t.__dataPending=null}}(this,e,n,r);let o=this.__dataToNotify;this.__dataToNotify=null,this._propagatePropertyChanges(e,n,r),this._flushClients(),dt(this,this[lt.REFLECT],e,n,r),dt(this,this[lt.OBSERVE],e,n,r),o&&function(t,e,n,r,o){let i,a,s=t[lt.NOTIFY],l=st++;for(let a in e)e[a]&&(s&&pt(t,s,l,a,n,r,o)?i=!0:o&&yt(t,a,n)&&(i=!0));i&&(a=t.__dataHost)&&a._invalidateProperties&&a._invalidateProperties()}(this,o,e,n,r),1==this.__dataCounter&&(this.__dataTemp={})}_propagatePropertyChanges(t,e,n){this[lt.PROPAGATE]&&dt(this,this[lt.PROPAGATE],t,e,n);let r=this.__templateInfo;for(;r;)dt(this,r.propertyEffects,t,e,n,r.nodeList),r=r.nextTemplateInfo}linkPaths(t,e){t=L(t),e=L(e),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[t]=e}unlinkPaths(t){t=L(t),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[t]}notifySplices(t,e){let n={path:""};Lt(this,j(this,t,n),n.path,e)}get(t,e){return j(e||this,t)}set(t,e,n){n?I(n,t,e):this[lt.READ_ONLY]&&this[lt.READ_ONLY][t]||this._setPendingPropertyOrPath(t,e,!0)&&this._invalidateProperties()}push(t,...e){let n={path:""},r=j(this,t,n),o=r.length,i=r.push(...e);return e.length&&kt(this,r,n.path,o,e.length,[]),i}pop(t){let e={path:""},n=j(this,t,e),r=Boolean(n.length),o=n.pop();return r&&kt(this,n,e.path,n.length,0,[o]),o}splice(t,e,n,...r){let o,i={path:""},a=j(this,t,i);return e<0?e=a.length-Math.floor(-e):e&&(e=Math.floor(e)),o=2===arguments.length?a.splice(e):a.splice(e,n,...r),(r.length||o.length)&&kt(this,a,i.path,e,r.length,o),o}shift(t){let e={path:""},n=j(this,t,e),r=Boolean(n.length),o=n.shift();return r&&kt(this,n,e.path,0,0,[o]),o}unshift(t,...e){let n={path:""},r=j(this,t,n),o=r.unshift(...e);return e.length&&kt(this,r,n.path,0,e.length,[]),o}notifyPath(t,e){let n;if(1==arguments.length){let r={path:""};e=j(this,t,r),n=r.path}else n=Array.isArray(t)?L(t):t;this._setPendingPropertyOrPath(n,e,!0,!0)&&this._invalidateProperties()}_createReadOnlyProperty(t,e){this._addPropertyEffect(t,lt.READ_ONLY),e&&(this["_set"+function(t){return t[0].toUpperCase()+t.substring(1)}(t)]=function(e){this._setProperty(t,e)})}_createPropertyObserver(t,e,n){let r={property:t,method:e,dynamicFn:Boolean(n)};this._addPropertyEffect(t,lt.OBSERVE,{fn:mt,info:r,trigger:{name:t}}),n&&this._addPropertyEffect(e,lt.OBSERVE,{fn:mt,info:r,trigger:{name:e}})}_createMethodObserver(t,e){let n=Dt(t);if(!n)throw new Error("Malformed observer expression '"+t+"'");Tt(this,n,lt.OBSERVE,Pt,null,e)}_createNotifyingProperty(t){this._addPropertyEffect(t,lt.NOTIFY,{fn:vt,info:{eventName:at.camelToDashCase(t)+"-changed",property:t}})}_createReflectedProperty(t){let e=this.constructor.attributeNameForProperty(t);"-"===e[0]?console.warn("Property "+t+" cannot be reflected to attribute "+e+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(t,lt.REFLECT,{fn:_t,info:{attrName:e}})}_createComputedProperty(t,e,n){let r=Dt(e);if(!r)throw new Error("Malformed computed expression '"+e+"'");Tt(this,r,lt.COMPUTE,bt,t,n)}static addPropertyEffect(t,e,n){this.prototype._addPropertyEffect(t,e,n)}static createPropertyObserver(t,e,n){this.prototype._createPropertyObserver(t,e,n)}static createMethodObserver(t,e){this.prototype._createMethodObserver(t,e)}static createNotifyingProperty(t){this.prototype._createNotifyingProperty(t)}static createReadOnlyProperty(t,e){this.prototype._createReadOnlyProperty(t,e)}static createReflectedProperty(t){this.prototype._createReflectedProperty(t)}static createComputedProperty(t,e,n){this.prototype._createComputedProperty(t,e,n)}static bindTemplate(t){return this.prototype._bindTemplate(t)}_bindTemplate(t,e){let n=this.constructor._parseTemplate(t),r=this.__templateInfo==n;if(!r)for(let t in n.propertyEffects)this._createPropertyAccessor(t);if(e&&((n=Object.create(n)).wasPreBound=r,!r&&this.__templateInfo)){let t=this.__templateInfoLast||this.__templateInfo;return this.__templateInfoLast=t.nextTemplateInfo=n,n.previousTemplateInfo=t,n}return this.__templateInfo=n}static _addTemplatePropertyEffect(t,e,n){(t.hostProps=t.hostProps||{})[e]=!0;let r=t.propertyEffects=t.propertyEffects||{};(r[e]=r[e]||[]).push(n)}_stampTemplate(t){It.beginHosting(this);let e=super._stampTemplate(t);It.endHosting(this);let n=this._bindTemplate(t,!0);if(n.nodeList=e.nodeList,!n.wasPreBound){let t=n.childNodes=[];for(let n=e.firstChild;n;n=n.nextSibling)t.push(n)}return e.templateInfo=n,function(t,e){let{nodeList:n,nodeInfoList:r}=e;if(r.length)for(let e=0;e<r.length;e++){let o=r[e],i=n[e],a=o.bindings;if(a)for(let e=0;e<a.length;e++){let n=a[e];Nt(i,n),St(i,t,n)}i.__dataHost=t}}(this,n),this.__dataReady&&dt(this,n.propertyEffects,this.__data,null,!1,n.nodeList),e}_removeBoundDom(t){let e=t.templateInfo;e.previousTemplateInfo&&(e.previousTemplateInfo.nextTemplateInfo=e.nextTemplateInfo),e.nextTemplateInfo&&(e.nextTemplateInfo.previousTemplateInfo=e.previousTemplateInfo),this.__templateInfoLast==e&&(this.__templateInfoLast=e.previousTemplateInfo),e.previousTemplateInfo=e.nextTemplateInfo=null;let n=e.childNodes;for(let t=0;t<n.length;t++){let e=n[t];e.parentNode.removeChild(e)}}static _parseTemplateNode(t,e,n){let r=super._parseTemplateNode(t,e,n);if(t.nodeType===Node.TEXT_NODE){let o=this._parseBindings(t.textContent,e);o&&(t.textContent=At(o)||" ",wt(this,e,n,"text","textContent",o),r=!0)}return r}static _parseTemplateNodeAttribute(t,e,n,r,o){let i=this._parseBindings(o,e);if(i){let o=r,a="property";ct.test(r)?a="attribute":"$"==r[r.length-1]&&(r=r.slice(0,-1),a="attribute");let s=At(i);return s&&"attribute"==a&&t.setAttribute(r,s),"input"===t.localName&&"value"===o&&t.setAttribute(o,""),t.removeAttribute(o),"property"===a&&(r=U(r)),wt(this,e,n,a,r,i,s),!0}return super._parseTemplateNodeAttribute(t,e,n,r,o)}static _parseTemplateNestedTemplate(t,e,n){let r=super._parseTemplateNestedTemplate(t,e,n),o=n.templateInfo.hostProps;for(let t in o){wt(this,e,n,"property","_host_"+t,[{mode:"{",source:t,dependencies:[t]}])}return r}static _parseBindings(t,e){let n,r=[],o=0;for(;null!==(n=xt.exec(t));){n.index>o&&r.push({literal:t.slice(o,n.index)});let i=n[1][0],a=Boolean(n[2]),s=n[3].trim(),l=!1,c="",u=-1;"{"==i&&(u=s.indexOf("::"))>0&&(c=s.substring(u+2),s=s.substring(0,u),l=!0);let h=Dt(s),d=[];if(h){let{args:t,methodName:n}=h;for(let e=0;e<t.length;e++){let n=t[e];n.literal||d.push(n)}let r=e.dynamicFns;(r&&r[n]||h.static)&&(d.push(n),h.dynamicFn=!0)}else d.push(s);r.push({source:s,mode:i,negate:a,customEvent:l,signature:h,dependencies:d,event:c}),o=xt.lastIndex}if(o&&o<t.length){let e=t.substring(o);e&&r.push({literal:e})}return r.length?r:null}static _evaluateBinding(t,e,n,r,o,i){let a;return a=e.signature?Pt(t,n,r,0,e.signature):n!=e.source?j(t,e.source):i&&O(n)?j(t,n):t.__data[n],e.negate&&(a=!a),a}}return ut=n,n});let It={stack:[],registerHost(t){if(this.stack.length){this.stack[this.stack.length-1]._enqueueClient(t)}},beginHosting(t){this.stack.push(t)},endHosting(t){let e=this.stack.length;e&&this.stack[e-1]==t&&this.stack.pop()}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Rt=m(t=>{const e=Y(t);function n(t){const e=Object.getPrototypeOf(t);return e.prototype instanceof o?e:null}function r(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",t))){let e=null;t.hasOwnProperty(JSCompiler_renameProperty("properties",t))&&t.properties&&(e=function(t){const e={};for(let n in t){const r=t[n];e[n]="function"==typeof r?{type:r}:r}return e}(t.properties)),t.__ownProperties=e}return t.__ownProperties}class o extends e{static get observedAttributes(){const t=this._properties;return t?Object.keys(t).map(t=>this.attributeNameForProperty(t)):[]}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const t=n(this);t&&t.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){const t=r(this);t&&this.createProperties(t)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const t=n(this);this.__properties=Object.assign({},t&&t._properties,r(this))}return this.__properties}static typeForProperty(t){const e=this._properties[t];return e&&e.type}_initializeProperties(){this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return o}),Ft=m(t=>{const e=Rt(jt(t));function n(t,e,n,r){n.computed&&(n.readOnly=!0),n.computed&&!t._hasReadOnlyEffect(e)&&t._createComputedProperty(e,n.computed,r),n.readOnly&&!t._hasReadOnlyEffect(e)&&t._createReadOnlyProperty(e,!n.computed),n.reflectToAttribute&&!t._hasReflectEffect(e)&&t._createReflectedProperty(e),n.notify&&!t._hasNotifyEffect(e)&&t._createNotifyingProperty(e),n.observer&&t._createPropertyObserver(e,n.observer,r[n.observer]),t._addPropertyToAttributeMap(e)}function r(t,e,n,r){const o=e.content.querySelectorAll("style"),i=C(e),a=function(t){let e=_(t);return e?N(e):[]}(n),s=e.content.firstElementChild;for(let n=0;n<a.length;n++){let o=a[n];o.textContent=t._processStyleText(o.textContent,r),e.content.insertBefore(o,s)}let l=0;for(let e=0;e<i.length;e++){let n=i[e],a=o[l];a!==n?(n=n.cloneNode(!0),a.parentNode.insertBefore(n,a)):l++,n.textContent=t._processStyleText(n.textContent,r)}window.ShadyCSS&&window.ShadyCSS.prepareTemplate(e,n)}return class extends e{static _finalizeClass(){super._finalizeClass(),this.hasOwnProperty(JSCompiler_renameProperty("is",this))&&this.is&&function(t){Ht.push(t)}(this.prototype);const t=function(t){return t.hasOwnProperty(JSCompiler_renameProperty("__ownObservers",t))||(t.__ownObservers=t.hasOwnProperty(JSCompiler_renameProperty("observers",t))?t.observers:null),t.__ownObservers}(this);t&&this.createObservers(t,this._properties);let e=this.template;e&&("string"==typeof e?(console.error("template getter must return HTMLTemplateElement"),e=null):e=e.cloneNode(!0)),this.prototype._template=e}static createProperties(t){for(let e in t)n(this.prototype,e,t[e],t)}static createObservers(t,e){const n=this.prototype;for(let r=0;r<t.length;r++)n._createMethodObserver(t[r],e)}static get template(){return this.hasOwnProperty(JSCompiler_renameProperty("_template",this))||(this._template=P&&P.import(this.is,"template")||Object.getPrototypeOf(this.prototype).constructor.template),this._template}static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const t=this.importMeta;if(t)this._importPath=u(t.url);else{const t=P&&P.import(this.is);this._importPath=t&&t.assetpath||Object.getPrototypeOf(this.prototype).constructor.importPath}}return this._importPath}constructor(){super(),this._template,this._importPath,this.rootPath,this.importPath,this.root,this.$}_initializeProperties(){0,this.constructor.finalize(),this.constructor._finalizeTemplate(this.localName),super._initializeProperties(),this.rootPath=h,this.importPath=this.constructor.importPath;let t=function(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",t))){t.__propertyDefaults=null;let e=t._properties;for(let n in e){let r=e[n];"value"in r&&(t.__propertyDefaults=t.__propertyDefaults||{},t.__propertyDefaults[n]=r)}}return t.__propertyDefaults}(this.constructor);if(t)for(let e in t){let n=t[e];if(!this.hasOwnProperty(e)){let t="function"==typeof n.value?n.value.call(this):n.value;this._hasAccessor(e)?this._setPendingProperty(e,t,!0):this[e]=t}}}static _processStyleText(t,e){return c(t,e)}static _finalizeTemplate(t){const e=this.prototype._template;if(e&&!e.__polymerFinalized){e.__polymerFinalized=!0;const n=this.importPath;r(this,e,t,n?l(n):""),this.prototype._bindTemplate(e)}}connectedCallback(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),super.connectedCallback()}ready(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),super.ready()}_readyClients(){this._template&&(this.root=this._attachDom(this.root)),super._readyClients()}_attachDom(t){if(this.attachShadow)return t?(this.shadowRoot||this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t),this.shadowRoot):null;throw new Error("ShadowDOM not available. PolymerElement can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}updateStyles(t){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,t)}resolveUrl(t,e){return!e&&this.importPath&&(e=l(this.importPath)),l(t,e)}static _parseTemplateContent(t,e,n){return e.dynamicFns=e.dynamicFns||this._properties,super._parseTemplateContent(t,e,n)}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Ht=[];
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class Ut{constructor(t){this.value=t.toString()}toString(){return this.value}}function Bt(t){if(t instanceof Ut)return t.value;throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${t}`)}const zt=function(t,...e){const n=document.createElement("template");return n.innerHTML=e.reduce((e,n,r)=>e+function(t){if(t instanceof HTMLTemplateElement)return t.innerHTML;if(t instanceof Ut)return Bt(t);throw new Error(`non-template value passed to Polymer's html function: ${t}`)}(n)+t[r+1],t[0]),n},qt=Ft(HTMLElement);n(5);window.customElements.define("polymer3-app",class extends qt{static get template(){return zt`
      <style include="app-1 polymer3-app-styles style-element">
        :host {
          display: block;
        }
      </style>
      <h2>Hello {{prop1}}!</h2>
      <input type="text" value="{{prop1}}" />
      <div>
         😉😉😉😉😉
      </div>
      <div id="he">
        Poop
      </div>
    `}static get properties(){return{prop1:{type:String,value:"polymer3-app"}}}});window.customElements.define("app-1",class extends qt{static get template(){return zt`
      <style include="style-element style-element-2 polymer3-app-styles">
      </style>
      <p>This is a dummy JavaScript file. </p>
    `}static get properties(){return{prop1:{type:String,value:"app-1"}}}});n(4),n(3);window.customElements.define("polymer-test-component",class extends qt{static get template(){return zt`
      <style include="style-1 maria">    
      </style>
      <p>This is the test component</p>
      <p>This is the propertie's value: {{prop1}} </p>
      <div>This font size should be bigger</div>
    `}static get properties(){return{prop1:{type:String,value:"polymer3-app"}}}})},function(t,e){e.push([t.i,"p {\n  background-color: yellow; }\n",""])},function(t,e){e.push([t.i,":host div {\n  font-size: 20em; }\n",""])},function(t,e){const n=document.createElement("dom-module");n.innerHTML="\n    <template>\n        <style>\n            div {\n                height:500px;\n                width:100px;\n                background-color: red;\n            }\n        </style>\n    </template>\n",n.register("style-element"),document.createElement("dom-module").innerHTML="\n    <template>\n        <style>\n            div#he {\n                height:500px;\n                width:100px;\n                background-color: yellow;\n            }\n        </style>\n    </template>\n",n.register("style-element-2")},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var l,c=[],u=!1,h=-1;function d(){u&&l&&(u=!1,l.length?c=l.concat(c):h=-1,c.length&&p())}function p(){if(!u){var t=s(d);u=!0;for(var e=c.length;e;){for(l=c,c=[];++h<e;)l&&l[h].run();h=-1,e=c.length}l=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new f(t,e)),1!==c.length||u||s(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o=1,i={},a=!1,s=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){u(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&u(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){u(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){u(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(u,0,t)},l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var a={callback:t,args:e};return i[o]=a,r(o),o++},l.clearImmediate=c}function c(t){delete i[t]}function u(t){if(a)setTimeout(u,0,t);else{var e=i[t];if(e){a=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{c(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(6))},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(7),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){
/**
@license @nocompile
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
(function(){"use strict";var n,r="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},o="undefined"!=typeof window&&window===this?this:void 0!==t&&null!=t?t:this;function i(){i=function(){},o.Symbol||(o.Symbol=s)}var a,s=function(){var t=0;return function(e){return"jscomp_symbol_"+(e||"")+t++}}();function l(){i();var t=o.Symbol.iterator;t||(t=o.Symbol.iterator=o.Symbol("iterator")),"function"!=typeof Array.prototype[t]&&r(Array.prototype,t,{configurable:!0,writable:!0,value:function(){return c(this)}}),l=function(){}}function c(t){var e=0;return function(t){return l(),(t={next:t})[o.Symbol.iterator]=function(){return this},t}(function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}})}function u(t){l();var e=t[Symbol.iterator];return e?e.call(t):c(t)}if("function"==typeof Object.setPrototypeOf)a=Object.setPrototypeOf;else{var h;t:{var d={};try{d.__proto__={Ua:!0},h=d.Ua;break t}catch(t){}h=!1}a=h?function(t,e){if(t.__proto__=e,t.__proto__!==e)throw new TypeError(t+" is not extensible");return t}:null}var p=a;function f(){this.f=!1,this.b=null,this.Da=void 0,this.a=1,this.S=0,this.c=null}function m(t){if(t.f)throw new TypeError("Generator is already running");t.f=!0}function y(t,e){t.c={Wa:e,$a:!0},t.a=t.S}function g(t,e){return t.a=3,{value:e}}function v(t,e,n,r){try{var o=e.call(t.a.b,n);if(!(o instanceof Object))throw new TypeError("Iterator result "+o+" is not an object");if(!o.done)return t.a.f=!1,o;var i=o.value}catch(e){return t.a.b=null,y(t.a,e),_(t)}return t.a.b=null,r.call(t.a,i),_(t)}function _(t){for(;t.a.a;)try{var e=t.b(t.a);if(e)return t.a.f=!1,{value:e.value,done:!1}}catch(e){t.a.Da=void 0,y(t.a,e)}if(t.a.f=!1,t.a.c){if(e=t.a.c,t.a.c=null,e.$a)throw e.Wa;return{value:e.return,done:!0}}return{value:void 0,done:!0}}function b(t){this.next=function(e){return m(t.a),t.a.b?e=v(t,t.a.b.next,e,t.a.B):(t.a.B(e),e=_(t)),e},this.throw=function(e){return m(t.a),t.a.b?e=v(t,t.a.b.throw,e,t.a.B):(y(t.a,e),e=_(t)),e},this.return=function(e){return function(t,e){m(t.a);var n=t.a.b;return n?v(t,"return"in n?n.return:function(t){return{value:t,done:!0}},e,t.a.return):(t.a.return(e),_(t))}(t,e)},l(),this[Symbol.iterator]=function(){return this}}function w(t,e){return e=new b(new function(t){this.a=new f,this.b=t}(e)),p&&p(e,t.prototype),e}f.prototype.B=function(t){this.Da=t},f.prototype.return=function(t){this.c={return:t},this.a=this.S},function(){if(!function(){var t=document.createEvent("Event");return t.initEvent("foo",!0,!0),t.preventDefault(),t.defaultPrevented}()){var t=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(t.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return!0},configurable:!0}))}}var e=/Trident/.test(navigator.userAgent);if((!window.CustomEvent||e&&"function"!=typeof window.CustomEvent)&&(window.CustomEvent=function(t,e){e=e||{};var n=document.createEvent("CustomEvent");return n.initCustomEvent(t,!!e.bubbles,!!e.cancelable,e.detail),n},window.CustomEvent.prototype=window.Event.prototype),!window.Event||e&&"function"!=typeof window.Event){var n=window.Event;if(window.Event=function(t,e){e=e||{};var n=document.createEvent("Event");return n.initEvent(t,!!e.bubbles,!!e.cancelable),n},n)for(var r in n)window.Event[r]=n[r];window.Event.prototype=n.prototype}if(!window.MouseEvent||e&&"function"!=typeof window.MouseEvent){if(e=window.MouseEvent,window.MouseEvent=function(t,e){e=e||{};var n=document.createEvent("MouseEvent");return n.initMouseEvent(t,!!e.bubbles,!!e.cancelable,e.view||window,e.detail,e.screenX,e.screenY,e.clientX,e.clientY,e.ctrlKey,e.altKey,e.shiftKey,e.metaKey,e.button,e.relatedTarget),n},e)for(r in e)window.MouseEvent[r]=e[r];window.MouseEvent.prototype=e.prototype}Array.from||(Array.from=function(t){return[].slice.call(t)}),Object.assign||(Object.assign=function(t,e){for(var n,r=[].slice.call(arguments,1),o=0;o<r.length;o++)if(n=r[o])for(var i=t,a=n,s=Object.getOwnPropertyNames(a),l=0;l<s.length;l++)i[n=s[l]]=a[n];return t})}(window.WebComponents),function(){function t(){}function e(t,e){if(!t.childNodes.length)return[];switch(t.nodeType){case Node.DOCUMENT_NODE:return m.call(t,e);case Node.DOCUMENT_FRAGMENT_NODE:return y.call(t,e);default:return f.call(t,e)}}var n="undefined"==typeof HTMLTemplateElement,r=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),o=!1;/Trident/.test(navigator.userAgent)&&function(){function t(t,e){if(t instanceof DocumentFragment)for(var r;r=t.firstChild;)n.call(this,r,e);else n.call(this,t,e);return t}o=!0;var e=Node.prototype.cloneNode;Node.prototype.cloneNode=function(t){return t=e.call(this,t),this instanceof DocumentFragment&&(t.__proto__=DocumentFragment.prototype),t},DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll,DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector,Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},configurable:!0},nodeName:{get:function(){return"#document-fragment"},configurable:!0}});var n=Node.prototype.insertBefore;Node.prototype.insertBefore=t;var r=Node.prototype.appendChild;Node.prototype.appendChild=function(e){return e instanceof DocumentFragment?t.call(this,e,null):r.call(this,e),e};var i=Node.prototype.removeChild,a=Node.prototype.replaceChild;Node.prototype.replaceChild=function(e,n){return e instanceof DocumentFragment?(t.call(this,e,n),i.call(this,n)):a.call(this,e,n),n},Document.prototype.createDocumentFragment=function(){var t=this.createElement("df");return t.__proto__=DocumentFragment.prototype,t};var s=Document.prototype.importNode;Document.prototype.importNode=function(t,e){return e=s.call(this,t,e||!1),t instanceof DocumentFragment&&(e.__proto__=DocumentFragment.prototype),e}}();var i=Node.prototype.cloneNode,a=Document.prototype.createElement,s=Document.prototype.importNode,l=Node.prototype.removeChild,c=Node.prototype.appendChild,u=Node.prototype.replaceChild,h=DOMParser.prototype.parseFromString,d=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),p=Object.getOwnPropertyDescriptor(window.Node.prototype,"childNodes"),f=Element.prototype.querySelectorAll,m=Document.prototype.querySelectorAll,y=DocumentFragment.prototype.querySelectorAll,g=function(){if(!n){var t=document.createElement("template"),e=document.createElement("template");return e.content.appendChild(document.createElement("div")),t.content.appendChild(e),0===(t=t.cloneNode(!0)).content.childNodes.length||0===t.content.firstChild.content.childNodes.length||r}}();if(n){var v=document.implementation.createHTMLDocument("template"),_=!0,b=document.createElement("style");b.textContent="template{display:none;}";var w=document.head;w.insertBefore(b,w.firstElementChild),t.prototype=Object.create(HTMLElement.prototype);var E=!document.createElement("div").hasOwnProperty("innerHTML");t.R=function(e){if(!e.content&&e.namespaceURI===document.documentElement.namespaceURI){e.content=v.createDocumentFragment();for(var n;n=e.firstChild;)c.call(e.content,n);if(E)e.__proto__=t.prototype;else if(e.cloneNode=function(e){return t.b(this,e)},_)try{N(e),S(e)}catch(t){_=!1}t.a(e.content)}};var C={option:["select"],thead:["table"],col:["colgroup","table"],tr:["tbody","table"],th:["tr","tbody","table"],td:["tr","tbody","table"]},N=function(e){Object.defineProperty(e,"innerHTML",{get:function(){return D(this)},set:function(e){var n=C[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(e)||["",""])[1].toLowerCase()];if(n)for(var r=0;r<n.length;r++)e="<"+n[r]+">"+e+"</"+n[r]+">";for(v.body.innerHTML=e,t.a(v);this.content.firstChild;)l.call(this.content,this.content.firstChild);if(e=v.body,n)for(r=0;r<n.length;r++)e=e.lastChild;for(;e.firstChild;)c.call(this.content,e.firstChild)},configurable:!0})},S=function(t){Object.defineProperty(t,"outerHTML",{get:function(){return"<template>"+this.innerHTML+"</template>"},set:function(t){if(!this.parentNode)throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");for(v.body.innerHTML=t,t=this.ownerDocument.createDocumentFragment();v.body.firstChild;)c.call(t,v.body.firstChild);u.call(this.parentNode,t,this)},configurable:!0})};N(t.prototype),S(t.prototype),t.a=function(n){for(var r,o=0,i=(n=e(n,"template")).length;o<i&&(r=n[o]);o++)t.R(r)},document.addEventListener("DOMContentLoaded",function(){t.a(document)}),Document.prototype.createElement=function(){var e=a.apply(this,arguments);return"template"===e.localName&&t.R(e),e},DOMParser.prototype.parseFromString=function(){var e=h.apply(this,arguments);return t.a(e),e},Object.defineProperty(HTMLElement.prototype,"innerHTML",{get:function(){return D(this)},set:function(e){d.set.call(this,e),t.a(this)},configurable:!0,enumerable:!0});var T=/[&\u00A0"]/g,P=/[&\u00A0<>]/g,O=function(t){switch(t){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case" ":return"&nbsp;"}},x=(b=function(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e})("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),A=b("style script xmp iframe noembed noframes plaintext noscript".split(" ")),D=function(t,e){"template"===t.localName&&(t=t.content);for(var n,r="",o=e?e(t):p.get.call(t),i=0,a=o.length;i<a&&(n=o[i]);i++){t:{var s=n,l=t,c=e;switch(s.nodeType){case Node.ELEMENT_NODE:for(var u=s.localName,h="<"+u,d=s.attributes,f=0;l=d[f];f++)h+=" "+l.name+'="'+l.value.replace(T,O)+'"';h+=">",s=x[u]?h:h+D(s,c)+"</"+u+">";break t;case Node.TEXT_NODE:s=s.data,s=l&&A[l.localName]?s:s.replace(P,O);break t;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break t;default:throw window.console.error(s),Error("not implemented")}}r+=s}return r}}if(n||g){t.b=function(t,e){var n=i.call(t,!1);return this.R&&this.R(n),e&&(c.call(n.content,i.call(t.content,!0)),M(n.content,t.content)),n};var M=function(n,r){if(r.querySelectorAll&&0!==(r=e(r,"template")).length)for(var o,i,a=0,s=(n=e(n,"template")).length;a<s;a++)i=r[a],o=n[a],t&&t.R&&t.R(i),u.call(o.parentNode,L.call(i,!0),o)},L=Node.prototype.cloneNode=function(e){if(!o&&r&&this instanceof DocumentFragment){if(!e)return this.ownerDocument.createDocumentFragment();var n=k.call(this.ownerDocument,this,!0)}else n=this.nodeType===Node.ELEMENT_NODE&&"template"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?t.b(this,e):i.call(this,e);return e&&M(n,this),n},k=Document.prototype.importNode=function(n,r){if(r=r||!1,"template"===n.localName)return t.b(n,r);var o=s.call(this,n,r);if(r){M(o,n),n=e(o,'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');for(var i,l=0;l<n.length;l++){i=n[l],(r=a.call(document,"script")).textContent=i.textContent;for(var c,h=i.attributes,d=0;d<h.length;d++)c=h[d],r.setAttribute(c.name,c.value);u.call(i.parentNode,r,i)}}return o}}n&&(window.HTMLTemplateElement=t)}();var E=setTimeout;function C(){}function N(t){if(!(this instanceof N))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this.J=0,this.Aa=!1,this.A=void 0,this.V=[],x(t,this)}function S(t,e){for(;3===t.J;)t=t.A;0===t.J?t.V.push(e):(t.Aa=!0,N.a(function(){var n=1===t.J?e.bb:e.cb;if(null===n)(1===t.J?T:P)(e.va,t.A);else{try{var r=n(t.A)}catch(t){return void P(e.va,t)}T(e.va,r)}}))}function T(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof N)return t.J=3,t.A=e,void O(t);if("function"==typeof n)return void x(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t.J=1,t.A=e,O(t)}catch(e){P(t,e)}}function P(t,e){t.J=2,t.A=e,O(t)}function O(t){2===t.J&&0===t.V.length&&N.a(function(){t.Aa||N.b(t.A)});for(var e=0,n=t.V.length;e<n;e++)S(t,t.V[e]);t.V=null}function x(t,e){var n=!1;try{t(function(t){n||(n=!0,T(e,t))},function(t){n||(n=!0,P(e,t))})}catch(t){n||(n=!0,P(e,t))}}if(N.prototype.catch=function(t){return this.then(null,t)},N.prototype.then=function(t,e){var n=new this.constructor(C);return S(this,new function(t,e,n){this.bb="function"==typeof t?t:null,this.cb="function"==typeof e?e:null,this.va=n}(t,e,n)),n},N.prototype.finally=function(t){var e=this.constructor;return this.then(function(n){return e.resolve(t()).then(function(){return n})},function(n){return e.resolve(t()).then(function(){return e.reject(n)})})},N.c=function(t){return new N(function(e,n){function r(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(e){r(t,e)},n)}o[t]=a,0==--i&&e(o)}catch(t){n(t)}}if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var o=Array.prototype.slice.call(t);if(0===o.length)return e([]);for(var i=o.length,a=0;a<o.length;a++)r(a,o[a])})},N.resolve=function(t){return t&&"object"==typeof t&&t.constructor===N?t:new N(function(e){e(t)})},N.reject=function(t){return new N(function(e,n){n(t)})},N.f=function(t){return new N(function(e,n){for(var r=0,o=t.length;r<o;r++)t[r].then(e,n)})},N.a="function"==typeof e&&function(t){e(t)}||function(t){E(t,0)},N.b=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},!window.Promise&&(window.Promise=N,N.prototype.then=N.prototype.then,N.all=N.c,N.race=N.f,N.resolve=N.resolve,N.reject=N.reject,!window.setImmediate)){var A=document.createTextNode(""),D=[];new MutationObserver(function(){for(var t=D.length,e=0;e<t;e++)D[e]();D.splice(0,t)}).observe(A,{characterData:!0}),N.a=function(t){D.push(t),A.textContent=0<A.textContent.length?"":"a"}}var M={},L=Object.create,k=Object.defineProperties,j=Object.defineProperty;function I(t,e){return{value:t,configurable:!!(e=void 0===e?{}:e).Ba,writable:!!e.kb,enumerable:!!e.e}}var R=void 0;try{R=1===j({},"y",{get:function(){return 1}}).y}catch(t){R=!1}var F={};var H=L(null);function U(t){if(this instanceof U)throw new TypeError("Symbol is not a constructor");var e=function(t){t=String(t);for(var e="",n=0;F[t+e];)e=n+=1;F[t+e]=1;var r="Symbol("+t+e+")";return R&&j(Object.prototype,r,{get:void 0,set:function(t){j(this,r,I(t,{Ba:!0,kb:!0}))},configurable:!0,enumerable:!1}),r}(t=void 0===t?"":String(t));return R?L(H,{xa:I(t),Na:I(e)}):e}k(U,{for:I(function(t){if(t=String(t),M[t])return M[t];var e=U(t);return M[t]=e}),keyFor:I(function(t){if(R&&(!t||"Symbol"!==t[U.toStringTag]))throw new TypeError(t+" is not a symbol");for(var e in M)if(M[e]===t)return R?M[e].xa:M[e].substr(7,M[e].length-8)})}),k(U,{Bb:I(U("hasInstance")),Cb:I(U("isConcatSpreadable")),iterator:I(U("iterator")),match:I(U("match")),replace:I(U("replace")),search:I(U("search")),Eb:I(U("species")),split:I(U("split")),Fb:I(U("toPrimitive")),toStringTag:I(U("toStringTag")),unscopables:I(U("unscopables"))}),k(H,{constructor:I(U),toString:I(function(){return this.Na}),valueOf:I(function(){return"Symbol("+this.xa+")"})}),R&&j(H,U.toStringTag,I("Symbol",{Ba:!0}));var B="function"==typeof Symbol?Symbol:U;if(!window.Symbol){window.Symbol=B;var z=window.Symbol.iterator;Array.prototype[z]=function t(){var e,n=this;return w(t,function(t){if(1==t.a&&(e=0),3!=t.a)return e<n.length?t=g(t,n[e]):(t.a=0,t=void 0),t;e++,t.a=2})},Set.prototype[z]=function t(){var e,n,r=this;return w(t,function(t){if(1==t.a&&(e=[],r.forEach(function(t){e.push(t)}),n=0),3!=t.a)return n<e.length?t=g(t,e[n]):(t.a=0,t=void 0),t;n++,t.a=2})},Map.prototype[z]=function t(){var e,n,r=this;return w(t,function(t){if(1==t.a&&(e=[],r.forEach(function(t,n){e.push([n,t])}),n=0),3!=t.a)return n<e.length?t=g(t,e[n]):(t.a=0,t=void 0),t;n++,t.a=2})},String.prototype[z]=function t(){var e,n=this;return w(t,function(t){if(1==t.a&&(e=0),3!=t.a)return e<n.length?t=g(t,n[e]):(t.a=0,t=void 0),t;e++,t.a=2})}}window.WebComponents=window.WebComponents||{flags:{}};var q=document.querySelector('script[src*="webcomponents-bundle"]'),V=/wc-(.+)/,W={};if(!W.noOpts){if(location.search.slice(1).split("&").forEach(function(t){var e;(t=t.split("="))[0]&&(e=t[0].match(V))&&(W[e[1]]=t[1]||!0)}),q)for(var G,$=0;G=q.attributes[$];$++)"src"!==G.name&&(W[G.name]=G.value||!0);if(W.log&&W.log.split){var Y=W.log.split(",");W.log={},Y.forEach(function(t){W.log[t]=!0})}else W.log={}}window.WebComponents.flags=W;var J=W.shadydom;J&&(window.ShadyDOM=window.ShadyDOM||{},window.ShadyDOM.force=J);var X=W.register||W.ce;function K(){this.Fa=this.root=null,this.fa=!1,this.N=this.ba=this.qa=this.assignedSlot=this.assignedNodes=this.T=null,this.childNodes=this.nextSibling=this.previousSibling=this.lastChild=this.firstChild=this.parentNode=this.W=void 0,this.Ja=this.ya=!1,this.$={}}function Z(t){return t.la||(t.la=new K),t.la}function Q(t){return t&&t.la}X&&window.customElements&&(window.customElements.forcePolyfill=X),K.prototype.toJSON=function(){return{}};var tt=window.ShadyDOM||{};tt.Ya=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var et=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild");tt.K=!!(et&&et.configurable&&et.get),tt.ta=tt.force||!tt.Ya;var nt=navigator.userAgent.match("Trident"),rt=navigator.userAgent.match("Edge");function ot(t){return(t=Q(t))&&void 0!==t.firstChild}function it(t){return"ShadyRoot"===t.Qa}function at(t){if(it(t=t.getRootNode()))return t}void 0===tt.Ha&&(tt.Ha=tt.K&&(nt||rt));var st=Element.prototype,lt=st.matches||st.matchesSelector||st.mozMatchesSelector||st.msMatchesSelector||st.oMatchesSelector||st.webkitMatchesSelector;function ct(t,e){if(t&&e)for(var n,r=Object.getOwnPropertyNames(e),o=0;o<r.length&&(n=r[o]);o++){var i=n,a=t,s=Object.getOwnPropertyDescriptor(e,i);s&&Object.defineProperty(a,i,s)}}function ut(t,e){for(var n=[],r=1;r<arguments.length;++r)n[r-1]=arguments[r];for(r=0;r<n.length;r++)ct(t,n[r]);return t}var ht=document.createTextNode(""),dt=0,pt=[];function ft(t){pt.push(t),ht.textContent=dt++}new MutationObserver(function(){for(;pt.length;)try{pt.shift()()}catch(t){throw ht.textContent=dt++,t}}).observe(ht,{characterData:!0});var mt=!!document.contains;function yt(t,e){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function gt(t){for(var e=t.length-1;0<=e;e--){var n=t[e],r=n.getAttribute("id")||n.getAttribute("name");r&&"length"!==r&&isNaN(r)&&(t[r]=n)}return t.item=function(e){return t[e]},t.namedItem=function(e){if("length"!==e&&isNaN(e)&&t[e])return t[e];for(var n=u(t),r=n.next();!r.done;r=n.next())if(((r=r.value).getAttribute("id")||r.getAttribute("name"))==e)return r;return null},t}var vt,_t=[];function bt(t){vt||(vt=!0,ft(wt)),_t.push(t)}function wt(){vt=!1;for(var t=!!_t.length;_t.length;)_t.shift()();return t}function Et(){this.a=!1,this.addedNodes=[],this.removedNodes=[],this.ea=new Set}wt.list=_t,Et.prototype.flush=function(){if(this.a){this.a=!1;var t=this.takeRecords();t.length&&this.ea.forEach(function(e){e(t)})}},Et.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var t=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];return this.addedNodes=[],this.removedNodes=[],t}return[]};var Ct=Element.prototype.insertBefore,Nt=Element.prototype.replaceChild,St=Element.prototype.removeChild,Tt=Element.prototype.setAttribute,Pt=Element.prototype.removeAttribute,Ot=Element.prototype.cloneNode,xt=Document.prototype.importNode,At=Element.prototype.addEventListener,Dt=Element.prototype.removeEventListener,Mt=Window.prototype.addEventListener,Lt=Window.prototype.removeEventListener,kt=Element.prototype.dispatchEvent,jt=Node.prototype.contains||HTMLElement.prototype.contains,It=Document.prototype.getElementById,Rt=Element.prototype.querySelector,Ft=DocumentFragment.prototype.querySelector,Ht=Document.prototype.querySelector,Ut=Element.prototype.querySelectorAll,Bt=DocumentFragment.prototype.querySelectorAll,zt=Document.prototype.querySelectorAll,qt={};qt.appendChild=Element.prototype.appendChild,qt.insertBefore=Ct,qt.replaceChild=Nt,qt.removeChild=St,qt.setAttribute=Tt,qt.removeAttribute=Pt,qt.cloneNode=Ot,qt.importNode=xt,qt.addEventListener=At,qt.removeEventListener=Dt,qt.lb=Mt,qt.mb=Lt,qt.dispatchEvent=kt,qt.contains=jt,qt.getElementById=It,qt.vb=Rt,qt.zb=Ft,qt.tb=Ht,qt.querySelector=function(t){switch(this.nodeType){case Node.ELEMENT_NODE:return Rt.call(this,t);case Node.DOCUMENT_NODE:return Ht.call(this,t);default:return Ft.call(this,t)}},qt.wb=Ut,qt.Ab=Bt,qt.ub=zt,qt.querySelectorAll=function(t){switch(this.nodeType){case Node.ELEMENT_NODE:return Ut.call(this,t);case Node.DOCUMENT_NODE:return zt.call(this,t);default:return Bt.call(this,t)}};var Vt=/[&\u00A0"]/g,Wt=/[&\u00A0<>]/g;function Gt(t){switch(t){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case" ":return"&nbsp;"}}function $t(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e}var Yt=$t("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),Jt=$t("style script xmp iframe noembed noframes plaintext noscript".split(" "));function Xt(t,e){"template"===t.localName&&(t=t.content);for(var n,r="",o=e?e(t):t.childNodes,i=0,a=o.length;i<a&&(n=o[i]);i++){t:{var s=n,l=t,c=e;switch(s.nodeType){case Node.ELEMENT_NODE:for(var u=s.localName,h="<"+u,d=s.attributes,p=0;l=d[p];p++)h+=" "+l.name+'="'+l.value.replace(Vt,Gt)+'"';h+=">",s=Yt[u]?h:h+Xt(s,c)+"</"+u+">";break t;case Node.TEXT_NODE:s=s.data,s=l&&Jt[l.localName]?s:s.replace(Wt,Gt);break t;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break t;default:throw window.console.error(s),Error("not implemented")}}r+=s}return r}var Kt=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),Zt=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1);function Qt(t){var e=[];for(Kt.currentNode=t,t=Kt.firstChild();t;)e.push(t),t=Kt.nextSibling();return e}var te={parentNode:function(t){return Kt.currentNode=t,Kt.parentNode()},firstChild:function(t){return Kt.currentNode=t,Kt.firstChild()},lastChild:function(t){return Kt.currentNode=t,Kt.lastChild()},previousSibling:function(t){return Kt.currentNode=t,Kt.previousSibling()},nextSibling:function(t){return Kt.currentNode=t,Kt.nextSibling()}};te.childNodes=Qt,te.parentElement=function(t){return Zt.currentNode=t,Zt.parentNode()},te.firstElementChild=function(t){return Zt.currentNode=t,Zt.firstChild()},te.lastElementChild=function(t){return Zt.currentNode=t,Zt.lastChild()},te.previousElementSibling=function(t){return Zt.currentNode=t,Zt.previousSibling()},te.nextElementSibling=function(t){return Zt.currentNode=t,Zt.nextSibling()},te.children=function(t){var e=[];for(Zt.currentNode=t,t=Zt.firstChild();t;)e.push(t),t=Zt.nextSibling();return gt(e)},te.innerHTML=function(t){return Xt(t,function(t){return Qt(t)})},te.textContent=function(t){switch(t.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:t=document.createTreeWalker(t,NodeFilter.SHOW_TEXT,null,!1);for(var e,n="";e=t.nextNode();)n+=e.nodeValue;return n;default:return t.nodeValue}};var ee=tt.K,ne=[Node.prototype,Element.prototype,HTMLElement.prototype];function re(t){var e;t:{for(e=0;e<ne.length;e++){var n=ne[e];if(n.hasOwnProperty(t)){e=n;break t}}e=void 0}if(!e)throw Error("Could not find descriptor for "+t);return Object.getOwnPropertyDescriptor(e,t)}var oe=ee?{parentNode:re("parentNode"),firstChild:re("firstChild"),lastChild:re("lastChild"),previousSibling:re("previousSibling"),nextSibling:re("nextSibling"),childNodes:re("childNodes"),parentElement:re("parentElement"),previousElementSibling:re("previousElementSibling"),nextElementSibling:re("nextElementSibling"),innerHTML:re("innerHTML"),textContent:re("textContent"),firstElementChild:re("firstElementChild"),lastElementChild:re("lastElementChild"),children:re("children")}:{},ie=ee?{firstElementChild:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"firstElementChild"),lastElementChild:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"lastElementChild"),children:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"children")}:{},ae=ee?{firstElementChild:Object.getOwnPropertyDescriptor(Document.prototype,"firstElementChild"),lastElementChild:Object.getOwnPropertyDescriptor(Document.prototype,"lastElementChild"),children:Object.getOwnPropertyDescriptor(Document.prototype,"children")}:{},se={Ea:oe,yb:ie,sb:ae,parentNode:function(t){return oe.parentNode.get.call(t)},firstChild:function(t){return oe.firstChild.get.call(t)},lastChild:function(t){return oe.lastChild.get.call(t)},previousSibling:function(t){return oe.previousSibling.get.call(t)},nextSibling:function(t){return oe.nextSibling.get.call(t)},childNodes:function(t){return Array.prototype.slice.call(oe.childNodes.get.call(t))},parentElement:function(t){return oe.parentElement.get.call(t)},previousElementSibling:function(t){return oe.previousElementSibling.get.call(t)},nextElementSibling:function(t){return oe.nextElementSibling.get.call(t)},innerHTML:function(t){return oe.innerHTML.get.call(t)},textContent:function(t){return oe.textContent.get.call(t)},children:function(t){switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return ie.children.get.call(t);case Node.DOCUMENT_NODE:return ae.children.get.call(t);default:return oe.children.get.call(t)}},firstElementChild:function(t){switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return ie.firstElementChild.get.call(t);case Node.DOCUMENT_NODE:return ae.firstElementChild.get.call(t);default:return oe.firstElementChild.get.call(t)}},lastElementChild:function(t){switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return ie.lastElementChild.get.call(t);case Node.DOCUMENT_NODE:return ae.lastElementChild.get.call(t);default:return oe.lastElementChild.get.call(t)}}},le=tt.Ha?se:te;function ce(t){for(;t.firstChild;)t.removeChild(t.firstChild)}var ue=tt.K,he=document.implementation.createHTMLDocument("inert"),de=Object.getOwnPropertyDescriptor(Node.prototype,"isConnected"),pe=de&&de.get,fe=Object.getOwnPropertyDescriptor(Document.prototype,"activeElement"),me={parentElement:{get:function(){var t=Q(this);return(t=t&&t.parentNode)&&t.nodeType!==Node.ELEMENT_NODE&&(t=null),void 0!==t?t:le.parentElement(this)},configurable:!0},parentNode:{get:function(){var t=Q(this);return void 0!==(t=t&&t.parentNode)?t:le.parentNode(this)},configurable:!0},nextSibling:{get:function(){var t=Q(this);return void 0!==(t=t&&t.nextSibling)?t:le.nextSibling(this)},configurable:!0},previousSibling:{get:function(){var t=Q(this);return void 0!==(t=t&&t.previousSibling)?t:le.previousSibling(this)},configurable:!0},nextElementSibling:{get:function(){var t=Q(this);if(t&&void 0!==t.nextSibling){for(t=this.nextSibling;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.nextSibling;return t}return le.nextElementSibling(this)},configurable:!0},previousElementSibling:{get:function(){var t=Q(this);if(t&&void 0!==t.previousSibling){for(t=this.previousSibling;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.previousSibling;return t}return le.previousElementSibling(this)},configurable:!0}},ye={className:{get:function(){return this.getAttribute("class")||""},set:function(t){this.setAttribute("class",t)},configurable:!0}},ge={childNodes:{get:function(){if(ot(this)){var t=Q(this);if(!t.childNodes){t.childNodes=[];for(var e=this.firstChild;e;e=e.nextSibling)t.childNodes.push(e)}var n=t.childNodes}else n=le.childNodes(this);return n.item=function(t){return n[t]},n},configurable:!0},childElementCount:{get:function(){return this.children.length},configurable:!0},firstChild:{get:function(){var t=Q(this);return void 0!==(t=t&&t.firstChild)?t:le.firstChild(this)},configurable:!0},lastChild:{get:function(){var t=Q(this);return void 0!==(t=t&&t.lastChild)?t:le.lastChild(this)},configurable:!0},textContent:{get:function(){if(ot(this)){for(var t,e=[],n=0,r=this.childNodes;t=r[n];n++)t.nodeType!==Node.COMMENT_NODE&&e.push(t.textContent);return e.join("")}return le.textContent(this)},set:function(t){switch(void 0!==t&&null!==t||(t=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!ot(this)&&ue){var e=this.firstChild;(e!=this.lastChild||e&&e.nodeType!=Node.TEXT_NODE)&&ce(this),se.Ea.textContent.set.call(this,t)}else ce(this),(0<t.length||this.nodeType===Node.ELEMENT_NODE)&&this.appendChild(document.createTextNode(t));break;default:this.nodeValue=t}},configurable:!0},firstElementChild:{get:function(){var t=Q(this);if(t&&void 0!==t.firstChild){for(t=this.firstChild;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.nextSibling;return t}return le.firstElementChild(this)},configurable:!0},lastElementChild:{get:function(){var t=Q(this);if(t&&void 0!==t.lastChild){for(t=this.lastChild;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.previousSibling;return t}return le.lastElementChild(this)},configurable:!0},children:{get:function(){return ot(this)?gt(Array.prototype.filter.call(this.childNodes,function(t){return t.nodeType===Node.ELEMENT_NODE})):le.children(this)},configurable:!0},innerHTML:{get:function(){return ot(this)?Xt("template"===this.localName?this.content:this):le.innerHTML(this)},set:function(t){var e="template"===this.localName?this.content:this;ce(e);var n=this.localName||"div";for(n=this.namespaceURI&&this.namespaceURI!==he.namespaceURI?he.createElementNS(this.namespaceURI,n):he.createElement(n),ue?se.Ea.innerHTML.set.call(n,t):n.innerHTML=t,t="template"===this.localName?n.content:n;t.firstChild;)e.appendChild(t.firstChild)},configurable:!0}},ve={shadowRoot:{get:function(){var t=Q(this);return t&&t.Fa||null},configurable:!0}},_e={activeElement:{get:function(){var t=fe&&fe.get?fe.get.call(document):tt.K?void 0:document.activeElement;if(t&&t.nodeType){var e=!!it(this);if(this===document||e&&this.host!==t&&qt.contains.call(this.host,t)){for(e=at(t);e&&e!==this;)e=at(t=e.host);t=this===document?e?null:t:e===this?t:null}else t=null}else t=null;return t},set:function(){},configurable:!0}};function be(t,e,n){for(var r in e){var o=Object.getOwnPropertyDescriptor(t,r);o&&o.configurable||!o&&n?Object.defineProperty(t,r,e[r]):n&&console.warn("Could not define",r,"on",t)}}function we(t){be(t,me),be(t,ye),be(t,ge),be(t,_e)}var Ee=tt.K?function(){}:function(t){var e=Z(t);e.ya||(e.ya=!0,be(t,me,!0),be(t,ye,!0))},Ce=tt.K?function(){}:function(t){Z(t).Ja||(be(t,ge,!0),be(t,ve,!0))},Ne=le.childNodes;function Se(t,e,n){Ee(t),n=n||null;var r=Z(t),o=Z(e),i=n?Z(n):null;r.previousSibling=n?i.previousSibling:e.lastChild,(i=Q(r.previousSibling))&&(i.nextSibling=t),(i=Q(r.nextSibling=n))&&(i.previousSibling=t),r.parentNode=e,n?n===o.firstChild&&(o.firstChild=t):(o.lastChild=t,o.firstChild||(o.firstChild=t)),o.childNodes=null}function Te(t){var e=Z(t);if(void 0===e.firstChild){e.childNodes=null;var n=Ne(t);for(e.firstChild=n[0]||null,e.lastChild=n[n.length-1]||null,Ce(t),e=0;e<n.length;e++){var r=n[e],o=Z(r);o.parentNode=t,o.nextSibling=n[e+1]||null,o.previousSibling=n[e-1]||null,Ee(r)}}}var Pe=le.parentNode;function Oe(t,e,n){if(e===t)throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");if(n){var r=Q(n);if(void 0!==(r=r&&r.parentNode)&&r!==t||void 0===r&&Pe(n)!==t)throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.")}if(n===e)return e;var o,i;if(e.parentNode&&xe(e.parentNode,e),!e.__noInsertionPoint){var a;if(i=o=at(t))"slot"===e.localName?a=[e]:e.querySelectorAll&&(a=e.querySelectorAll("slot")),i=a&&a.length?a:void 0;i&&(r=i,(a=o).a=a.a||[],a.m=a.m||[],a.v=a.v||{},a.a.push.apply(a.a,r instanceof Array?r:function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(u(r))))}if(("slot"===t.localName||i)&&(o=o||at(t))&&dn(o),ot(t)){if(o=n,Ce(t),void 0!==(i=Z(t)).firstChild&&(i.childNodes=null),e.nodeType===Node.DOCUMENT_FRAGMENT_NODE){for(i=e.childNodes,a=0;a<i.length;a++)Se(i[a],t,o);i=void 0!==(o=Z(e)).firstChild?null:void 0,o.firstChild=o.lastChild=i,o.childNodes=i}else Se(e,t,o);if(o=Q(t),Ae(t)){dn(o.root);var s=!0}else o.root&&(s=!0)}return s||(s=it(t)?t.host:t,n?(n=function t(e){var n=e;e&&"slot"===e.localName&&(n=(n=(n=Q(e))&&n.N)&&n.length?n[0]:t(e.nextSibling));return n}(n),qt.insertBefore.call(s,e,n)):qt.appendChild.call(s,e)),Me(t,e),e}function xe(t,e){if(e.parentNode!==t)throw Error("The node to be removed is not a child of this node: "+e);var n=at(e),r=Q(t);if(ot(t)){var o=Z(e),i=Z(t);e===i.firstChild&&(i.firstChild=o.nextSibling),e===i.lastChild&&(i.lastChild=o.previousSibling);var a=o.previousSibling,s=o.nextSibling;if(a&&(Z(a).nextSibling=s),s&&(Z(s).previousSibling=a),o.parentNode=o.previousSibling=o.nextSibling=void 0,void 0!==i.childNodes&&(i.childNodes=null),Ae(t)){dn(r.root);var l=!0}}if(function t(e){var n=Q(e);if(n&&void 0!==n.W)for(var r,o=0,i=(n=e.childNodes).length;o<i&&(r=n[o]);o++)t(r);(e=Q(e))&&(e.W=void 0)}(e),n){if((o=t&&"slot"===t.localName)&&(l=!0),n.m){for(f in gn(n),i=n.v)for(a=i[f],s=0;s<a.length;s++){var c=a[s];if(yt(e,c)){a.splice(s,1);var u=n.m.indexOf(c);if(0<=u&&n.m.splice(u,1),s--,c=(u=Q(c)).N)for(var h=0;h<c.length;h++){var d=c[h],p=an(d);p&&qt.removeChild.call(p,d)}u.N=[],u.assignedNodes=[],u=!0}}var f=u}else f=void 0;(f||o)&&dn(n)}return l||(l=it(t)?t.host:t,(!r.root&&"slot"!==e.localName||l===Pe(e))&&qt.removeChild.call(l,e)),Me(t,null,e),e}function Ae(t){return(t=(t=Q(t))&&t.root)&&bn(t)}function De(t,e){if("slot"===e)Ae(t=t.parentNode)&&dn(Q(t).root);else if("slot"===t.localName&&"name"===e&&(e=at(t))){if(e.m){var n=t.Ma,r=vn(t);if(r!==n){var o=(n=e.v[n]).indexOf(t);0<=o&&n.splice(o,1),(n=e.v[r]||(e.v[r]=[])).push(t),1<n.length&&(e.v[r]=_n(n))}}dn(e)}}function Me(t,e,n){(t=(t=Q(t))&&t.T)&&(e&&t.addedNodes.push(e),n&&t.removedNodes.push(n),function(t){t.a||(t.a=!0,ft(function(){t.flush()}))}(t))}function Le(t,e,n){var r=[];return function t(e,n,r,o){for(var i,a=0,s=e.length;a<s&&(i=e[a]);a++){var l;if(l=i.nodeType===Node.ELEMENT_NODE){var c=n,u=r,h=o,d=c(l=i);d&&h.push(l),u&&u(d)?l=d:(t(l.childNodes,c,u,h),l=void 0)}if(l)break}}(t.childNodes,e,n,r),r}var ke=null;function je(t,e,n){ke||(ke=window.ShadyCSS&&window.ShadyCSS.ScopingShim),ke&&"class"===e?ke.setElementClass(t,n):(qt.setAttribute.call(t,e,n),De(t,e))}var Ie="__eventWrappers"+Date.now(),Re=function(){var t=Object.getOwnPropertyDescriptor(Event.prototype,"composed");return t?function(e){return t.get.call(e)}:null}(),Fe={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},He={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};function Ue(t,e){var n=[],r=t;for(t=t===window?window:t.getRootNode();r;)n.push(r),r=r.assignedSlot?r.assignedSlot:r.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&r.host&&(e||r!==t)?r.host:r.parentNode;return n[n.length-1]===document&&n.push(window),n}function Be(t,e){if(!it)return t;t=Ue(t,!0);for(var n,r,o,i,a=0;a<e.length;a++)if((o=(n=e[a])===window?window:n.getRootNode())!==r&&(i=t.indexOf(o),r=o),!it(o)||-1<i)return n}var ze={get composed(){return void 0===this.Z&&(Re?this.Z=Re(this):!1!==this.isTrusted&&(this.Z=Fe[this.type])),this.Z||!1},composedPath:function(){return this.wa||(this.wa=Ue(this.__target,this.composed)),this.wa},get target(){return Be(this.currentTarget,this.composedPath())},get relatedTarget(){return this.ka?(this.za||(this.za=Ue(this.ka,!0)),Be(this.currentTarget,this.za)):null},stopPropagation:function(){Event.prototype.stopPropagation.call(this),this.ja=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this),this.ja=this.Ia=!0}};function qe(t){function e(e,n){return(e=new t(e,n)).Z=n&&!!n.composed,e}return function(t,e){for(var n in e)t[n]=e[n]}(e,t),e.prototype=t.prototype,e}var Ve={focus:!0,blur:!0};function We(t){return t.__target!==t.target||t.ka!==t.relatedTarget}function Ge(t,e,n){if(n=e.__handlers&&e.__handlers[t.type]&&e.__handlers[t.type][n])for(var r,o=0;(r=n[o])&&(!We(t)||t.target!==t.relatedTarget)&&(r.call(e,t),!t.Ia);o++);}function $e(t){var e,n=t.composedPath();Object.defineProperty(t,"currentTarget",{get:function(){return o},configurable:!0});for(var r=n.length-1;0<=r;r--){var o=n[r];if(Ge(t,o,"capture"),t.ja)return}for(Object.defineProperty(t,"eventPhase",{get:function(){return Event.AT_TARGET}}),r=0;r<n.length;r++){var i=Q(o=n[r]);if(i=i&&i.root,(0===r||i&&i===e)&&(Ge(t,o,"bubble"),o!==window&&(e=o.getRootNode()),t.ja))break}}function Ye(t,e,n,r,o,i){for(var a=0;a<t.length;a++){var s=t[a],l=s.type,c=s.capture,u=s.once,h=s.passive;if(e===s.node&&n===l&&r===c&&o===u&&i===h)return a}return-1}function Je(t,e,n){if(e){var r=typeof e;if(("function"===r||"object"===r)&&("object"!==r||e.handleEvent&&"function"==typeof e.handleEvent)){var o=this instanceof Window?qt.lb:qt.addEventListener;if(He[t])return o.call(this,t,e,n);if(n&&"object"==typeof n)var i=!!n.capture,a=!!n.once,s=!!n.passive;else i=!!n,s=a=!1;var l=n&&n.ma||this,c=e[Ie];if(c){if(-1<Ye(c,l,t,i,a,s))return}else e[Ie]=[];c=function(o){if(a&&this.removeEventListener(t,e,n),o.__target||Ke(o),l!==this){var i=Object.getOwnPropertyDescriptor(o,"currentTarget");Object.defineProperty(o,"currentTarget",{get:function(){return l},configurable:!0})}if((!it(l)||-1!=o.composedPath().indexOf(l))&&(o.composed||-1<o.composedPath().indexOf(l)))if(We(o)&&o.target===o.relatedTarget)o.eventPhase===Event.BUBBLING_PHASE&&o.stopImmediatePropagation();else if(o.eventPhase===Event.CAPTURING_PHASE||o.bubbles||o.target===l||l instanceof Window){var s="function"===r?e.call(l,o):e.handleEvent&&e.handleEvent(o);return l!==this&&(i?(Object.defineProperty(o,"currentTarget",i),i=null):delete o.currentTarget),s}},e[Ie].push({node:l,type:t,capture:i,once:a,passive:s,nb:c}),Ve[t]?(this.__handlers=this.__handlers||{},this.__handlers[t]=this.__handlers[t]||{capture:[],bubble:[]},this.__handlers[t][i?"capture":"bubble"].push(c)):o.call(this,t,c,n)}}}function Xe(t,e,n){if(e){var r=this instanceof Window?qt.mb:qt.removeEventListener;if(He[t])return r.call(this,t,e,n);if(n&&"object"==typeof n)var o=!!n.capture,i=!!n.once,a=!!n.passive;else o=!!n,a=i=!1;var s=n&&n.ma||this,l=void 0,c=null;try{c=e[Ie]}catch(t){}c&&(-1<(i=Ye(c,s,t,o,i,a))&&(l=c.splice(i,1)[0].nb,c.length||(e[Ie]=void 0))),r.call(this,t,l||e,n),l&&Ve[t]&&this.__handlers&&this.__handlers[t]&&(-1<(l=(t=this.__handlers[t][o?"capture":"bubble"]).indexOf(l))&&t.splice(l,1))}}function Ke(t){if(t.__target=t.target,t.ka=t.relatedTarget,tt.K){var e=Object.getPrototypeOf(t);if(!e.hasOwnProperty("__patchProto")){var n=Object.create(e);n.pb=e,ct(n,ze),e.__patchProto=n}t.__proto__=e.__patchProto}else ct(t,ze)}var Ze=qe(window.Event),Qe=qe(window.CustomEvent),tn=qe(window.MouseEvent);function en(t,e){return{index:t,X:[],da:e}}function nn(t,e,n,r){var o=0,i=0,a=0,s=0,l=Math.min(e-o,r-i);if(0==o&&0==i)t:{for(a=0;a<l;a++)if(t[a]!==n[a])break t;a=l}if(e==t.length&&r==n.length){s=t.length;for(var c=n.length,u=0;u<l-a&&rn(t[--s],n[--c]);)u++;s=u}if(i+=a,r-=s,0==(e-=s)-(o+=a)&&0==r-i)return[];if(o==e){for(e=en(o,0);i<r;)e.X.push(n[i++]);return[e]}if(i==r)return[en(o,e-o)];for(r=r-(a=i)+1,s=e-(l=o)+1,e=Array(r),c=0;c<r;c++)e[c]=Array(s),e[c][0]=c;for(c=0;c<s;c++)e[0][c]=c;for(c=1;c<r;c++)for(u=1;u<s;u++)if(t[l+u-1]===n[a+c-1])e[c][u]=e[c-1][u-1];else{var h=e[c-1][u]+1,d=e[c][u-1]+1;e[c][u]=h<d?h:d}for(l=e.length-1,a=e[0].length-1,r=e[l][a],t=[];0<l||0<a;)0==l?(t.push(2),a--):0==a?(t.push(3),l--):(s=e[l-1][a-1],(h=(c=e[l-1][a])<(u=e[l][a-1])?c<s?c:s:u<s?u:s)==s?(s==r?t.push(0):(t.push(1),r=s),l--,a--):h==c?(t.push(3),l--,r=c):(t.push(2),a--,r=u));for(t.reverse(),e=void 0,l=[],a=0;a<t.length;a++)switch(t[a]){case 0:e&&(l.push(e),e=void 0),o++,i++;break;case 1:e||(e=en(o,0)),e.da++,o++,e.X.push(n[i]),i++;break;case 2:e||(e=en(o,0)),e.da++,o++;break;case 3:e||(e=en(o,0)),e.X.push(n[i]),i++}return e&&l.push(e),l}function rn(t,e){return t===e}var on,an=le.parentNode,sn=le.childNodes,ln={},cn=tt.deferConnectionCallbacks&&"loading"===document.readyState;function un(t){var e=[];do{e.unshift(t)}while(t=t.parentNode);return e}function hn(t,e,n){if(t!==ln)throw new TypeError("Illegal constructor");this.Qa="ShadyRoot",this.host=e,this.c=n&&n.mode,Te(e),(t=Z(e)).root=this,t.Fa="closed"!==this.c?this:null,(t=Z(this)).firstChild=t.lastChild=t.parentNode=t.nextSibling=t.previousSibling=null,t.childNodes=[],this.b=this.ca=!1,this.a=this.v=this.m=null,dn(this)}function dn(t){t.ca||(t.ca=!0,bt(function(){return pn(t)}))}function pn(t){for(var e;t;){t.ca&&(e=t);t:{var n=t;if(it(t=n.host.getRootNode()))for(var r=n.host.childNodes,o=0;o<r.length;o++)if("slot"==(n=r[o]).localName)break t;t=void 0}}e&&e._renderRoot()}function fn(t,e,n){var r=Z(e),o=r.ba;r.ba=null,n||(n=(t=t.v[e.slot||"__catchall"])&&t[0]),n?(Z(n).assignedNodes.push(e),r.assignedSlot=n):r.assignedSlot=void 0,o!==r.assignedSlot&&r.assignedSlot&&(Z(r.assignedSlot).fa=!0)}function mn(t,e,n){for(var r,o=0;o<n.length&&(r=n[o]);o++)if("slot"==r.localName){var i=Q(r).assignedNodes;i&&i.length&&mn(t,e,i)}else e.push(n[o])}function yn(t,e){qt.dispatchEvent.call(e,new Event("slotchange")),(e=Q(e)).assignedSlot&&yn(t,e.assignedSlot)}function gn(t){if(t.a&&t.a.length){for(var e,n=t.a,r=0;r<n.length;r++){var o=n[r];Te(o),Te(o.parentNode);var i=vn(o);t.v[i]?((e=e||{})[i]=!0,t.v[i].push(o)):t.v[i]=[o],t.m.push(o)}if(e)for(var a in e)t.v[a]=_n(t.v[a]);t.a=[]}}function vn(t){var e=t.name||t.getAttribute("name")||"__catchall";return t.Ma=e}function _n(t){return t.sort(function(t,e){t=un(t);for(var n=un(e),r=0;r<t.length;r++){e=t[r];var o=n[r];if(e!==o)return(t=Array.from(e.parentNode.childNodes)).indexOf(e)-t.indexOf(o)}})}function bn(t){return gn(t),!(!t.m||!t.m.length)}if(hn.prototype._renderRoot=function(){var t=cn;if(cn=!0,this.ca=!1,this.m){gn(this);for(var e,n=0;n<this.m.length;n++){var r=Q(e=this.m[n]),o=r.assignedNodes;if(r.assignedNodes=[],r.N=[],r.qa=o)for(r=0;r<o.length;r++){var i=Q(o[r]);i.ba=i.assignedSlot,i.assignedSlot===e&&(i.assignedSlot=null)}}for(e=this.host.firstChild;e;e=e.nextSibling)fn(this,e);for(n=0;n<this.m.length;n++){if(!(o=Q(e=this.m[n])).assignedNodes.length)for(r=e.firstChild;r;r=r.nextSibling)fn(this,r,e);if((r=(r=Q(e.parentNode))&&r.root)&&bn(r)&&r._renderRoot(),mn(this,o.N,o.assignedNodes),r=o.qa){for(i=0;i<r.length;i++)Q(r[i]).ba=null;o.qa=null,r.length>o.assignedNodes.length&&(o.fa=!0)}o.fa&&(o.fa=!1,yn(this,e))}for(n=this.m,e=[],o=0;o<n.length;o++)(i=Q(r=n[o].parentNode))&&i.root||!(0>e.indexOf(r))||e.push(r);for(n=0;n<e.length;n++){r=(o=e[n])===this?this.host:o,i=[],o=o.childNodes;for(var a=0;a<o.length;a++){var s=o[a];if("slot"==s.localName){s=Q(s).N;for(var l=0;l<s.length;l++)i.push(s[l])}else i.push(s)}o=void 0,a=sn(r),s=nn(i,i.length,a,a.length);for(var c=l=0;l<s.length&&(o=s[l]);l++){for(var u,h=0;h<o.X.length&&(u=o.X[h]);h++)an(u)===r&&qt.removeChild.call(r,u),a.splice(o.index+c,1);c-=o.da}for(c=0;c<s.length&&(o=s[c]);c++)for(l=a[o.index],h=o.index;h<o.index+o.da;h++)u=i[h],qt.insertBefore.call(r,u,l),a.splice(h,0,u)}}if(!this.b)for(e=0,n=(u=this.host.childNodes).length;e<n;e++)r=Q(o=u[e]),an(o)!==this.host||"slot"!==o.localName&&r.assignedSlot||qt.removeChild.call(this.host,o);this.b=!0,cn=t,on&&on()},window.customElements&&tt.ta){var wn=new Map;on=function(){var t=Array.from(wn);wn.clear();for(var e=(t=u(t)).next();!e.done;e=t.next()){var n=(e=u(e.value)).next().value;e.next().value?n.Ka():n.La()}},cn&&document.addEventListener("readystatechange",function(){cn=!1,on()},{once:!0});var En=window.customElements.define;Object.defineProperty(window.CustomElementRegistry.prototype,"define",{value:function(t,e){var n=e.prototype.connectedCallback,r=e.prototype.disconnectedCallback;En.call(window.customElements,t,function(t,e,n){var r=0,o="__isConnected"+r++;return(e||n)&&(t.prototype.connectedCallback=t.prototype.Ka=function(){cn?wn.set(this,!0):this[o]||(this[o]=!0,e&&e.call(this))},t.prototype.disconnectedCallback=t.prototype.La=function(){cn?this.isConnected||wn.set(this,!1):this[o]&&(this[o]=!1,n&&n.call(this))}),t}(e,n,r)),e.prototype.connectedCallback=n,e.prototype.disconnectedCallback=r}})}function Cn(t){var e=t.getRootNode();return it(e)&&pn(e),(t=Q(t))&&t.assignedSlot||null}var Nn={addEventListener:Je.bind(window),removeEventListener:Xe.bind(window)},Sn={addEventListener:Je,removeEventListener:Xe,appendChild:function(t){return Oe(this,t)},insertBefore:function(t,e){return Oe(this,t,e)},removeChild:function(t){return xe(this,t)},replaceChild:function(t,e){return Oe(this,t,e),xe(this,e),t},cloneNode:function(t){if("template"==this.localName)var e=qt.cloneNode.call(this,t);else if(e=qt.cloneNode.call(this,!1),t&&e.nodeType!==Node.ATTRIBUTE_NODE){t=this.childNodes;for(var n,r=0;r<t.length;r++)n=t[r].cloneNode(!0),e.appendChild(n)}return e},getRootNode:function(){return function t(e){if(e&&e.nodeType){var n=Z(e),r=n.W;return void 0===r&&(it(e)?(r=e,n.W=r):(r=(r=e.parentNode)?t(r):e,qt.contains.call(document.documentElement,e)&&(n.W=r))),r}}(this)},contains:function(t){return yt(this,t)},dispatchEvent:function(t){return wt(),qt.dispatchEvent.call(this,t)}};Object.defineProperties(Sn,{isConnected:{get:function(){if(pe&&pe.call(this))return!0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return!1;var t=this.ownerDocument;if(mt){if(qt.contains.call(t,this))return!0}else if(t.documentElement&&qt.contains.call(t.documentElement,this))return!0;for(t=this;t&&!(t instanceof Document);)t=t.parentNode||(it(t)?t.host:void 0);return!!(t&&t instanceof Document)},configurable:!0}});var Tn={get assignedSlot(){return Cn(this)}},Pn={querySelector:function(t){return Le(this,function(e){return lt.call(e,t)},function(t){return!!t})[0]||null},querySelectorAll:function(t,e){if(e){e=Array.prototype.slice.call(qt.querySelectorAll.call(this,t));var n=this.getRootNode();return e.filter(function(t){return t.getRootNode()==n})}return Le(this,function(e){return lt.call(e,t)})}},On={assignedNodes:function(t){if("slot"===this.localName){var e=this.getRootNode();return it(e)&&pn(e),(e=Q(this))&&(t&&t.flatten?e.N:e.assignedNodes)||[]}}},xn=ut({setAttribute:function(t,e){je(this,t,e)},removeAttribute:function(t){qt.removeAttribute.call(this,t),De(this,t)},attachShadow:function(t){if(!this)throw"Must provide a host.";if(!t)throw"Not enough arguments.";return new hn(ln,this,t)},get slot(){return this.getAttribute("slot")},set slot(t){je(this,"slot",t)},get assignedSlot(){return Cn(this)}},Pn,On);Object.defineProperties(xn,ve);var An=ut({importNode:function(t,e){return function t(e,n){if(e.ownerDocument!==document||"template"===e.localName)return qt.importNode.call(document,e,n);var r=qt.importNode.call(document,e,!1);if(n){e=e.childNodes,n=0;for(var o;n<e.length;n++)o=t(e[n],!0),r.appendChild(o)}return r}(t,e)},getElementById:function(t){return Le(this,function(e){return e.id==t},function(t){return!!t})[0]||null}},Pn);Object.defineProperties(An,{_activeElement:_e.activeElement});for(var Dn=HTMLElement.prototype.blur,Mn={blur:function(){var t=Q(this);(t=(t=t&&t.root)&&t.activeElement)?t.blur():Dn.call(this)}},Ln={},kn=u(Object.getOwnPropertyNames(Document.prototype)),jn=kn.next();!jn.done;Ln={H:Ln.H},jn=kn.next())Ln.H=jn.value,"on"===Ln.H.substring(0,2)&&Object.defineProperty(Mn,Ln.H,{set:function(t){return function(e){var n=Z(this),r=t.H.substring(2);n.$[t.H]&&this.removeEventListener(r,n.$[t.H]),this.addEventListener(r,e,{}),n.$[t.H]=e}}(Ln),get:function(t){return function(){var e=Q(this);return e&&e.$[t.H]}}(Ln),configurable:!0});var In={addEventListener:function(t,e,n){"object"!=typeof n&&(n={capture:!!n}),n.ma=this,this.host.addEventListener(t,e,n)},removeEventListener:function(t,e,n){"object"!=typeof n&&(n={capture:!!n}),n.ma=this,this.host.removeEventListener(t,e,n)},getElementById:function(t){return Le(this,function(e){return e.id==t},function(t){return!!t})[0]||null}};function Rn(t,e){for(var n=Object.getOwnPropertyNames(e),r=0;r<n.length;r++){var o=n[r],i=Object.getOwnPropertyDescriptor(e,o);i.value?t[o]=i.value:Object.defineProperty(t,o,i)}}if(tt.ta){var Fn={inUse:tt.ta,patch:function(t){return Ce(t),Ee(t),t},isShadyRoot:it,enqueue:bt,flush:wt,settings:tt,filterMutations:function(t,e){var n=e.getRootNode();return t.map(function(t){var e=n===t.target.getRootNode();if(e&&t.addedNodes){if((e=Array.from(t.addedNodes).filter(function(t){return n===t.getRootNode()})).length)return t=Object.create(t),Object.defineProperty(t,"addedNodes",{value:e,configurable:!0}),t}else if(e)return t}).filter(function(t){return t})},observeChildren:function(t,e){var n=Z(t);n.T||(n.T=new Et),n.T.ea.add(e);var r=n.T;return{Oa:e,P:r,Ra:t,takeRecords:function(){return r.takeRecords()}}},unobserveChildren:function(t){var e=t&&t.P;e&&(e.ea.delete(t.Oa),e.ea.size||(Z(t.Ra).T=null))},nativeMethods:qt,nativeTree:le,deferConnectionCallbacks:tt.deferConnectionCallbacks};window.ShadyDOM=Fn,function(){if(window.Event=Ze,window.CustomEvent=Qe,window.MouseEvent=tn,function(){for(var t in Ve)window.addEventListener(t,function(t){t.__target||(Ke(t),$e(t))},!0)}(),!Re&&Object.getOwnPropertyDescriptor(Event.prototype,"isTrusted")){var t=function(){var t=new MouseEvent("click",{bubbles:!0,cancelable:!0,composed:!0});this.dispatchEvent(t)};Element.prototype.click?Element.prototype.click=t:HTMLElement.prototype.click&&(HTMLElement.prototype.click=t)}}();var Hn=window.customElements&&window.customElements.nativeHTMLElement||HTMLElement;Rn(hn.prototype,In),Rn(window.Node.prototype,Sn),Rn(window.Window.prototype,Nn),Rn(window.Text.prototype,Tn),Rn(window.DocumentFragment.prototype,Pn),Rn(window.Element.prototype,xn),Rn(window.Document.prototype,An),window.HTMLSlotElement&&Rn(window.HTMLSlotElement.prototype,On),Rn(Hn.prototype,Mn),tt.K&&(we(window.Node.prototype),we(window.Text.prototype),we(window.DocumentFragment.prototype),we(window.Element.prototype),we(Hn.prototype),we(window.Document.prototype),window.HTMLSlotElement&&we(window.HTMLSlotElement.prototype)),function(){var t=hn.prototype;t.__proto__=DocumentFragment.prototype,be(t,me,!0),be(t,ge,!0),be(t,_e,!0),Object.defineProperties(t,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:"#document-fragment",configurable:!0},nodeValue:{value:null,configurable:!0}}),["localName","namespaceURI","prefix"].forEach(function(e){Object.defineProperty(t,e,{value:void 0,configurable:!0})}),["ownerDocument","baseURI","isConnected"].forEach(function(e){Object.defineProperty(t,e,{get:function(){return this.host[e]},configurable:!0})})}(),window.ShadowRoot=hn}var Un=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));function Bn(t){var e=Un.has(t);return t=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(t),!e&&t}function zn(t){var e=t.isConnected;if(void 0!==e)return e;for(;t&&!(t.__CE_isImportDocument||t instanceof Document);)t=t.parentNode||(window.ShadowRoot&&t instanceof ShadowRoot?t.host:void 0);return!(!t||!(t.__CE_isImportDocument||t instanceof Document))}function qn(t,e){for(;e&&e!==t&&!e.nextSibling;)e=e.parentNode;return e&&e!==t?e.nextSibling:null}function Vn(t,e,n){n=void 0===n?new Set:n;for(var r=t;r;){if(r.nodeType===Node.ELEMENT_NODE){var o=r;e(o);var i=o.localName;if("link"===i&&"import"===o.getAttribute("rel")){if((r=o.import)instanceof Node&&!n.has(r))for(n.add(r),r=r.firstChild;r;r=r.nextSibling)Vn(r,e,n);r=qn(t,o);continue}if("template"===i){r=qn(t,o);continue}if(o=o.__CE_shadowRoot)for(o=o.firstChild;o;o=o.nextSibling)Vn(o,e,n)}r=r.firstChild?r.firstChild:qn(t,r)}}function Wn(t,e,n){t[e]=n}function Gn(){this.a=new Map,this.B=new Map,this.f=[],this.c=!1}function $n(t,e){t.c=!0,t.f.push(e)}function Yn(t,e){t.c&&Vn(e,function(e){return t.b(e)})}function Jn(t,e){var n=[];for(Vn(e,function(t){return n.push(t)}),e=0;e<n.length;e++){var r=n[e];1===r.__CE_state?t.connectedCallback(r):Zn(t,r)}}function Xn(t,e){var n=[];for(Vn(e,function(t){return n.push(t)}),e=0;e<n.length;e++){var r=n[e];1===r.__CE_state&&t.disconnectedCallback(r)}}function Kn(t,e,n){var r=(n=void 0===n?{}:n).jb||new Set,o=n.ia||function(e){return Zn(t,e)},i=[];if(Vn(e,function(e){if("link"===e.localName&&"import"===e.getAttribute("rel")){var n=e.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_hasRegistry=!0),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:e.addEventListener("load",function(){var n=e.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var i=new Set(r);i.delete(n),Kn(t,n,{jb:i,ia:o})}})}else i.push(e)},r),t.c)for(e=0;e<i.length;e++)t.b(i[e]);for(e=0;e<i.length;e++)o(i[e])}function Zn(t,e){if(void 0===e.__CE_state){var n=e.ownerDocument;if((n.defaultView||n.__CE_isImportDocument&&n.__CE_hasRegistry)&&(n=t.a.get(e.localName))){n.constructionStack.push(e);var r=n.constructor;try{try{if(new r!==e)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{n.constructionStack.pop()}}catch(t){throw e.__CE_state=2,t}if(e.__CE_state=1,e.__CE_definition=n,n.attributeChangedCallback)for(n=n.observedAttributes,r=0;r<n.length;r++){var o=n[r],i=e.getAttribute(o);null!==i&&t.attributeChangedCallback(e,o,null,i,null)}zn(e)&&t.connectedCallback(e)}}}function Qn(t){var e=document;this.w=t,this.a=e,this.P=void 0,Kn(this.w,this.a),"loading"===this.a.readyState&&(this.P=new MutationObserver(this.b.bind(this)),this.P.observe(this.a,{childList:!0,subtree:!0}))}function tr(t){t.P&&t.P.disconnect()}function er(){var t=this;this.a=this.A=void 0,this.b=new Promise(function(e){t.a=e,t.A&&e(t.A)})}function nr(t){this.na=!1,this.w=t,this.sa=new Map,this.oa=function(t){return t()},this.aa=!1,this.pa=[],this.Pa=new Qn(t)}Gn.prototype.b=function(t){if(this.c&&!t.__CE_patched){t.__CE_patched=!0;for(var e=0;e<this.f.length;e++)this.f[e](t)}},Gn.prototype.connectedCallback=function(t){var e=t.__CE_definition;e.connectedCallback&&e.connectedCallback.call(t)},Gn.prototype.disconnectedCallback=function(t){var e=t.__CE_definition;e.disconnectedCallback&&e.disconnectedCallback.call(t)},Gn.prototype.attributeChangedCallback=function(t,e,n,r,o){var i=t.__CE_definition;i.attributeChangedCallback&&-1<i.observedAttributes.indexOf(e)&&i.attributeChangedCallback.call(t,e,n,r,o)},Qn.prototype.b=function(t){var e=this.a.readyState;for("interactive"!==e&&"complete"!==e||tr(this),e=0;e<t.length;e++)for(var n=t[e].addedNodes,r=0;r<n.length;r++)Kn(this.w,n[r])},er.prototype.resolve=function(t){if(this.A)throw Error("Already resolved.");this.A=t,this.a&&this.a(t)},(n=nr.prototype).define=function(t,e){var n=this;if(!(e instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!Bn(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(this.w.a.get(t))throw Error("A custom element with name '"+t+"' has already been defined.");if(this.na)throw Error("A custom element is already being defined.");this.na=!0;try{var r=function(t){var e=o[t];if(void 0!==e&&!(e instanceof Function))throw Error("The '"+t+"' callback must be a function.");return e},o=e.prototype;if(!(o instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var i=r("connectedCallback"),a=r("disconnectedCallback"),s=r("adoptedCallback"),l=r("attributeChangedCallback"),c=e.observedAttributes||[]}catch(t){return}finally{this.na=!1}e={localName:t,constructor:e,connectedCallback:i,disconnectedCallback:a,adoptedCallback:s,attributeChangedCallback:l,observedAttributes:c,constructionStack:[]},function(t,e,n){t.a.set(e,n),t.B.set(n.constructor,n)}(this.w,t,e),this.pa.push(e),this.aa||(this.aa=!0,this.oa(function(){return function(t){if(!1!==t.aa){t.aa=!1;for(var e=t.pa,n=[],r=new Map,o=0;o<e.length;o++)r.set(e[o].localName,[]);for(Kn(t.w,document,{ia:function(e){if(void 0===e.__CE_state){var o=e.localName,i=r.get(o);i?i.push(e):t.w.a.get(o)&&n.push(e)}}}),o=0;o<n.length;o++)Zn(t.w,n[o]);for(;0<e.length;){var i=e.shift();o=i.localName,i=r.get(i.localName);for(var a=0;a<i.length;a++)Zn(t.w,i[a]);(o=t.sa.get(o))&&o.resolve(void 0)}}}(n)}))},n.ia=function(t){Kn(this.w,t)},n.get=function(t){if(t=this.w.a.get(t))return t.constructor},n.whenDefined=function(t){if(!Bn(t))return Promise.reject(new SyntaxError("'"+t+"' is not a valid custom element name."));var e=this.sa.get(t);return e?e.b:(e=new er,this.sa.set(t,e),this.w.a.get(t)&&!this.pa.some(function(e){return e.localName===t})&&e.resolve(void 0),e.b)},n.eb=function(t){tr(this.Pa);var e=this.oa;this.oa=function(n){return t(function(){return e(n)})}},window.CustomElementRegistry=nr,nr.prototype.define=nr.prototype.define,nr.prototype.upgrade=nr.prototype.ia,nr.prototype.get=nr.prototype.get,nr.prototype.whenDefined=nr.prototype.whenDefined,nr.prototype.polyfillWrapFlushCallback=nr.prototype.eb;var rr=window.Document.prototype.createElement,or=window.Document.prototype.createElementNS,ir=window.Document.prototype.importNode,ar=window.Document.prototype.prepend,sr=window.Document.prototype.append,lr=window.DocumentFragment.prototype.prepend,cr=window.DocumentFragment.prototype.append,ur=window.Node.prototype.cloneNode,hr=window.Node.prototype.appendChild,dr=window.Node.prototype.insertBefore,pr=window.Node.prototype.removeChild,fr=window.Node.prototype.replaceChild,mr=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),yr=window.Element.prototype.attachShadow,gr=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),vr=window.Element.prototype.getAttribute,_r=window.Element.prototype.setAttribute,br=window.Element.prototype.removeAttribute,wr=window.Element.prototype.getAttributeNS,Er=window.Element.prototype.setAttributeNS,Cr=window.Element.prototype.removeAttributeNS,Nr=window.Element.prototype.insertAdjacentElement,Sr=window.Element.prototype.insertAdjacentHTML,Tr=window.Element.prototype.prepend,Pr=window.Element.prototype.append,Or=window.Element.prototype.before,xr=window.Element.prototype.after,Ar=window.Element.prototype.replaceWith,Dr=window.Element.prototype.remove,Mr=window.HTMLElement,Lr=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),kr=window.HTMLElement.prototype.insertAdjacentElement,jr=window.HTMLElement.prototype.insertAdjacentHTML,Ir=new function(){};function Rr(t,e,n){function r(e){return function(n){for(var r=[],o=0;o<arguments.length;++o)r[o]=arguments[o];o=[];for(var i=[],a=0;a<r.length;a++){var s=r[a];if(s instanceof Element&&zn(s)&&i.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)o.push(s);else o.push(s)}for(e.apply(this,r),r=0;r<i.length;r++)Xn(t,i[r]);if(zn(this))for(r=0;r<o.length;r++)(i=o[r])instanceof Element&&Jn(t,i)}}void 0!==n.ha&&(e.prepend=r(n.ha)),void 0!==n.append&&(e.append=r(n.append))}var Fr=window.customElements;if(!Fr||Fr.forcePolyfill||"function"!=typeof Fr.define||"function"!=typeof Fr.get){var Hr=new Gn;!function(){var t=Hr;window.HTMLElement=function(){function e(){var e=this.constructor,n=t.B.get(e);if(!n)throw Error("The custom element being constructed was not registered with `customElements`.");var r=n.constructionStack;if(0===r.length)return r=rr.call(document,n.localName),Object.setPrototypeOf(r,e.prototype),r.__CE_state=1,r.__CE_definition=n,t.b(r),r;var o=r[n=r.length-1];if(o===Ir)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");return r[n]=Ir,Object.setPrototypeOf(o,e.prototype),t.b(o),o}return e.prototype=Mr.prototype,Object.defineProperty(e.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:e}),e}()}(),function(){var t=Hr;Wn(Document.prototype,"createElement",function(e){if(this.__CE_hasRegistry){var n=t.a.get(e);if(n)return new n.constructor}return e=rr.call(this,e),t.b(e),e}),Wn(Document.prototype,"importNode",function(e,n){return e=ir.call(this,e,n),this.__CE_hasRegistry?Kn(t,e):Yn(t,e),e}),Wn(Document.prototype,"createElementNS",function(e,n){if(this.__CE_hasRegistry&&(null===e||"http://www.w3.org/1999/xhtml"===e)){var r=t.a.get(n);if(r)return new r.constructor}return e=or.call(this,e,n),t.b(e),e}),Rr(t,Document.prototype,{ha:ar,append:sr})}(),Rr(Hr,DocumentFragment.prototype,{ha:lr,append:cr}),function(){function t(t,n){Object.defineProperty(t,"textContent",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(t){if(this.nodeType===Node.TEXT_NODE)n.set.call(this,t);else{var r=void 0;if(this.firstChild){var o=this.childNodes,i=o.length;if(0<i&&zn(this)){r=Array(i);for(var a=0;a<i;a++)r[a]=o[a]}}if(n.set.call(this,t),r)for(t=0;t<r.length;t++)Xn(e,r[t])}}})}var e=Hr;Wn(Node.prototype,"insertBefore",function(t,n){if(t instanceof DocumentFragment){var r=Array.prototype.slice.apply(t.childNodes);if(t=dr.call(this,t,n),zn(this))for(n=0;n<r.length;n++)Jn(e,r[n]);return t}return r=zn(t),n=dr.call(this,t,n),r&&Xn(e,t),zn(this)&&Jn(e,t),n}),Wn(Node.prototype,"appendChild",function(t){if(t instanceof DocumentFragment){var n=Array.prototype.slice.apply(t.childNodes);if(t=hr.call(this,t),zn(this))for(var r=0;r<n.length;r++)Jn(e,n[r]);return t}return n=zn(t),r=hr.call(this,t),n&&Xn(e,t),zn(this)&&Jn(e,t),r}),Wn(Node.prototype,"cloneNode",function(t){return t=ur.call(this,t),this.ownerDocument.__CE_hasRegistry?Kn(e,t):Yn(e,t),t}),Wn(Node.prototype,"removeChild",function(t){var n=zn(t),r=pr.call(this,t);return n&&Xn(e,t),r}),Wn(Node.prototype,"replaceChild",function(t,n){if(t instanceof DocumentFragment){var r=Array.prototype.slice.apply(t.childNodes);if(t=fr.call(this,t,n),zn(this))for(Xn(e,n),n=0;n<r.length;n++)Jn(e,r[n]);return t}r=zn(t);var o=fr.call(this,t,n),i=zn(this);return i&&Xn(e,n),r&&Xn(e,t),i&&Jn(e,t),o}),mr&&mr.get?t(Node.prototype,mr):$n(e,function(e){t(e,{enumerable:!0,configurable:!0,get:function(){for(var t=[],e=0;e<this.childNodes.length;e++)t.push(this.childNodes[e].textContent);return t.join("")},set:function(t){for(;this.firstChild;)pr.call(this,this.firstChild);hr.call(this,document.createTextNode(t))}})})}(),function(){function t(t,e){Object.defineProperty(t,"innerHTML",{enumerable:e.enumerable,configurable:!0,get:e.get,set:function(t){var n=this,o=void 0;if(zn(this)&&(o=[],Vn(this,function(t){t!==n&&o.push(t)})),e.set.call(this,t),o)for(var i=0;i<o.length;i++){var a=o[i];1===a.__CE_state&&r.disconnectedCallback(a)}return this.ownerDocument.__CE_hasRegistry?Kn(r,this):Yn(r,this),t}})}function e(t,e){Wn(t,"insertAdjacentElement",function(t,n){var o=zn(n);return t=e.call(this,t,n),o&&Xn(r,n),zn(t)&&Jn(r,n),t})}function n(t,e){function n(t,e){for(var n=[];t!==e;t=t.nextSibling)n.push(t);for(e=0;e<n.length;e++)Kn(r,n[e])}Wn(t,"insertAdjacentHTML",function(t,r){if("beforebegin"===(t=t.toLowerCase())){var o=this.previousSibling;e.call(this,t,r),n(o||this.parentNode.firstChild,this)}else if("afterbegin"===t)o=this.firstChild,e.call(this,t,r),n(this.firstChild,o);else if("beforeend"===t)o=this.lastChild,e.call(this,t,r),n(o||this.firstChild,null);else{if("afterend"!==t)throw new SyntaxError("The value provided ("+String(t)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");o=this.nextSibling,e.call(this,t,r),n(this.nextSibling,o)}})}var r=Hr;yr&&Wn(Element.prototype,"attachShadow",function(t){return this.__CE_shadowRoot=yr.call(this,t)}),gr&&gr.get?t(Element.prototype,gr):Lr&&Lr.get?t(HTMLElement.prototype,Lr):$n(r,function(e){t(e,{enumerable:!0,configurable:!0,get:function(){return ur.call(this,!0).innerHTML},set:function(t){var e="template"===this.localName,n=e?this.content:this,r=or.call(document,this.namespaceURI,this.localName);for(r.innerHTML=t;0<n.childNodes.length;)pr.call(n,n.childNodes[0]);for(t=e?r.content:r;0<t.childNodes.length;)hr.call(n,t.childNodes[0])}})}),Wn(Element.prototype,"setAttribute",function(t,e){if(1!==this.__CE_state)return _r.call(this,t,e);var n=vr.call(this,t);_r.call(this,t,e),e=vr.call(this,t),r.attributeChangedCallback(this,t,n,e,null)}),Wn(Element.prototype,"setAttributeNS",function(t,e,n){if(1!==this.__CE_state)return Er.call(this,t,e,n);var o=wr.call(this,t,e);Er.call(this,t,e,n),n=wr.call(this,t,e),r.attributeChangedCallback(this,e,o,n,t)}),Wn(Element.prototype,"removeAttribute",function(t){if(1!==this.__CE_state)return br.call(this,t);var e=vr.call(this,t);br.call(this,t),null!==e&&r.attributeChangedCallback(this,t,e,null,null)}),Wn(Element.prototype,"removeAttributeNS",function(t,e){if(1!==this.__CE_state)return Cr.call(this,t,e);var n=wr.call(this,t,e);Cr.call(this,t,e);var o=wr.call(this,t,e);n!==o&&r.attributeChangedCallback(this,e,n,o,t)}),kr?e(HTMLElement.prototype,kr):Nr?e(Element.prototype,Nr):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched."),jr?n(HTMLElement.prototype,jr):Sr?n(Element.prototype,Sr):console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched."),Rr(r,Element.prototype,{ha:Tr,append:Pr}),function(t){function e(e){return function(n){for(var r=[],o=0;o<arguments.length;++o)r[o]=arguments[o];o=[];for(var i=[],a=0;a<r.length;a++){var s=r[a];if(s instanceof Element&&zn(s)&&i.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)o.push(s);else o.push(s)}for(e.apply(this,r),r=0;r<i.length;r++)Xn(t,i[r]);if(zn(this))for(r=0;r<o.length;r++)(i=o[r])instanceof Element&&Jn(t,i)}}var n=Element.prototype;void 0!==Or&&(n.before=e(Or)),void 0!==Or&&(n.after=e(xr)),void 0!==Ar&&Wn(n,"replaceWith",function(e){for(var n=[],r=0;r<arguments.length;++r)n[r]=arguments[r];r=[];for(var o=[],i=0;i<n.length;i++){var a=n[i];if(a instanceof Element&&zn(a)&&o.push(a),a instanceof DocumentFragment)for(a=a.firstChild;a;a=a.nextSibling)r.push(a);else r.push(a)}for(i=zn(this),Ar.apply(this,n),n=0;n<o.length;n++)Xn(t,o[n]);if(i)for(Xn(t,this),n=0;n<r.length;n++)(o=r[n])instanceof Element&&Jn(t,o)}),void 0!==Dr&&Wn(n,"remove",function(){var e=zn(this);Dr.call(this),e&&Xn(t,this)})}(r)}(),document.__CE_hasRegistry=!0;var Ur=new nr(Hr);Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:Ur})}function Br(){this.end=this.start=0,this.rules=this.parent=this.previous=null,this.cssText=this.parsedCssText="",this.atRule=!1,this.type=0,this.parsedSelector=this.selector=this.keyframesName=""}function zr(t){var e=qr,n=t=t.replace(Jr,"").replace(Xr,""),r=new Br;r.start=0,r.end=n.length;for(var o=r,i=0,a=n.length;i<a;i++)if("{"===n[i]){o.rules||(o.rules=[]);var s=o,l=s.rules[s.rules.length-1]||null;(o=new Br).start=i+1,o.parent=s,o.previous=l,s.rules.push(o)}else"}"===n[i]&&(o.end=i+1,o=o.parent||r);return e(r,t)}function qr(t,e){var n=e.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=n.trim(),t.parent&&(n=(n=(n=function(t){return t.replace(/\\([0-9a-f]{1,6})\s/gi,function(t,e){for(e=6-(t=e).length;e--;)t="0"+t;return"\\"+t})}(n=e.substring(t.previous?t.previous.end:t.parent.start,t.start-1))).replace(no," ")).substring(n.lastIndexOf(";")+1),n=t.parsedSelector=t.selector=n.trim(),t.atRule=0===n.indexOf("@"),t.atRule?0===n.indexOf("@media")?t.type=$r:n.match(eo)&&(t.type=Gr,t.keyframesName=t.selector.split(no).pop()):t.type=0===n.indexOf("--")?Yr:Wr),n=t.rules)for(var r,o=0,i=n.length;o<i&&(r=n[o]);o++)qr(r,e);return t}var Vr,Wr=1,Gr=7,$r=4,Yr=1e3,Jr=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,Xr=/@import[^;]*;/gim,Kr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,Zr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,Qr=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,to=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,eo=/^@[^\s]*keyframes/,no=/\s+/g,ro=!(window.ShadyDOM&&window.ShadyDOM.inUse);function oo(t){Vr=(!t||!t.shimcssproperties)&&(ro||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Vr=window.ShadyCSS.nativeCss:window.ShadyCSS?(oo(window.ShadyCSS),window.ShadyCSS=void 0):oo(window.WebComponents&&window.WebComponents.flags);var io=Vr,ao=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,so=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,lo=/(--[\w-]+)\s*([:,;)]|$)/gi,co=/(animation\s*:)|(animation-name\s*:)/,uo=/@media\s(.*)/,ho=/\{[^}]*\}/g,po=new Set;function fo(t,e){return t?("string"==typeof t&&(t=zr(t)),e&&go(t,e),function t(e,n,r){r=void 0===r?"":r;var o="";if(e.cssText||e.rules){var i,a=e.rules;if((i=a)&&(i=!((i=a[0])&&i.selector&&0===i.selector.indexOf("--"))),i){i=0;for(var s,l=a.length;i<l&&(s=a[i]);i++)o=t(s,n,o)}else n=n?e.cssText:(n=(n=e.cssText).replace(Kr,"").replace(Zr,"")).replace(Qr,"").replace(to,""),(o=n.trim())&&(o="  "+o+"\n")}return o&&(e.selector&&(r+=e.selector+" {\n"),r+=o,e.selector&&(r+="}\n\n")),r}(t,io)):""}function mo(t){return!t.__cssRules&&t.textContent&&(t.__cssRules=zr(t.textContent)),t.__cssRules||null}function yo(t){return!!t.parent&&t.parent.type===Gr}function go(t,e,n,r){if(t){var o=!1,i=t.type;if(r&&i===$r){var a=t.selector.match(uo);a&&(window.matchMedia(a[1]).matches||(o=!0))}if(i===Wr?e(t):n&&i===Gr?n(t):i===Yr&&(o=!0),(t=t.rules)&&!o){o=0,i=t.length;for(var s;o<i&&(s=t[o]);o++)go(s,e,n,r)}}}function vo(t,e,n,r){var o=document.createElement("style");return e&&o.setAttribute("scope",e),o.textContent=t,bo(o,n,r),o}var _o=null;function bo(t,e,n){(e=e||document.head).insertBefore(t,n&&n.nextSibling||e.firstChild),_o?t.compareDocumentPosition(_o)===Node.DOCUMENT_POSITION_PRECEDING&&(_o=t):_o=t}function wo(t,e){ro?t.setAttribute("class",e):window.ShadyDOM.nativeMethods.setAttribute.call(t,"class",e)}function Eo(t){var e=t.localName,n="";return e?-1<e.indexOf("-")||(n=e,e=t.getAttribute&&t.getAttribute("is")||""):(e=t.is,n=t.extends),{is:e,Y:n}}function Co(){}function No(t,e,n){var r=Yo;t.__styleScoped?t.__styleScoped=null:function t(e,n,r,o){n.nodeType===Node.ELEMENT_NODE&&So(n,r,o);if(n="template"===n.localName?(n.content||n.qb||n).childNodes:n.children||n.childNodes)for(var i=0;i<n.length;i++)t(e,n[i],r,o)}(r,t,e||"",n)}function So(t,e,n){if(e)if(t.classList)n?(t.classList.remove("style-scope"),t.classList.remove(e)):(t.classList.add("style-scope"),t.classList.add(e));else if(t.getAttribute){var r=t.getAttribute(Go);n?r&&wo(t,e=r.replace("style-scope","").replace(e,"")):wo(t,(r?r+" ":"")+"style-scope "+e)}}function To(t,e,n){var r=Yo,o=t.__cssBuild;return ro||"shady"===o?e=fo(e,n):e=function(t,e,n,r,o){var i=Po(n,r);return n=n?Vo+n:"",fo(e,function(e){e.c||(e.selector=e.G=Oo(t,e,t.b,n,i),e.c=!0),o&&o(e,n,i)})}(r,e,(t=Eo(t)).is,t.Y,n)+"\n\n",e.trim()}function Po(t,e){return e?"[is="+t+"]":t}function Oo(t,e,n,r,o){var i=e.selector.split(ko);if(!yo(e)){e=0;for(var a,s=i.length;e<s&&(a=i[e]);e++)i[e]=n.call(t,a,r,o)}return i.join(ko)}function xo(t){return t.replace(Mo,function(t,e,n){return-1<n.indexOf("+")?n=n.replace(/\+/g,"___"):-1<n.indexOf("___")&&(n=n.replace(/___/g,"+")),":"+e+"("+n+")"})}function Ao(t,e){return(t=t.split(Wo))[0]+=e,t.join(Wo)}function Do(t){t.selector===Fo&&(t.selector="html")}Co.prototype.b=function(t,e,n){var r=!1;t=t.trim();var o=Mo.test(t);return o&&(t=xo(t=t.replace(Mo,function(t,e,n){return":"+e+"("+n.replace(/\s/g,"")+")"}))),t=(t=t.replace(Uo,Ro+" $1")).replace(jo,function(t,o,i){return r||(t=function(t,e,n,r){var o=t.indexOf(Ho);if(0<=t.indexOf(Ro)?t=function(t,e){var n=t.match(Bo);return(n=n&&n[2].trim()||"")?n[0].match(Io)?t.replace(Bo,function(t,n,r){return e+r}):n.split(Io)[0]===e?n:$o:t.replace(Ro,e)}(t,r):0!==o&&(t=n?Ao(t,n):t),n=!1,0<=o&&(e="",n=!0),n){var i=!0;n&&(t=t.replace(zo,function(t,e){return" > "+e}))}return{value:t=t.replace(qo,function(t,e,n){return'[dir="'+n+'"] '+e+", "+e+'[dir="'+n+'"]'}),Va:e,stop:i}}(i,o,e,n),r=r||t.stop,o=t.Va,i=t.value),o+i}),o&&(t=xo(t)),t},Co.prototype.c=function(t){return t.match(Ho)?this.b(t,Lo):Ao(t.trim(),Lo)},o.Object.defineProperties(Co.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"style-scope"}}});var Mo=/:(nth[-\w]+)\(([^)]+)\)/,Lo=":not(.style-scope)",ko=",",jo=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,Io=/[[.:#*]/,Ro=":host",Fo=":root",Ho="::slotted",Uo=new RegExp("^("+Ho+")"),Bo=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,zo=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,qo=/(.*):dir\((?:(ltr|rtl))\)/,Vo=".",Wo=":",Go="class",$o="should_not_match",Yo=new Co;function Jo(t,e,n,r){this.M=t||null,this.b=e||null,this.ua=n||[],this.U=null,this.Y=r||"",this.a=this.I=this.O=null}function Xo(t){return t?t.__styleInfo:null}function Ko(t,e){return t.__styleInfo=e}function Zo(t){var e=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return e&&e.call(this,t)}Jo.prototype.c=function(){return this.M},Jo.prototype._getStyleRules=Jo.prototype.c;var Qo=navigator.userAgent.match("Trident");function ti(){}function ei(t){if(!t.C){var e={},n={};ni(t,n)&&(e.L=n,t.rules=null),e.cssText=t.parsedCssText.replace(ho,"").replace(ao,""),t.C=e}}function ni(t,e){var n=t.C;if(!n){n=t.parsedCssText;for(var r;t=ao.exec(n);)"inherit"===(r=(t[2]||t[3]).trim())&&"unset"===r||(e[t[1].trim()]=r),r=!0;return r}if(n.L)return Object.assign(e,n.L),!0}function ri(t,e,n){return e&&(e=0<=e.indexOf(";")?oi(t,e,n):function t(e,n){var r=e.indexOf("var(");if(-1===r)return n(e,"","","");t:{for(var o=0,i=r+3,a=e.length;i<a;i++)if("("===e[i])o++;else if(")"===e[i]&&0==--o)break t;i=-1}return o=e.substring(r+4,i),r=e.substring(0,r),e=t(e.substring(i+1),n),-1===(i=o.indexOf(","))?n(r,o.trim(),"",e):n(r,o.substring(0,i).trim(),o.substring(i+1).trim(),e)}(e,function(e,r,o,i){return r?((r=ri(t,n[r],n))&&"initial"!==r?"apply-shim-inherit"===r&&(r="inherit"):r=ri(t,n[o]||o,n)||o,e+(r||"")+i):e+i})),e&&e.trim()||""}function oi(t,e,n){e=e.split(";");for(var r,o,i=0;i<e.length;i++)if(r=e[i]){if(so.lastIndex=0,o=so.exec(r))r=ri(t,n[o[1]],n);else if(-1!==(o=r.indexOf(":"))){var a=r.substring(o);a=ri(t,a=a.trim(),n)||a,r=r.substring(0,o)+a}e[i]=r&&r.lastIndexOf(";")===r.length-1?r.slice(0,-1):r||""}return e.join(";")}function ii(t,e){var n={},r={},o=e&&e.__cssBuild;return go(e,function(e){!function(t,e,n,r){if(e.C||ei(e),e.C.L){var o=Eo(t);t=o.is,o=o.Y,o=t?Po(t,o):"html";var i=e.parsedSelector,a=":host > *"===i||"html"===i,s=0===i.indexOf(":host")&&!a;"shady"===n&&(s=!(a=i===o+" > *."+o||-1!==i.indexOf("html"))&&0===i.indexOf(o)),"shadow"===n&&(a=":host > *"===i||"html"===i,s=s&&!a),(a||s)&&(n=o,s&&(e.G||(e.G=Oo(Yo,e,Yo.b,t?Vo+t:"",o)),n=e.G||o),r({gb:n,ab:s,Db:a}))}}(t,e,o,function(o){Zo.call(t.rb||t,o.gb)&&(o.ab?ni(e,n):ni(e,r))})},null,!0),{fb:r,Za:n}}function ai(t,e,n,r){var o=Eo(e),i=Po(o.is,o.Y),a=new RegExp("(?:^|[^.#[:])"+(e.extends?"\\"+i.slice(0,-1)+"\\]":i)+"($|[.:[\\s>+~])"),s=function(t,e){t=t.b;var n={};if(!ro&&t)for(var r=0,o=t[r];r<t.length;o=t[++r]){var i=o,a=e;i.f=new RegExp("\\b"+i.keyframesName+"(?!\\B|-)","g"),i.a=i.keyframesName+"-"+a,i.G=i.G||i.selector,i.selector=i.G.replace(i.keyframesName,i.a),n[o.keyframesName]=si(o)}return n}(o=Xo(e).M,r);return To(e,o,function(e){var o="";if(e.C||ei(e),e.C.cssText&&(o=oi(t,e.C.cssText,n)),e.cssText=o,!ro&&!yo(e)&&e.cssText){var l=o=e.cssText;if(null==e.Ca&&(e.Ca=co.test(o)),e.Ca)if(null==e.ga)for(var c in e.ga=[],s)o!==(l=(l=s[c])(o))&&(o=l,e.ga.push(c));else{for(c=0;c<e.ga.length;++c)o=(l=s[e.ga[c]])(o);l=o}e.cssText=l,e.G=e.G||e.selector,o="."+r,l=0;for(var u,h=(c=e.G.split(",")).length;l<h&&(u=c[l]);l++)c[l]=u.match(a)?u.replace(i,o):o+" "+u;e.selector=c.join(",")}})}function si(t){return function(e){return e.replace(t.f,t.a)}}function li(t,e){var n=ci,r=mo(t);t.textContent=fo(r,function(t){var r=t.cssText=t.parsedCssText;t.C&&t.C.cssText&&(r=r.replace(Kr,"").replace(Zr,""),t.cssText=oi(n,r,e))})}o.Object.defineProperties(ti.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"x-scope"}}});var ci=new ti,ui={},hi=window.customElements;if(hi&&!ro){var di=hi.define;hi.define=function(t,e,n){var r=document.createComment(" Shady DOM styles for "+t+" "),o=document.head;o.insertBefore(r,(_o?_o.nextSibling:null)||o.firstChild),_o=r,ui[t]=r,di.call(hi,t,e,n)}}function pi(){this.cache={}}function fi(){}function mi(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.target!==document.documentElement&&n.target!==document.head)for(var r=0;r<n.addedNodes.length;r++){var o=n.addedNodes[r];if(o.nodeType===Node.ELEMENT_NODE){var i=o.getRootNode(),a=o,s=[];if(a.classList?s=Array.from(a.classList):a instanceof window.SVGElement&&a.hasAttribute("class")&&(s=a.getAttribute("class").split(/\s+/)),(a=-1<(s=(a=s).indexOf(Yo.a))?a[s+1]:"")&&i===o.ownerDocument)No(o,a,!0);else if(i.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&(i=i.host))if(a===(i=Eo(i).is))for(o=window.ShadyDOM.nativeMethods.querySelectorAll.call(o,":not(."+Yo.a+")"),i=0;i<o.length;i++)So(o[i],a);else a&&No(o,a,!0),No(o,i)}}}}if(pi.prototype.store=function(t,e,n,r){var o=this.cache[t]||[];o.push({L:e,styleElement:n,I:r}),100<o.length&&o.shift(),this.cache[t]=o},pi.prototype.fetch=function(t,e,n){if(t=this.cache[t])for(var r=t.length-1;0<=r;r--){var o,i=t[r];t:{for(o=0;o<n.length;o++){var a=n[o];if(i.L[a]!==e[a]){o=!1;break t}}o=!0}if(o)return i}},!ro){var yi=new MutationObserver(mi),gi=function(t){yi.observe(t,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)gi(document);else{var vi=function(){gi(document.body)};window.HTMLImports?window.HTMLImports.whenReady(vi):requestAnimationFrame(function(){if("loading"===document.readyState){var t=function(){vi(),document.removeEventListener("readystatechange",t)};document.addEventListener("readystatechange",t)}else vi()})}fi=function(){mi(yi.takeRecords())}}var _i=fi,bi={},wi=Promise.resolve();function Ei(t){(t=bi[t])&&(t._applyShimCurrentVersion=t._applyShimCurrentVersion||0,t._applyShimValidatingVersion=t._applyShimValidatingVersion||0,t._applyShimNextVersion=(t._applyShimNextVersion||0)+1)}function Ci(t){return t._applyShimCurrentVersion===t._applyShimNextVersion}var Ni=new pi;function Si(){this.S={},this.c=document.documentElement;var t=new Br;t.rules=[],this.f=Ko(this.c,new Jo(t)),this.B=!1,this.b=this.a=null}function Ti(t){!t.a&&window.ShadyCSS&&window.ShadyCSS.ApplyShim&&(t.a=window.ShadyCSS.ApplyShim,t.a.invalidCallback=Ei),function(t){!t.b&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(t.b=window.ShadyCSS.CustomStyleInterface,t.b.transformCallback=function(e){t.Ga(e)},t.b.validateCallback=function(){requestAnimationFrame(function(){(t.b.enqueued||t.B)&&t.flushCustomStyles()})})}(t)}function Pi(t,e){return(e=e.getRootNode().host)?Xo(e)?e:Pi(t,e):t.c}function Oi(t,e,n){var r=Xo(t=Pi(t,e));t=Object.create(r.O||null);var o=ii(e,n.M);for(var i in e=function(t,e){var n={},r=[];return go(t,function(t){t.C||ei(t);var o=t.G||t.parsedSelector;e&&t.C.L&&o&&Zo.call(e,o)&&(ni(t,n),t=t.index,o=parseInt(t/32,10),r[o]=(r[o]||0)|1<<t%32)},null,!0),{L:n,key:r}}(r.M,e).L,Object.assign(t,o.Za,e,o.fb),e=n.U)((o=e[i])||0===o)&&(t[i]=o);for(i=ci,e=Object.getOwnPropertyNames(t),o=0;o<e.length;o++)t[r=e[o]]=ri(i,t[r],t);n.O=t}(n=Si.prototype).flush=function(){_i()},n.Xa=function(t){return mo(t)},n.ib=function(t){return fo(t)},n.prepareTemplate=function(t,e,n){this.prepareTemplateDom(t,e),this.prepareTemplateStyles(t,e,n)},n.prepareTemplateStyles=function(t,e,n){if(!t.B){t.B=!0,t.name=e,t.extends=n,bi[e]=t;for(var r=(r=t.content.querySelector("style"))&&r.getAttribute("css-build")||"",o=[],i=t.content.querySelectorAll("style"),a=0;a<i.length;a++){var s=i[a];if(s.hasAttribute("shady-unscoped")){if(!ro){var l=s.textContent;po.has(l)||(po.add(l),l=s.cloneNode(!0),document.head.appendChild(l)),s.parentNode.removeChild(s)}}else o.push(s.textContent),s.parentNode.removeChild(s)}o=o.join("").trim(),n={is:e,extends:n,ob:r},Ti(this),i=so.test(o)||ao.test(o),so.lastIndex=0,ao.lastIndex=0,o=zr(o),i&&io&&this.a&&this.a.transformRules(o,e),t._styleAst=o,t.S=r,r=[],io||(r=function(t){var e={},n=[],r=0;for(var o in go(t,function(t){ei(t),t.index=r++,t=t.C.cssText;for(var n;n=lo.exec(t);){var o=n[1];":"!==n[2]&&(e[o]=!0)}},function(t){n.push(t)}),t.b=n,t=[],e)t.push(o);return t}(t._styleAst)),r.length&&!io||(o=ro?t.content:null,e=ui[e],e=(i=To(n,t._styleAst)).length?vo(i,n.is,o,e):void 0,t.a=e),t.f=r}},n.prepareTemplateDom=function(t,e){ro||t.c||(t.c=!0,No(t.content,e))},n.flushCustomStyles=function(){if(Ti(this),this.b){var t=this.b.processStyles();if(this.b.enqueued){if(io)for(var e=0;e<t.length;e++){var n=this.b.getStyleForCustomStyle(t[e]);if(n&&io&&this.a){var r=mo(n);Ti(this),this.a.transformRules(r),n.textContent=fo(r)}}else for(Oi(this,this.c,this.f),e=0;e<t.length;e++)(n=this.b.getStyleForCustomStyle(t[e]))&&li(n,this.f.O);this.b.enqueued=!1,this.B&&!io&&this.styleDocument()}}},n.styleElement=function(t,e){var n=Eo(t).is,r=Xo(t);if(!r){var o=Eo(t);r=o.is,o=o.Y;var i=ui[r];if(r=bi[r])var a=r._styleAst,s=r.f;r=Ko(t,new Jo(a,i,s,o))}if(t!==this.c&&(this.B=!0),e&&(r.U=r.U||{},Object.assign(r.U,e)),io){if(r.U)for(var l in e=r.U)null===l?t.style.removeProperty(l):t.style.setProperty(l,e[l]);((l=bi[n])||t===this.c)&&l&&l.a&&!Ci(l)&&((Ci(l)||l._applyShimValidatingVersion!==l._applyShimNextVersion)&&(Ti(this),this.a&&this.a.transformRules(l._styleAst,n),l.a.textContent=To(t,r.M),function(t){t._applyShimValidatingVersion=t._applyShimNextVersion,t.b||(t.b=!0,wi.then(function(){t._applyShimCurrentVersion=t._applyShimNextVersion,t.b=!1}))}(l)),ro&&(n=t.shadowRoot)&&(n.querySelector("style").textContent=To(t,r.M)),r.M=l._styleAst)}else if(this.flush(),Oi(this,t,r),r.ua&&r.ua.length){n=r,l=Eo(t).is,r=(e=Ni.fetch(l,n.O,n.ua))?e.styleElement:null,a=n.I,(s=e&&e.I)||(s=l+"-"+(s=this.S[l]=(this.S[l]||0)+1)),n.I=s,s=n.I,o=ci,o=r?r.textContent||"":ai(o,t,n.O,s);var c=(i=Xo(t)).a;c&&!ro&&c!==r&&(c._useCount--,0>=c._useCount&&c.parentNode&&c.parentNode.removeChild(c)),ro?i.a?(i.a.textContent=o,r=i.a):o&&(r=vo(o,s,t.shadowRoot,i.b)):r?r.parentNode||(Qo&&-1<o.indexOf("@media")&&(r.textContent=o),bo(r,null,i.b)):o&&(r=vo(o,s,null,i.b)),r&&(r._useCount=r._useCount||0,i.a!=r&&r._useCount++,i.a=r),s=r,ro||(r=n.I,i=o=t.getAttribute("class")||"",a&&(i=o.replace(new RegExp("\\s*x-scope\\s*"+a+"\\s*","g")," ")),o!==(i+=(i?" ":"")+"x-scope "+r)&&wo(t,i)),e||Ni.store(l,n.O,s,n.I)}},n.styleDocument=function(t){this.styleSubtree(this.c,t)},n.styleSubtree=function(t,e){var n=t.shadowRoot;if((n||t===this.c)&&this.styleElement(t,e),e=n&&(n.children||n.childNodes))for(t=0;t<e.length;t++)this.styleSubtree(e[t]);else if(t=t.children||t.childNodes)for(e=0;e<t.length;e++)this.styleSubtree(t[e])},n.Ga=function(t){var e=this,n=mo(t);go(n,function(t){if(ro)Do(t);else{var n=Yo;t.selector=t.parsedSelector,Do(t),t.selector=t.G=Oo(n,t,n.c,void 0,void 0)}io&&(Ti(e),e.a&&e.a.transformRule(t))}),io?t.textContent=fo(n):this.f.M.rules.push(n)},n.getComputedStyleValue=function(t,e){var n;return io||(n=(Xo(t)||Xo(Pi(this,t))).O[e]),(n=n||window.getComputedStyle(t).getPropertyValue(e))?n.trim():""},n.hb=function(t,e){var n=t.getRootNode();if(e=e?e.split(/\s/):[],!(n=n.host&&n.host.localName)){var r=t.getAttribute("class");if(r){r=r.split(/\s/);for(var o=0;o<r.length;o++)if(r[o]===Yo.a){n=r[o+1];break}}}n&&e.push(Yo.a,n),io||(n=Xo(t))&&n.I&&e.push(ci.a,n.I),wo(t,e.join(" "))},n.Sa=function(t){return Xo(t)},Si.prototype.flush=Si.prototype.flush,Si.prototype.prepareTemplate=Si.prototype.prepareTemplate,Si.prototype.styleElement=Si.prototype.styleElement,Si.prototype.styleDocument=Si.prototype.styleDocument,Si.prototype.styleSubtree=Si.prototype.styleSubtree,Si.prototype.getComputedStyleValue=Si.prototype.getComputedStyleValue,Si.prototype.setElementClass=Si.prototype.hb,Si.prototype._styleInfoForNode=Si.prototype.Sa,Si.prototype.transformCustomStyleForDocument=Si.prototype.Ga,Si.prototype.getStyleAst=Si.prototype.Xa,Si.prototype.styleAstToString=Si.prototype.ib,Si.prototype.flushCustomStyles=Si.prototype.flushCustomStyles,Object.defineProperties(Si.prototype,{nativeShadow:{get:function(){return ro}},nativeCss:{get:function(){return io}}});var xi,Ai,Di=new Si;window.ShadyCSS&&(xi=window.ShadyCSS.ApplyShim,Ai=window.ShadyCSS.CustomStyleInterface),window.ShadyCSS={ScopingShim:Di,prepareTemplate:function(t,e,n){Di.flushCustomStyles(),Di.prepareTemplate(t,e,n)},prepareTemplateDom:function(t,e){Di.prepareTemplateDom(t,e)},prepareTemplateStyles:function(t,e,n){Di.flushCustomStyles(),Di.prepareTemplateStyles(t,e,n)},styleSubtree:function(t,e){Di.flushCustomStyles(),Di.styleSubtree(t,e)},styleElement:function(t){Di.flushCustomStyles(),Di.styleElement(t)},styleDocument:function(t){Di.flushCustomStyles(),Di.styleDocument(t)},flushCustomStyles:function(){Di.flushCustomStyles()},getComputedStyleValue:function(t,e){return Di.getComputedStyleValue(t,e)},nativeCss:io,nativeShadow:ro},xi&&(window.ShadyCSS.ApplyShim=xi),Ai&&(window.ShadyCSS.CustomStyleInterface=Ai),function(t){function e(t){return""==t&&(i.call(this),this.i=!0),t.toLowerCase()}function n(t){var e=t.charCodeAt(0);return 32<e&&127>e&&-1==[34,35,60,62,63,96].indexOf(e)?t:encodeURIComponent(t)}function r(t){var e=t.charCodeAt(0);return 32<e&&127>e&&-1==[34,35,60,62,96].indexOf(e)?t:encodeURIComponent(t)}function o(t,o,a){function s(t){g.push(t)}var l=o||"scheme start",p=0,f="",m=!1,y=!1,g=[];t:for(;(void 0!=t[p-1]||0==p)&&!this.i;){var v=t[p];switch(l){case"scheme start":if(!v||!h.test(v)){if(o){s("Invalid scheme.");break t}f="",l="no scheme";continue}f+=v.toLowerCase(),l="scheme";break;case"scheme":if(v&&d.test(v))f+=v.toLowerCase();else{if(":"!=v){if(o){void 0!=v&&s("Code point not allowed in scheme: "+v);break t}f="",p=0,l="no scheme";continue}if(this.h=f,f="",o)break t;void 0!==c[this.h]&&(this.F=!0),l="file"==this.h?"relative":this.F&&a&&a.h==this.h?"relative or authority":this.F?"authority first slash":"scheme data"}break;case"scheme data":"?"==v?(this.s="?",l="query"):"#"==v?(this.D="#",l="fragment"):void 0!=v&&"\t"!=v&&"\n"!=v&&"\r"!=v&&(this.ra+=n(v));break;case"no scheme":if(a&&void 0!==c[a.h]){l="relative";continue}s("Missing scheme."),i.call(this),this.i=!0;break;case"relative or authority":if("/"!=v||"/"!=t[p+1]){s("Expected /, got: "+v),l="relative";continue}l="authority ignore slashes";break;case"relative":if(this.F=!0,"file"!=this.h&&(this.h=a.h),void 0==v){this.j=a.j,this.o=a.o,this.l=a.l.slice(),this.s=a.s,this.u=a.u,this.g=a.g;break t}if("/"==v||"\\"==v)"\\"==v&&s("\\ is an invalid code point."),l="relative slash";else if("?"==v)this.j=a.j,this.o=a.o,this.l=a.l.slice(),this.s="?",this.u=a.u,this.g=a.g,l="query";else{if("#"!=v){l=t[p+1];var _=t[p+2];("file"!=this.h||!h.test(v)||":"!=l&&"|"!=l||void 0!=_&&"/"!=_&&"\\"!=_&&"?"!=_&&"#"!=_)&&(this.j=a.j,this.o=a.o,this.u=a.u,this.g=a.g,this.l=a.l.slice(),this.l.pop()),l="relative path";continue}this.j=a.j,this.o=a.o,this.l=a.l.slice(),this.s=a.s,this.D="#",this.u=a.u,this.g=a.g,l="fragment"}break;case"relative slash":if("/"!=v&&"\\"!=v){"file"!=this.h&&(this.j=a.j,this.o=a.o,this.u=a.u,this.g=a.g),l="relative path";continue}"\\"==v&&s("\\ is an invalid code point."),l="file"==this.h?"file host":"authority ignore slashes";break;case"authority first slash":if("/"!=v){s("Expected '/', got: "+v),l="authority ignore slashes";continue}l="authority second slash";break;case"authority second slash":if(l="authority ignore slashes","/"!=v){s("Expected '/', got: "+v);continue}break;case"authority ignore slashes":if("/"!=v&&"\\"!=v){l="authority";continue}s("Expected authority, got: "+v);break;case"authority":if("@"==v){for(m&&(s("@ already seen."),f+="%40"),m=!0,v=0;v<f.length;v++)"\t"==(_=f[v])||"\n"==_||"\r"==_?s("Invalid whitespace in authority."):":"==_&&null===this.g?this.g="":(_=n(_),null!==this.g?this.g+=_:this.u+=_);f=""}else{if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v){p-=f.length,f="",l="host";continue}f+=v}break;case"file host":if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v){2!=f.length||!h.test(f[0])||":"!=f[1]&&"|"!=f[1]?(0!=f.length&&(this.j=e.call(this,f),f=""),l="relative path start"):l="relative path";continue}"\t"==v||"\n"==v||"\r"==v?s("Invalid whitespace in file host."):f+=v;break;case"host":case"hostname":if(":"!=v||y){if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v){if(this.j=e.call(this,f),f="",l="relative path start",o)break t;continue}"\t"!=v&&"\n"!=v&&"\r"!=v?("["==v?y=!0:"]"==v&&(y=!1),f+=v):s("Invalid code point in host/hostname: "+v)}else if(this.j=e.call(this,f),f="",l="port","hostname"==o)break t;break;case"port":if(/[0-9]/.test(v))f+=v;else{if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v||o){if(""!=f&&((f=parseInt(f,10))!=c[this.h]&&(this.o=f+""),f=""),o)break t;l="relative path start";continue}"\t"==v||"\n"==v||"\r"==v?s("Invalid code point in port: "+v):(i.call(this),this.i=!0)}break;case"relative path start":if("\\"==v&&s("'\\' not allowed in path."),l="relative path","/"!=v&&"\\"!=v)continue;break;case"relative path":void 0!=v&&"/"!=v&&"\\"!=v&&(o||"?"!=v&&"#"!=v)?"\t"!=v&&"\n"!=v&&"\r"!=v&&(f+=n(v)):("\\"==v&&s("\\ not allowed in relative path."),(_=u[f.toLowerCase()])&&(f=_),".."==f?(this.l.pop(),"/"!=v&&"\\"!=v&&this.l.push("")):"."==f&&"/"!=v&&"\\"!=v?this.l.push(""):"."!=f&&("file"==this.h&&0==this.l.length&&2==f.length&&h.test(f[0])&&"|"==f[1]&&(f=f[0]+":"),this.l.push(f)),f="","?"==v?(this.s="?",l="query"):"#"==v&&(this.D="#",l="fragment"));break;case"query":o||"#"!=v?void 0!=v&&"\t"!=v&&"\n"!=v&&"\r"!=v&&(this.s+=r(v)):(this.D="#",l="fragment");break;case"fragment":void 0!=v&&"\t"!=v&&"\n"!=v&&"\r"!=v&&(this.D+=v)}p++}}function i(){this.u=this.ra=this.h="",this.g=null,this.o=this.j="",this.l=[],this.D=this.s="",this.F=this.i=!1}function a(t,e){void 0===e||e instanceof a||(e=new a(String(e))),this.Ta=t,i.call(this),t=t.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,""),o.call(this,t,null,e)}var s=!1;if(!t.xb)try{var l=new URL("b","http://a");l.pathname="c%20d",s="http://a/c%20d"===l.href}catch(t){}if(!s){var c=Object.create(null);c.ftp=21,c.file=0,c.gopher=70,c.http=80,c.https=443,c.ws=80,c.wss=443;var u=Object.create(null);u["%2e"]=".",u[".%2e"]="..",u["%2e."]="..",u["%2e%2e"]="..";var h=/[a-zA-Z]/,d=/[a-zA-Z0-9\+\-\.]/;a.prototype={toString:function(){return this.href},get href(){if(this.i)return this.Ta;var t="";return""==this.u&&null==this.g||(t=this.u+(null!=this.g?":"+this.g:"")+"@"),this.protocol+(this.F?"//"+t+this.host:"")+this.pathname+this.s+this.D},set href(t){i.call(this),o.call(this,t)},get protocol(){return this.h+":"},set protocol(t){this.i||o.call(this,t+":","scheme start")},get host(){return this.i?"":this.o?this.j+":"+this.o:this.j},set host(t){!this.i&&this.F&&o.call(this,t,"host")},get hostname(){return this.j},set hostname(t){!this.i&&this.F&&o.call(this,t,"hostname")},get port(){return this.o},set port(t){!this.i&&this.F&&o.call(this,t,"port")},get pathname(){return this.i?"":this.F?"/"+this.l.join("/"):this.ra},set pathname(t){!this.i&&this.F&&(this.l=[],o.call(this,t,"relative path start"))},get search(){return this.i||!this.s||"?"==this.s?"":this.s},set search(t){!this.i&&this.F&&(this.s="?","?"==t[0]&&(t=t.slice(1)),o.call(this,t,"query"))},get hash(){return this.i||!this.D||"#"==this.D?"":this.D},set hash(t){this.i||(this.D="#","#"==t[0]&&(t=t.slice(1)),o.call(this,t,"fragment"))},get origin(){var t;if(this.i||!this.h)return"";switch(this.h){case"data":case"file":case"javascript":case"mailto":return"null"}return(t=this.host)?this.h+"://"+t:""}};var p=t.URL;p&&(a.createObjectURL=function(t){return p.createObjectURL.apply(p,arguments)},a.revokeObjectURL=function(t){p.revokeObjectURL(t)}),t.URL=a}}(window);var Mi=document.createElement("style");Mi.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var Li=document.querySelector("head");Li.insertBefore(Mi,Li.firstChild);var ki=window.customElements,ji=!1,Ii=null;function Ri(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document),Ii&&Ii(),ji=!0,window.WebComponents.ready=!0,document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}))}ki.polyfillWrapFlushCallback&&ki.polyfillWrapFlushCallback(function(t){Ii=t,ji&&t()}),"complete"!==document.readyState?(window.addEventListener("load",Ri),window.addEventListener("DOMContentLoaded",function(){window.removeEventListener("load",Ri),Ri()})):Ri()}).call(this)}).call(this,n(1),n(8).setImmediate)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
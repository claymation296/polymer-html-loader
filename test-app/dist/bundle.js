!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist/",n(n.s=2)}([function(t,e){
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
window.JSCompiler_renameProperty=function(t){return t}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"dashToCamelCase",function(){return U}),n.d(r,"camelToDashCase",function(){return B});n(7),n(0);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let o,i,a=/(url\()([^)]*)(\))/g,s=/(^\/)|(^#)|(^[\w-\d]*:)/;function l(t,e){if(t&&s.test(t))return t;if(void 0===o){o=!1;try{const t=new URL("b","http://a");t.pathname="c%20d",o="http://a/c%20d"===t.href}catch(t){}}return e||(e=document.baseURI||window.location.href),o?new URL(t,e).href:(i||((i=document.implementation.createHTMLDocument("temp")).base=i.createElement("base"),i.head.appendChild(i.base),i.anchor=i.createElement("a"),i.body.appendChild(i.anchor)),i.base.href=e,i.anchor.href=t,i.anchor.href||t)}function c(t,e){return t.replace(a,function(t,n,r,o){return n+"'"+l(r.replace(/["']/g,""),e)+"'"+o})}function u(t){return t.substring(0,t.lastIndexOf("/")+1)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/window.ShadyDOM,Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),window.customElements.polyfillWrapFlushCallback;let h=u(document.baseURI||window.location.href);let d=void 0;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let p=0;function f(){}f.prototype.__mixinApplications,f.prototype.__mixinSet;const m=function(t){let e=t.__mixinApplications;e||(e=new WeakMap,t.__mixinApplications=e);let n=p++;return function(r){let o=r.__mixinSet;if(o&&o[n])return r;let i=e,a=i.get(r);a||(a=t(r),i.set(r,a));let s=Object.create(a.__mixinSet||o||null);return s[n]=!0,a.__mixinSet=s,a}},y="link[rel=import][type~=css]",g="include",v="shady-unscoped";
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function _(t){const e=customElements.get("dom-module");return e?e.import(t):null}function b(t){const e=c((t.body?t.body:t).textContent,t.baseURI),n=document.createElement("style");return n.textContent=e,n}function w(t){const e=t.trim().split(/\s+/),n=[];for(let t=0;t<e.length;t++)n.push(...E(e[t]));return n}function E(t){const e=_(t);if(!e)return console.warn("Could not find style data in module named",t),[];if(void 0===e._styles){const t=[];t.push(...N(e));const n=e.querySelector("template");n&&t.push(...C(n,e.assetpath)),e._styles=t}return e._styles}function C(t,e){if(!t._styles){const n=[],r=t.content.querySelectorAll("style");for(let t=0;t<r.length;t++){let o=r[t],i=o.getAttribute(g);i&&n.push(...w(i).filter(function(t,e,n){return n.indexOf(t)===e})),e&&(o.textContent=c(o.textContent,e)),n.push(o)}t._styles=n}return t._styles}function N(t){const e=[],n=t.querySelectorAll(y);for(let t=0;t<n.length;t++){let r=n[t];if(r.import){const t=r.import,n=r.hasAttribute(v);if(n&&!t._unscopedStyle){const e=b(t);e.setAttribute(v,""),t._unscopedStyle=e}else t._style||(t._style=b(t));e.push(n?t._unscopedStyle:t._style)}}return e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let S={},T={};class P extends HTMLElement{static get observedAttributes(){return["id"]}static import(t,e){if(t){let n=function(t){return S[t]||T[t.toLowerCase()]}(t);return n&&e?n.querySelector(e):n}return null}attributeChangedCallback(t,e,n,r){e!==n&&this.register()}get assetpath(){if(!this.__assetpath){const t=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,e=l(this.getAttribute("assetpath")||"",t.baseURI);this.__assetpath=u(e)}return this.__assetpath}register(t){(t=t||this.id)&&(this.id=t,S[t]=this,T[t.toLowerCase()]=this,function(t){t.querySelector("style")&&console.warn("dom-module %s has style outside template",t.id)}(this))}}function O(t){return t.indexOf(".")>=0}function x(t){let e=t.indexOf(".");return-1===e?t:t.slice(0,e)}function A(t,e){return 0===t.indexOf(e+".")}function D(t,e){return 0===e.indexOf(t+".")}function M(t,e,n){return e+n.slice(t.length)}function L(t){if(Array.isArray(t)){let e=[];for(let n=0;n<t.length;n++){let r=t[n].toString().split(".");for(let t=0;t<r.length;t++)e.push(r[t])}return e.join(".")}return t}function k(t){return Array.isArray(t)?L(t).split("."):t.toString().split(".")}function j(t,e,n){let r=t,o=k(e);for(let t=0;t<o.length;t++){if(!r)return;r=r[o[t]]}return n&&(n.path=o.join(".")),r}function I(t,e,n){let r=t,o=k(e),i=o[o.length-1];if(o.length>1){for(let t=0;t<o.length-1;t++){if(!(r=r[o[t]]))return}r[i]=n}else r[e]=n;return o.join(".")}P.prototype.modules=S,customElements.define("dom-module",P);const R={},F=/-[a-z]/g,H=/([A-Z])/g;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function U(t){return R[t]||(R[t]=t.indexOf("-")<0?t:t.replace(F,t=>t[1].toUpperCase()))}function B(t){return R[t]||(R[t]=t.replace(H,"-$1").toLowerCase())}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let z=0,q=0,V=[],W=0,G=document.createTextNode("");new window.MutationObserver(function(){const t=V.length;for(let e=0;e<t;e++){let t=V[e];if(t)try{t()}catch(t){setTimeout(()=>{throw t})}}V.splice(0,t),q+=t}).observe(G,{characterData:!0});const $={run:t=>(G.textContent=W++,V.push(t),z++),cancel(t){const e=t-q;if(e>=0){if(!V[e])throw new Error("invalid async handle: "+t);V[e]=null}}},Y=m(t=>{return class extends t{static createProperties(t){const e=this.prototype;for(let n in t)n in e||e._createPropertyAccessor(n)}static attributeNameForProperty(t){return t.toLowerCase()}static typeForProperty(t){}_createPropertyAccessor(t,e){this._addPropertyToAttributeMap(t),this.hasOwnProperty("__dataHasAccessor")||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[t]||(this.__dataHasAccessor[t]=!0,this._definePropertyAccessor(t,e))}_addPropertyToAttributeMap(t){if(this.hasOwnProperty("__dataAttributes")||(this.__dataAttributes=Object.assign({},this.__dataAttributes)),!this.__dataAttributes[t]){const e=this.constructor.attributeNameForProperty(t);this.__dataAttributes[e]=t}}_definePropertyAccessor(t,e){Object.defineProperty(this,t,{get(){return this._getProperty(t)},set:e?function(){}:function(e){this._setProperty(t,e)}})}constructor(){super(),this.__dataEnabled=!1,this.__dataReady=!1,this.__dataInvalid=!1,this.__data={},this.__dataPending=null,this.__dataOld=null,this.__dataInstanceProps=null,this.__serializing=!1,this._initializeProperties()}ready(){this.__dataReady=!0,this._flushProperties()}_initializeProperties(){for(let t in this.__dataHasAccessor)this.hasOwnProperty(t)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[t]=this[t],delete this[t])}_initializeInstanceProperties(t){Object.assign(this,t)}_setProperty(t,e){this._setPendingProperty(t,e)&&this._invalidateProperties()}_getProperty(t){return this.__data[t]}_setPendingProperty(t,e,n){let r=this.__data[t],o=this._shouldPropertyChange(t,e,r);return o&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),!this.__dataOld||t in this.__dataOld||(this.__dataOld[t]=r),this.__data[t]=e,this.__dataPending[t]=e),o}_invalidateProperties(){!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,$.run(()=>{this.__dataInvalid&&(this.__dataInvalid=!1,this._flushProperties())}))}_enableProperties(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}_flushProperties(){const t=this.__data,e=this.__dataPending,n=this.__dataOld;this._shouldPropertiesChange(t,e,n)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(t,e,n))}_shouldPropertiesChange(t,e,n){return Boolean(e)}_propertiesChanged(t,e,n){}_shouldPropertyChange(t,e,n){return n!==e&&(n==n||e==e)}attributeChangedCallback(t,e,n,r){e!==n&&this._attributeToProperty(t,n),super.attributeChangedCallback&&super.attributeChangedCallback(t,e,n,r)}_attributeToProperty(t,e,n){if(!this.__serializing){const r=this.__dataAttributes,o=r&&r[t]||t;this[o]=this._deserializeValue(e,n||this.constructor.typeForProperty(o))}}_propertyToAttribute(t,e,n){this.__serializing=!0,n=arguments.length<3?this[t]:n,this._valueToNodeAttribute(this,n,e||this.constructor.attributeNameForProperty(t)),this.__serializing=!1}_valueToNodeAttribute(t,e,n){const r=this._serializeValue(e);void 0===r?t.removeAttribute(n):t.setAttribute(n,r)}_serializeValue(t){switch(typeof t){case"boolean":return t?"":void 0;default:return null!=t?t.toString():void 0}}_deserializeValue(t,e){switch(e){case Boolean:return null!==t;case Number:return Number(t);default:return t}}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let J=r;const X={};let K=HTMLElement.prototype;for(;K;){let t=Object.getOwnPropertyNames(K);for(let e=0;e<t.length;e++)X[t[e]]=!0;K=Object.getPrototypeOf(K)}const Z=m(t=>{const e=Y(t);return class extends e{static createPropertiesForAttributes(){let t=this.observedAttributes;for(let e=0;e<t.length;e++)this.prototype._createPropertyAccessor(J.dashToCamelCase(t[e]))}static attributeNameForProperty(t){return J.camelToDashCase(t)}_initializeProperties(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),super._initializeProperties()}_initializeProtoProperties(t){for(let e in t)this._setProperty(e,t[e])}_ensureAttribute(t,e){const n=this;n.hasAttribute(t)||this._valueToNodeAttribute(n,e,t)}_serializeValue(t){switch(typeof t){case"object":if(t instanceof Date)return t.toString();if(t)try{return JSON.stringify(t)}catch(t){return""}default:return super._serializeValue(t)}}_deserializeValue(t,e){let n;switch(e){case Object:try{n=JSON.parse(t)}catch(e){n=t}break;case Array:try{n=JSON.parse(t)}catch(e){n=null,console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${t}`)}break;case Date:n=isNaN(t)?String(t):Number(t),n=new Date(n);break;default:n=super._deserializeValue(t,e)}return n}_definePropertyAccessor(t,e){!function(t,e){if(!X[e]){let n=t[e];void 0!==n&&(t.__data?t._setPendingProperty(e,n):(t.__dataProto?t.hasOwnProperty(JSCompiler_renameProperty("__dataProto",t))||(t.__dataProto=Object.create(t.__dataProto)):t.__dataProto={},t.__dataProto[e]=n))}}(this,t),super._definePropertyAccessor(t,e)}_hasAccessor(t){return this.__dataHasAccessor&&this.__dataHasAccessor[t]}_isPropertyPending(t){return Boolean(this.__dataPending&&t in this.__dataPending)}}}),Q={"dom-if":!0,"dom-repeat":!0};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function tt(t){let e=t.getAttribute("is");if(e&&Q[e]){let n=t;for(n.removeAttribute("is"),t=n.ownerDocument.createElement(e),n.parentNode.replaceChild(t,n),t.appendChild(n);n.attributes.length;)t.setAttribute(n.attributes[0].name,n.attributes[0].value),n.removeAttribute(n.attributes[0].name)}return t}function et(t,e){let n=e.parentInfo&&et(t,e.parentInfo);if(!n)return t;for(let t=n.firstChild,r=0;t;t=t.nextSibling)if(e.parentIndex===r++)return t}function nt(t,e,n,r){r.id&&(e[r.id]=n)}function rt(t,e,n){if(n.events&&n.events.length)for(let r,o=0,i=n.events;o<i.length&&(r=i[o]);o++)t._addMethodEventListenerToNode(e,r.name,r.value,t)}function ot(t,e,n){n.templateInfo&&(e._templateInfo=n.templateInfo)}const it=m(t=>{return class extends t{static _parseTemplate(t,e){if(!t._templateInfo){let n=t._templateInfo={};n.nodeInfoList=[],n.stripWhiteSpace=e&&e.stripWhiteSpace||t.hasAttribute("strip-whitespace"),this._parseTemplateContent(t,n,{parent:null})}return t._templateInfo}static _parseTemplateContent(t,e,n){return this._parseTemplateNode(t.content,e,n)}static _parseTemplateNode(t,e,n){let r,o=t;return"template"!=o.localName||o.hasAttribute("preserve-content")?"slot"===o.localName&&(e.hasInsertionPoint=!0):r=this._parseTemplateNestedTemplate(o,e,n)||r,o.firstChild&&(r=this._parseTemplateChildNodes(o,e,n)||r),o.hasAttributes&&o.hasAttributes()&&(r=this._parseTemplateNodeAttributes(o,e,n)||r),r}static _parseTemplateChildNodes(t,e,n){if("script"!==t.localName&&"style"!==t.localName)for(let r,o=t.firstChild,i=0;o;o=r){if("template"==o.localName&&(o=tt(o)),r=o.nextSibling,o.nodeType===Node.TEXT_NODE){let n=r;for(;n&&n.nodeType===Node.TEXT_NODE;)o.textContent+=n.textContent,r=n.nextSibling,t.removeChild(n),n=r;if(e.stripWhiteSpace&&!o.textContent.trim()){t.removeChild(o);continue}}let a={parentIndex:i,parentInfo:n};this._parseTemplateNode(o,e,a)&&(a.infoIndex=e.nodeInfoList.push(a)-1),o.parentNode&&i++}}static _parseTemplateNestedTemplate(t,e,n){let r=this._parseTemplate(t,e);return(r.content=t.content.ownerDocument.createDocumentFragment()).appendChild(t.content),n.templateInfo=r,!0}static _parseTemplateNodeAttributes(t,e,n){let r=!1,o=Array.from(t.attributes);for(let i,a=o.length-1;i=o[a];a--)r=this._parseTemplateNodeAttribute(t,e,n,i.name,i.value)||r;return r}static _parseTemplateNodeAttribute(t,e,n,r,o){return"on-"===r.slice(0,3)?(t.removeAttribute(r),n.events=n.events||[],n.events.push({name:r.slice(3),value:o}),!0):"id"===r&&(n.id=o,!0)}static _contentForTemplate(t){let e=t._templateInfo;return e&&e.content||t.content}_stampTemplate(t){t&&!t.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(t);let e=this.constructor._parseTemplate(t),n=e.nodeInfoList,r=e.content||t.content,o=document.importNode(r,!0);o.__noInsertionPoint=!e.hasInsertionPoint;let i=o.nodeList=new Array(n.length);o.$={};for(let t,e=0,r=n.length;e<r&&(t=n[e]);e++){let n=i[e]=et(o,t);nt(0,o.$,n,t),ot(0,n,t),rt(this,n,t)}return o=o}_addMethodEventListenerToNode(t,e,n,r){let o=function(t,e,n){return t=t._methodHost||t,function(e){t[n]?t[n](e,e.detail):console.warn("listener method `"+n+"` not defined")}}(r=r||t,0,n);return this._addEventListenerToNode(t,e,o),o}_addEventListenerToNode(t,e,n){t.addEventListener(e,n)}_removeEventListenerFromNode(t,e,n){t.removeEventListener(e,n)}}}),at=r;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let st=0;const lt={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},ct=/[A-Z]/;let ut;function ht(t,e){let n=t[e];if(n){if(!t.hasOwnProperty(e)){n=t[e]=Object.create(t[e]);for(let t in n){let e=n[t],r=n[t]=Array(e.length);for(let t=0;t<e.length;t++)r[t]=e[t]}}}else n=t[e]={};return n}function dt(t,e,n,r,o,i){if(e){let a=!1,s=st++;for(let l in n)pt(t,e,s,l,n,r,o,i)&&(a=!0);return a}return!1}function pt(t,e,n,r,o,i,a,s){let l=!1,c=e[a?x(r):r];if(c)for(let e,u=0,h=c.length;u<h&&(e=c[u]);u++)e.info&&e.info.lastRun===n||a&&!ft(r,e.trigger)||(e.info&&(e.info.lastRun=n),e.fn(t,r,o,i,e.info,a,s),l=!0);return l}function ft(t,e){if(e){let n=e.name;return n==t||e.structured&&A(n,t)||e.wildcard&&D(n,t)}return!0}function mt(t,e,n,r,o){let i="string"==typeof o.method?t[o.method]:o.method,a=o.property;i?i.call(t,t.__data[a],r[a]):o.dynamicFn||console.warn("observer method `"+o.method+"` not defined")}function yt(t,e,n){let r=x(e);if(r!==e){return gt(t,B(r)+"-changed",n[e],e),!0}return!1}function gt(t,e,n,r){let o={value:n,queueProperty:!0};r&&(o.path=r),t.dispatchEvent(new CustomEvent(e,{detail:o}))}function vt(t,e,n,r,o,i){let a=(i?x(e):e)!=e?e:null,s=a?j(t,a):t.__data[e];a&&void 0===s&&(s=n[e]),gt(t,o.eventName,s,a)}function _t(t,e,n,r,o){let i=t.__data[e];d&&(i=d(i,o.attrName,"attribute",t)),t._propertyToAttribute(e,o.attrName,i)}function bt(t,e,n,r,o){let i=Pt(t,e,n,r,o),a=o.methodInfo;t.__dataHasAccessor&&t.__dataHasAccessor[a]?t._setPendingProperty(a,i,!0):t[a]=i}function wt(t,e,n,r,o,i,a){n.bindings=n.bindings||[];let s={kind:r,target:o,parts:i,literal:a,isCompound:1!==i.length};if(n.bindings.push(s),function(t){return Boolean(t.target)&&"attribute"!=t.kind&&"text"!=t.kind&&!t.isCompound&&"{"===t.parts[0].mode}(s)){let{event:t,negate:e}=s.parts[0];s.listenerEvent=t||at.camelToDashCase(o)+"-changed",s.listenerNegate=e}let l=e.nodeInfoList.length;for(let n=0;n<s.parts.length;n++){let r=s.parts[n];r.compoundIndex=n,Et(t,e,s,r,l)}}function Et(t,e,n,r,o){if(!r.literal)if("attribute"===n.kind&&"-"===n.target[0])console.warn("Cannot set attribute "+n.target+' because "-" is not a valid attribute starting character');else{let i=r.dependencies,a={index:o,binding:n,part:r,evaluator:t};for(let n=0;n<i.length;n++){let r=i[n];"string"==typeof r&&((r=Mt(r)).wildcard=!0),t._addTemplatePropertyEffect(e,r.rootProperty,{fn:Ct,info:a,trigger:r})}}}function Ct(t,e,n,r,o,i,a){let s=a[o.index],l=o.binding,c=o.part;if(i&&c.source&&e.length>c.source.length&&"property"==l.kind&&!l.isCompound&&s.__isPropertyEffectsClient&&s.__dataHasAccessor&&s.__dataHasAccessor[l.target]){let r=n[e];e=M(c.source,l.target,e),s._setPendingPropertyOrPath(e,r,!1,!0)&&t._enqueueClient(s)}else{!function(t,e,n,r,o){o=function(t,e,n,r){if(n.isCompound){let o=t.__dataCompoundStorage[n.target];o[r.compoundIndex]=e,e=o.join("")}return"attribute"!==n.kind&&("textContent"!==n.target&&("value"!==n.target||"input"!==t.localName&&"textarea"!==t.localName)||(e=void 0==e?"":e)),e}(e,o,n,r),d&&(o=d(o,n.target,n.kind,e));if("attribute"==n.kind)t._valueToNodeAttribute(e,o,n.target);else{let r=n.target;e.__isPropertyEffectsClient&&e.__dataHasAccessor&&e.__dataHasAccessor[r]?e[lt.READ_ONLY]&&e[lt.READ_ONLY][r]||e._setPendingProperty(r,o)&&t._enqueueClient(e):t._setUnmanagedPropertyToNode(e,r,o)}}(t,s,l,c,o.evaluator._evaluateBinding(t,c,e,n,r,i))}}function Nt(t,e){if(e.isCompound){let n=t.__dataCompoundStorage||(t.__dataCompoundStorage={}),r=e.parts,o=new Array(r.length);for(let t=0;t<r.length;t++)o[t]=r[t].literal;let i=e.target;n[i]=o,e.literal&&"property"==e.kind&&(t[i]=e.literal)}}function St(t,e,n){if(n.listenerEvent){let r=n.parts[0];t.addEventListener(n.listenerEvent,function(t){!function(t,e,n,r,o){let i,a=t.detail,s=a&&a.path;s?(r=M(n,r,s),i=a&&a.value):i=t.target[n],i=o?!i:i,e[lt.READ_ONLY]&&e[lt.READ_ONLY][r]||!e._setPendingPropertyOrPath(r,i,!0,Boolean(s))||a&&a.queueProperty||e._invalidateProperties()}(t,e,n.target,r.source,r.negate)})}}function Tt(t,e,n,r,o,i){i=e.static||i&&("object"!=typeof i||i[e.methodName]);let a={methodName:e.methodName,args:e.args,methodInfo:o,dynamicFn:i};for(let o,i=0;i<e.args.length&&(o=e.args[i]);i++)o.literal||t._addPropertyEffect(o.rootProperty,n,{fn:r,info:a,trigger:o});i&&t._addPropertyEffect(e.methodName,n,{fn:r,info:a})}function Pt(t,e,n,r,o){let i=t._methodHost||t,a=i[o.methodName];if(a){let r=function(t,e,n,r){let o=[];for(let i=0,a=e.length;i<a;i++){let a,s=e[i],l=s.name;if(s.literal?a=s.value:s.structured?void 0===(a=j(t,l))&&(a=r[l]):a=t[l],s.wildcard){let t=0===l.indexOf(n+"."),e=0===n.indexOf(l)&&!t;o[i]={path:e?n:l,value:e?r[n]:a,base:a}}else o[i]=a}return o}(t.__data,o.args,e,n);return a.apply(i,r)}o.dynamicFn||console.warn("method `"+o.methodName+"` not defined")}const Ot=[],xt=new RegExp("(\\[\\[|{{)\\s*(?:(!)\\s*)?((?:[a-zA-Z_$][\\w.:$\\-*]*)\\s*(?:\\(\\s*(?:(?:(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*)(?:,\\s*(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*))*)?)\\)\\s*)?)(?:]]|}})","g");function At(t){let e="";for(let n=0;n<t.length;n++){e+=t[n].literal||""}return e}function Dt(t){let e=t.match(/([^\s]+?)\(([\s\S]*)\)/);if(e){let t={methodName:e[1],static:!0,args:Ot};if(e[2].trim()){return function(t,e){return e.args=t.map(function(t){let n=Mt(t);return n.literal||(e.static=!1),n},this),e}(e[2].replace(/\\,/g,"&comma;").split(","),t)}return t}return null}function Mt(t){let e=t.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),n={name:e,value:"",literal:!1},r=e[0];switch("-"===r&&(r=e[1]),r>="0"&&r<="9"&&(r="#"),r){case"'":case'"':n.value=e.slice(1,-1),n.literal=!0;break;case"#":n.value=Number(e),n.literal=!0}return n.literal||(n.rootProperty=x(e),n.structured=O(e),n.structured&&(n.wildcard=".*"==e.slice(-2),n.wildcard&&(n.name=e.slice(0,-2)))),n}function Lt(t,e,n,r){let o=n+".splices";t.notifyPath(o,{indexSplices:r}),t.notifyPath(n+".length",e.length),t.__data[o]={indexSplices:null}}function kt(t,e,n,r,o,i){Lt(t,e,n,[{index:r,addedCount:o,removed:i,object:e,type:"splice"}])}const jt=m(t=>{const e=it(Z(t));class n extends e{constructor(){super(),this.__isPropertyEffectsClient=!0,this.__dataCounter=0,this.__dataClientsReady,this.__dataPendingClients,this.__dataToNotify,this.__dataLinkedPaths,this.__dataHasPaths,this.__dataCompoundStorage,this.__dataHost,this.__dataTemp,this.__dataClientsInitialized,this.__data,this.__dataPending,this.__dataOld,this.__computeEffects,this.__reflectEffects,this.__notifyEffects,this.__propagateEffects,this.__observeEffects,this.__readOnly,this.__templateInfo}get PROPERTY_EFFECT_TYPES(){return lt}_initializeProperties(){super._initializeProperties(),It.registerHost(this),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}_initializeProtoProperties(t){this.__data=Object.create(t),this.__dataPending=Object.create(t),this.__dataOld={}}_initializeInstanceProperties(t){let e=this[lt.READ_ONLY];for(let n in t)e&&e[n]||(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[n]=this.__dataPending[n]=t[n])}_addPropertyEffect(t,e,n){this._createPropertyAccessor(t,e==lt.READ_ONLY);let r=ht(this,e)[t];r||(r=this[e][t]=[]),r.push(n)}_removePropertyEffect(t,e,n){let r=ht(this,e)[t],o=r.indexOf(n);o>=0&&r.splice(o,1)}_hasPropertyEffect(t,e){let n=this[e];return Boolean(n&&n[t])}_hasReadOnlyEffect(t){return this._hasPropertyEffect(t,lt.READ_ONLY)}_hasNotifyEffect(t){return this._hasPropertyEffect(t,lt.NOTIFY)}_hasReflectEffect(t){return this._hasPropertyEffect(t,lt.REFLECT)}_hasComputedEffect(t){return this._hasPropertyEffect(t,lt.COMPUTE)}_setPendingPropertyOrPath(t,e,n,r){if(r||x(Array.isArray(t)?t[0]:t)!==t){if(!r){let n=j(this,t);if(!(t=I(this,t,e))||!super._shouldPropertyChange(t,e,n))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(t,e,n))return function(t,e,n){let r=t.__dataLinkedPaths;if(r){let o;for(let i in r){let a=r[i];D(i,e)?(o=M(i,a,e),t._setPendingPropertyOrPath(o,n,!0,!0)):D(a,e)&&(o=M(a,i,e),t._setPendingPropertyOrPath(o,n,!0,!0))}}}(this,t,e),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[t])return this._setPendingProperty(t,e,n);this[t]=e}return!1}_setUnmanagedPropertyToNode(t,e,n){n===t[e]&&"object"!=typeof n||(t[e]=n)}_setPendingProperty(t,e,n){let r=this.__dataHasPaths&&O(t),o=r?this.__dataTemp:this.__data;return!!this._shouldPropertyChange(t,e,o[t])&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),t in this.__dataOld||(this.__dataOld[t]=this.__data[t]),r?this.__dataTemp[t]=e:this.__data[t]=e,this.__dataPending[t]=e,(r||this[lt.NOTIFY]&&this[lt.NOTIFY][t])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[t]=n),!0)}_setProperty(t,e){this._setPendingProperty(t,e,!0)&&this._invalidateProperties()}_invalidateProperties(){this.__dataReady&&this._flushProperties()}_enqueueClient(t){this.__dataPendingClients=this.__dataPendingClients||[],t!==this&&this.__dataPendingClients.push(t)}_flushProperties(){this.__dataCounter++,super._flushProperties(),this.__dataCounter--}_flushClients(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}__enableOrFlushClients(){let t=this.__dataPendingClients;if(t){this.__dataPendingClients=null;for(let e=0;e<t.length;e++){let n=t[e];n.__dataEnabled?n.__dataPending&&n._flushProperties():n._enableProperties()}}}_readyClients(){this.__enableOrFlushClients()}setProperties(t,e){for(let n in t)!e&&this[lt.READ_ONLY]&&this[lt.READ_ONLY][n]||this._setPendingPropertyOrPath(n,t[n],!0);this._invalidateProperties()}ready(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}_propertiesChanged(t,e,n){let r=this.__dataHasPaths;this.__dataHasPaths=!1,function(t,e,n,r){let o=t[lt.COMPUTE];if(o){let i=e;for(;dt(t,o,i,n,r);)Object.assign(n,t.__dataOld),Object.assign(e,t.__dataPending),i=t.__dataPending,t.__dataPending=null}}(this,e,n,r);let o=this.__dataToNotify;this.__dataToNotify=null,this._propagatePropertyChanges(e,n,r),this._flushClients(),dt(this,this[lt.REFLECT],e,n,r),dt(this,this[lt.OBSERVE],e,n,r),o&&function(t,e,n,r,o){let i,a,s=t[lt.NOTIFY],l=st++;for(let a in e)e[a]&&(s&&pt(t,s,l,a,n,r,o)?i=!0:o&&yt(t,a,n)&&(i=!0));i&&(a=t.__dataHost)&&a._invalidateProperties&&a._invalidateProperties()}(this,o,e,n,r),1==this.__dataCounter&&(this.__dataTemp={})}_propagatePropertyChanges(t,e,n){this[lt.PROPAGATE]&&dt(this,this[lt.PROPAGATE],t,e,n);let r=this.__templateInfo;for(;r;)dt(this,r.propertyEffects,t,e,n,r.nodeList),r=r.nextTemplateInfo}linkPaths(t,e){t=L(t),e=L(e),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[t]=e}unlinkPaths(t){t=L(t),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[t]}notifySplices(t,e){let n={path:""};Lt(this,j(this,t,n),n.path,e)}get(t,e){return j(e||this,t)}set(t,e,n){n?I(n,t,e):this[lt.READ_ONLY]&&this[lt.READ_ONLY][t]||this._setPendingPropertyOrPath(t,e,!0)&&this._invalidateProperties()}push(t,...e){let n={path:""},r=j(this,t,n),o=r.length,i=r.push(...e);return e.length&&kt(this,r,n.path,o,e.length,[]),i}pop(t){let e={path:""},n=j(this,t,e),r=Boolean(n.length),o=n.pop();return r&&kt(this,n,e.path,n.length,0,[o]),o}splice(t,e,n,...r){let o,i={path:""},a=j(this,t,i);return e<0?e=a.length-Math.floor(-e):e&&(e=Math.floor(e)),o=2===arguments.length?a.splice(e):a.splice(e,n,...r),(r.length||o.length)&&kt(this,a,i.path,e,r.length,o),o}shift(t){let e={path:""},n=j(this,t,e),r=Boolean(n.length),o=n.shift();return r&&kt(this,n,e.path,0,0,[o]),o}unshift(t,...e){let n={path:""},r=j(this,t,n),o=r.unshift(...e);return e.length&&kt(this,r,n.path,0,e.length,[]),o}notifyPath(t,e){let n;if(1==arguments.length){let r={path:""};e=j(this,t,r),n=r.path}else n=Array.isArray(t)?L(t):t;this._setPendingPropertyOrPath(n,e,!0,!0)&&this._invalidateProperties()}_createReadOnlyProperty(t,e){this._addPropertyEffect(t,lt.READ_ONLY),e&&(this["_set"+function(t){return t[0].toUpperCase()+t.substring(1)}(t)]=function(e){this._setProperty(t,e)})}_createPropertyObserver(t,e,n){let r={property:t,method:e,dynamicFn:Boolean(n)};this._addPropertyEffect(t,lt.OBSERVE,{fn:mt,info:r,trigger:{name:t}}),n&&this._addPropertyEffect(e,lt.OBSERVE,{fn:mt,info:r,trigger:{name:e}})}_createMethodObserver(t,e){let n=Dt(t);if(!n)throw new Error("Malformed observer expression '"+t+"'");Tt(this,n,lt.OBSERVE,Pt,null,e)}_createNotifyingProperty(t){this._addPropertyEffect(t,lt.NOTIFY,{fn:vt,info:{eventName:at.camelToDashCase(t)+"-changed",property:t}})}_createReflectedProperty(t){let e=this.constructor.attributeNameForProperty(t);"-"===e[0]?console.warn("Property "+t+" cannot be reflected to attribute "+e+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(t,lt.REFLECT,{fn:_t,info:{attrName:e}})}_createComputedProperty(t,e,n){let r=Dt(e);if(!r)throw new Error("Malformed computed expression '"+e+"'");Tt(this,r,lt.COMPUTE,bt,t,n)}static addPropertyEffect(t,e,n){this.prototype._addPropertyEffect(t,e,n)}static createPropertyObserver(t,e,n){this.prototype._createPropertyObserver(t,e,n)}static createMethodObserver(t,e){this.prototype._createMethodObserver(t,e)}static createNotifyingProperty(t){this.prototype._createNotifyingProperty(t)}static createReadOnlyProperty(t,e){this.prototype._createReadOnlyProperty(t,e)}static createReflectedProperty(t){this.prototype._createReflectedProperty(t)}static createComputedProperty(t,e,n){this.prototype._createComputedProperty(t,e,n)}static bindTemplate(t){return this.prototype._bindTemplate(t)}_bindTemplate(t,e){let n=this.constructor._parseTemplate(t),r=this.__templateInfo==n;if(!r)for(let t in n.propertyEffects)this._createPropertyAccessor(t);if(e&&((n=Object.create(n)).wasPreBound=r,!r&&this.__templateInfo)){let t=this.__templateInfoLast||this.__templateInfo;return this.__templateInfoLast=t.nextTemplateInfo=n,n.previousTemplateInfo=t,n}return this.__templateInfo=n}static _addTemplatePropertyEffect(t,e,n){(t.hostProps=t.hostProps||{})[e]=!0;let r=t.propertyEffects=t.propertyEffects||{};(r[e]=r[e]||[]).push(n)}_stampTemplate(t){It.beginHosting(this);let e=super._stampTemplate(t);It.endHosting(this);let n=this._bindTemplate(t,!0);if(n.nodeList=e.nodeList,!n.wasPreBound){let t=n.childNodes=[];for(let n=e.firstChild;n;n=n.nextSibling)t.push(n)}return e.templateInfo=n,function(t,e){let{nodeList:n,nodeInfoList:r}=e;if(r.length)for(let e=0;e<r.length;e++){let o=r[e],i=n[e],a=o.bindings;if(a)for(let e=0;e<a.length;e++){let n=a[e];Nt(i,n),St(i,t,n)}i.__dataHost=t}}(this,n),this.__dataReady&&dt(this,n.propertyEffects,this.__data,null,!1,n.nodeList),e}_removeBoundDom(t){let e=t.templateInfo;e.previousTemplateInfo&&(e.previousTemplateInfo.nextTemplateInfo=e.nextTemplateInfo),e.nextTemplateInfo&&(e.nextTemplateInfo.previousTemplateInfo=e.previousTemplateInfo),this.__templateInfoLast==e&&(this.__templateInfoLast=e.previousTemplateInfo),e.previousTemplateInfo=e.nextTemplateInfo=null;let n=e.childNodes;for(let t=0;t<n.length;t++){let e=n[t];e.parentNode.removeChild(e)}}static _parseTemplateNode(t,e,n){let r=super._parseTemplateNode(t,e,n);if(t.nodeType===Node.TEXT_NODE){let o=this._parseBindings(t.textContent,e);o&&(t.textContent=At(o)||" ",wt(this,e,n,"text","textContent",o),r=!0)}return r}static _parseTemplateNodeAttribute(t,e,n,r,o){let i=this._parseBindings(o,e);if(i){let o=r,a="property";ct.test(r)?a="attribute":"$"==r[r.length-1]&&(r=r.slice(0,-1),a="attribute");let s=At(i);return s&&"attribute"==a&&t.setAttribute(r,s),"input"===t.localName&&"value"===o&&t.setAttribute(o,""),t.removeAttribute(o),"property"===a&&(r=U(r)),wt(this,e,n,a,r,i,s),!0}return super._parseTemplateNodeAttribute(t,e,n,r,o)}static _parseTemplateNestedTemplate(t,e,n){let r=super._parseTemplateNestedTemplate(t,e,n),o=n.templateInfo.hostProps;for(let t in o){wt(this,e,n,"property","_host_"+t,[{mode:"{",source:t,dependencies:[t]}])}return r}static _parseBindings(t,e){let n,r=[],o=0;for(;null!==(n=xt.exec(t));){n.index>o&&r.push({literal:t.slice(o,n.index)});let i=n[1][0],a=Boolean(n[2]),s=n[3].trim(),l=!1,c="",u=-1;"{"==i&&(u=s.indexOf("::"))>0&&(c=s.substring(u+2),s=s.substring(0,u),l=!0);let h=Dt(s),d=[];if(h){let{args:t,methodName:n}=h;for(let e=0;e<t.length;e++){let n=t[e];n.literal||d.push(n)}let r=e.dynamicFns;(r&&r[n]||h.static)&&(d.push(n),h.dynamicFn=!0)}else d.push(s);r.push({source:s,mode:i,negate:a,customEvent:l,signature:h,dependencies:d,event:c}),o=xt.lastIndex}if(o&&o<t.length){let e=t.substring(o);e&&r.push({literal:e})}return r.length?r:null}static _evaluateBinding(t,e,n,r,o,i){let a;return a=e.signature?Pt(t,n,r,0,e.signature):n!=e.source?j(t,e.source):i&&O(n)?j(t,n):t.__data[n],e.negate&&(a=!a),a}}return ut=n,n});let It={stack:[],registerHost(t){if(this.stack.length){this.stack[this.stack.length-1]._enqueueClient(t)}},beginHosting(t){this.stack.push(t)},endHosting(t){let e=this.stack.length;e&&this.stack[e-1]==t&&this.stack.pop()}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Rt=m(t=>{const e=Y(t);function n(t){const e=Object.getPrototypeOf(t);return e.prototype instanceof o?e:null}function r(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",t))){let e=null;t.hasOwnProperty(JSCompiler_renameProperty("properties",t))&&t.properties&&(e=function(t){const e={};for(let n in t){const r=t[n];e[n]="function"==typeof r?{type:r}:r}return e}(t.properties)),t.__ownProperties=e}return t.__ownProperties}class o extends e{static get observedAttributes(){const t=this._properties;return t?Object.keys(t).map(t=>this.attributeNameForProperty(t)):[]}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const t=n(this);t&&t.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){const t=r(this);t&&this.createProperties(t)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const t=n(this);this.__properties=Object.assign({},t&&t._properties,r(this))}return this.__properties}static typeForProperty(t){const e=this._properties[t];return e&&e.type}_initializeProperties(){this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return o}),Ft=m(t=>{const e=Rt(jt(t));function n(t,e,n,r){n.computed&&(n.readOnly=!0),n.computed&&!t._hasReadOnlyEffect(e)&&t._createComputedProperty(e,n.computed,r),n.readOnly&&!t._hasReadOnlyEffect(e)&&t._createReadOnlyProperty(e,!n.computed),n.reflectToAttribute&&!t._hasReflectEffect(e)&&t._createReflectedProperty(e),n.notify&&!t._hasNotifyEffect(e)&&t._createNotifyingProperty(e),n.observer&&t._createPropertyObserver(e,n.observer,r[n.observer]),t._addPropertyToAttributeMap(e)}function r(t,e,n,r){const o=e.content.querySelectorAll("style"),i=C(e),a=function(t){let e=_(t);return e?N(e):[]}(n),s=e.content.firstElementChild;for(let n=0;n<a.length;n++){let o=a[n];o.textContent=t._processStyleText(o.textContent,r),e.content.insertBefore(o,s)}let l=0;for(let e=0;e<i.length;e++){let n=i[e],a=o[l];a!==n?(n=n.cloneNode(!0),a.parentNode.insertBefore(n,a)):l++,n.textContent=t._processStyleText(n.textContent,r)}window.ShadyCSS&&window.ShadyCSS.prepareTemplate(e,n)}return class extends e{static _finalizeClass(){super._finalizeClass(),this.hasOwnProperty(JSCompiler_renameProperty("is",this))&&this.is&&function(t){Ht.push(t)}(this.prototype);const t=function(t){return t.hasOwnProperty(JSCompiler_renameProperty("__ownObservers",t))||(t.__ownObservers=t.hasOwnProperty(JSCompiler_renameProperty("observers",t))?t.observers:null),t.__ownObservers}(this);t&&this.createObservers(t,this._properties);let e=this.template;e&&("string"==typeof e?(console.error("template getter must return HTMLTemplateElement"),e=null):e=e.cloneNode(!0)),this.prototype._template=e}static createProperties(t){for(let e in t)n(this.prototype,e,t[e],t)}static createObservers(t,e){const n=this.prototype;for(let r=0;r<t.length;r++)n._createMethodObserver(t[r],e)}static get template(){return this.hasOwnProperty(JSCompiler_renameProperty("_template",this))||(this._template=P&&P.import(this.is,"template")||Object.getPrototypeOf(this.prototype).constructor.template),this._template}static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const t=this.importMeta;if(t)this._importPath=u(t.url);else{const t=P&&P.import(this.is);this._importPath=t&&t.assetpath||Object.getPrototypeOf(this.prototype).constructor.importPath}}return this._importPath}constructor(){super(),this._template,this._importPath,this.rootPath,this.importPath,this.root,this.$}_initializeProperties(){0,this.constructor.finalize(),this.constructor._finalizeTemplate(this.localName),super._initializeProperties(),this.rootPath=h,this.importPath=this.constructor.importPath;let t=function(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",t))){t.__propertyDefaults=null;let e=t._properties;for(let n in e){let r=e[n];"value"in r&&(t.__propertyDefaults=t.__propertyDefaults||{},t.__propertyDefaults[n]=r)}}return t.__propertyDefaults}(this.constructor);if(t)for(let e in t){let n=t[e];if(!this.hasOwnProperty(e)){let t="function"==typeof n.value?n.value.call(this):n.value;this._hasAccessor(e)?this._setPendingProperty(e,t,!0):this[e]=t}}}static _processStyleText(t,e){return c(t,e)}static _finalizeTemplate(t){const e=this.prototype._template;if(e&&!e.__polymerFinalized){e.__polymerFinalized=!0;const n=this.importPath;r(this,e,t,n?l(n):""),this.prototype._bindTemplate(e)}}connectedCallback(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),super.connectedCallback()}ready(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),super.ready()}_readyClients(){this._template&&(this.root=this._attachDom(this.root)),super._readyClients()}_attachDom(t){if(this.attachShadow)return t?(this.shadowRoot||this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t),this.shadowRoot):null;throw new Error("ShadowDOM not available. PolymerElement can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}updateStyles(t){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,t)}resolveUrl(t,e){return!e&&this.importPath&&(e=l(this.importPath)),l(t,e)}static _parseTemplateContent(t,e,n){return e.dynamicFns=e.dynamicFns||this._properties,super._parseTemplateContent(t,e,n)}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Ht=[];
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class Ut{constructor(t){this.value=t.toString()}toString(){return this.value}}function Bt(t){if(t instanceof Ut)return t.value;throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${t}`)}const zt=function(t,...e){const n=document.createElement("template");return n.innerHTML=e.reduce((e,n,r)=>e+function(t){if(t instanceof HTMLTemplateElement)return t.innerHTML;if(t instanceof Ut)return Bt(t);throw new Error(`non-template value passed to Polymer's html function: ${t}`)}(n)+t[r+1],t[0]),n},qt=Ft(HTMLElement);n(3);window.customElements.define("polymer3-app",class extends qt{static get template(){return zt`
      <style include="app-1 polymer3-app-styles style-element">
        :host {
          display: block;
        }
      </style>
      <h2>Hello {{prop1}}!</h2>
      <input type="text" value="{{prop1}}" />
      <div>
         😉😉😉😉😉
      </div>
      <div id="he">
        Poop
      </div>
    `}static get properties(){return{prop1:{type:String,value:"polymer3-app"}}}});window.customElements.define("app-1",class extends qt{static get template(){return zt`
      <style include="style-element style-element-2 polymer3-app-styles">
      </style>
      <p>This is a dummy JavaScript file. </p>
    `}static get properties(){return{prop1:{type:String,value:"app-1"}}}})},function(t,e){const n=document.createElement("dom-module");n.innerHTML="\n    <template>\n        <style>\n            div {\n                height:500px;\n                width:100px;\n                background-color: red;\n            }\n        </style>\n    </template>\n",n.register("style-element"),document.createElement("dom-module").innerHTML="\n    <template>\n        <style>\n            div#he {\n                height:500px;\n                width:100px;\n                background-color: yellow;\n            }\n        </style>\n    </template>\n",n.register("style-element-2")},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var l,c=[],u=!1,h=-1;function d(){u&&l&&(u=!1,l.length?c=l.concat(c):h=-1,c.length&&p())}function p(){if(!u){var t=s(d);u=!0;for(var e=c.length;e;){for(l=c,c=[];++h<e;)l&&l[h].run();h=-1,e=c.length}l=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new f(t,e)),1!==c.length||u||s(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o=1,i={},a=!1,s=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){u(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&u(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){u(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){u(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(u,0,t)},l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var a={callback:t,args:e};return i[o]=a,r(o),o++},l.clearImmediate=c}function c(t){delete i[t]}function u(t){if(a)setTimeout(u,0,t);else{var e=i[t];if(e){a=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{c(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(4))},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(5),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){
/**
@license @nocompile
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
(function(){"use strict";var n,r="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},o="undefined"!=typeof window&&window===this?this:void 0!==t&&null!=t?t:this;function i(){i=function(){},o.Symbol||(o.Symbol=s)}var a,s=function(){var t=0;return function(e){return"jscomp_symbol_"+(e||"")+t++}}();function l(){i();var t=o.Symbol.iterator;t||(t=o.Symbol.iterator=o.Symbol("iterator")),"function"!=typeof Array.prototype[t]&&r(Array.prototype,t,{configurable:!0,writable:!0,value:function(){return c(this)}}),l=function(){}}function c(t){var e=0;return function(t){return l(),(t={next:t})[o.Symbol.iterator]=function(){return this},t}(function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}})}function u(t){l();var e=t[Symbol.iterator];return e?e.call(t):c(t)}if("function"==typeof Object.setPrototypeOf)a=Object.setPrototypeOf;else{var h;t:{var d={};try{d.__proto__={Ua:!0},h=d.Ua;break t}catch(t){}h=!1}a=h?function(t,e){if(t.__proto__=e,t.__proto__!==e)throw new TypeError(t+" is not extensible");return t}:null}var p=a;function f(){this.f=!1,this.b=null,this.Da=void 0,this.a=1,this.S=0,this.c=null}function m(t){if(t.f)throw new TypeError("Generator is already running");t.f=!0}function y(t,e){t.c={Wa:e,$a:!0},t.a=t.S}function g(t,e){return t.a=3,{value:e}}function v(t,e,n,r){try{var o=e.call(t.a.b,n);if(!(o instanceof Object))throw new TypeError("Iterator result "+o+" is not an object");if(!o.done)return t.a.f=!1,o;var i=o.value}catch(e){return t.a.b=null,y(t.a,e),_(t)}return t.a.b=null,r.call(t.a,i),_(t)}function _(t){for(;t.a.a;)try{var e=t.b(t.a);if(e)return t.a.f=!1,{value:e.value,done:!1}}catch(e){t.a.Da=void 0,y(t.a,e)}if(t.a.f=!1,t.a.c){if(e=t.a.c,t.a.c=null,e.$a)throw e.Wa;return{value:e.return,done:!0}}return{value:void 0,done:!0}}function b(t){this.next=function(e){return m(t.a),t.a.b?e=v(t,t.a.b.next,e,t.a.B):(t.a.B(e),e=_(t)),e},this.throw=function(e){return m(t.a),t.a.b?e=v(t,t.a.b.throw,e,t.a.B):(y(t.a,e),e=_(t)),e},this.return=function(e){return function(t,e){m(t.a);var n=t.a.b;return n?v(t,"return"in n?n.return:function(t){return{value:t,done:!0}},e,t.a.return):(t.a.return(e),_(t))}(t,e)},l(),this[Symbol.iterator]=function(){return this}}function w(t,e){return e=new b(new function(t){this.a=new f,this.b=t}(e)),p&&p(e,t.prototype),e}f.prototype.B=function(t){this.Da=t},f.prototype.return=function(t){this.c={return:t},this.a=this.S},function(){if(!function(){var t=document.createEvent("Event");return t.initEvent("foo",!0,!0),t.preventDefault(),t.defaultPrevented}()){var t=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(t.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return!0},configurable:!0}))}}var e=/Trident/.test(navigator.userAgent);if((!window.CustomEvent||e&&"function"!=typeof window.CustomEvent)&&(window.CustomEvent=function(t,e){e=e||{};var n=document.createEvent("CustomEvent");return n.initCustomEvent(t,!!e.bubbles,!!e.cancelable,e.detail),n},window.CustomEvent.prototype=window.Event.prototype),!window.Event||e&&"function"!=typeof window.Event){var n=window.Event;if(window.Event=function(t,e){e=e||{};var n=document.createEvent("Event");return n.initEvent(t,!!e.bubbles,!!e.cancelable),n},n)for(var r in n)window.Event[r]=n[r];window.Event.prototype=n.prototype}if(!window.MouseEvent||e&&"function"!=typeof window.MouseEvent){if(e=window.MouseEvent,window.MouseEvent=function(t,e){e=e||{};var n=document.createEvent("MouseEvent");return n.initMouseEvent(t,!!e.bubbles,!!e.cancelable,e.view||window,e.detail,e.screenX,e.screenY,e.clientX,e.clientY,e.ctrlKey,e.altKey,e.shiftKey,e.metaKey,e.button,e.relatedTarget),n},e)for(r in e)window.MouseEvent[r]=e[r];window.MouseEvent.prototype=e.prototype}Array.from||(Array.from=function(t){return[].slice.call(t)}),Object.assign||(Object.assign=function(t,e){for(var n,r=[].slice.call(arguments,1),o=0;o<r.length;o++)if(n=r[o])for(var i=t,a=n,s=Object.getOwnPropertyNames(a),l=0;l<s.length;l++)i[n=s[l]]=a[n];return t})}(window.WebComponents),function(){function t(){}function e(t,e){if(!t.childNodes.length)return[];switch(t.nodeType){case Node.DOCUMENT_NODE:return m.call(t,e);case Node.DOCUMENT_FRAGMENT_NODE:return y.call(t,e);default:return f.call(t,e)}}var n="undefined"==typeof HTMLTemplateElement,r=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),o=!1;/Trident/.test(navigator.userAgent)&&function(){function t(t,e){if(t instanceof DocumentFragment)for(var r;r=t.firstChild;)n.call(this,r,e);else n.call(this,t,e);return t}o=!0;var e=Node.prototype.cloneNode;Node.prototype.cloneNode=function(t){return t=e.call(this,t),this instanceof DocumentFragment&&(t.__proto__=DocumentFragment.prototype),t},DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll,DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector,Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},configurable:!0},nodeName:{get:function(){return"#document-fragment"},configurable:!0}});var n=Node.prototype.insertBefore;Node.prototype.insertBefore=t;var r=Node.prototype.appendChild;Node.prototype.appendChild=function(e){return e instanceof DocumentFragment?t.call(this,e,null):r.call(this,e),e};var i=Node.prototype.removeChild,a=Node.prototype.replaceChild;Node.prototype.replaceChild=function(e,n){return e instanceof DocumentFragment?(t.call(this,e,n),i.call(this,n)):a.call(this,e,n),n},Document.prototype.createDocumentFragment=function(){var t=this.createElement("df");return t.__proto__=DocumentFragment.prototype,t};var s=Document.prototype.importNode;Document.prototype.importNode=function(t,e){return e=s.call(this,t,e||!1),t instanceof DocumentFragment&&(e.__proto__=DocumentFragment.prototype),e}}();var i=Node.prototype.cloneNode,a=Document.prototype.createElement,s=Document.prototype.importNode,l=Node.prototype.removeChild,c=Node.prototype.appendChild,u=Node.prototype.replaceChild,h=DOMParser.prototype.parseFromString,d=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),p=Object.getOwnPropertyDescriptor(window.Node.prototype,"childNodes"),f=Element.prototype.querySelectorAll,m=Document.prototype.querySelectorAll,y=DocumentFragment.prototype.querySelectorAll,g=function(){if(!n){var t=document.createElement("template"),e=document.createElement("template");return e.content.appendChild(document.createElement("div")),t.content.appendChild(e),0===(t=t.cloneNode(!0)).content.childNodes.length||0===t.content.firstChild.content.childNodes.length||r}}();if(n){var v=document.implementation.createHTMLDocument("template"),_=!0,b=document.createElement("style");b.textContent="template{display:none;}";var w=document.head;w.insertBefore(b,w.firstElementChild),t.prototype=Object.create(HTMLElement.prototype);var E=!document.createElement("div").hasOwnProperty("innerHTML");t.R=function(e){if(!e.content&&e.namespaceURI===document.documentElement.namespaceURI){e.content=v.createDocumentFragment();for(var n;n=e.firstChild;)c.call(e.content,n);if(E)e.__proto__=t.prototype;else if(e.cloneNode=function(e){return t.b(this,e)},_)try{N(e),S(e)}catch(t){_=!1}t.a(e.content)}};var C={option:["select"],thead:["table"],col:["colgroup","table"],tr:["tbody","table"],th:["tr","tbody","table"],td:["tr","tbody","table"]},N=function(e){Object.defineProperty(e,"innerHTML",{get:function(){return D(this)},set:function(e){var n=C[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(e)||["",""])[1].toLowerCase()];if(n)for(var r=0;r<n.length;r++)e="<"+n[r]+">"+e+"</"+n[r]+">";for(v.body.innerHTML=e,t.a(v);this.content.firstChild;)l.call(this.content,this.content.firstChild);if(e=v.body,n)for(r=0;r<n.length;r++)e=e.lastChild;for(;e.firstChild;)c.call(this.content,e.firstChild)},configurable:!0})},S=function(t){Object.defineProperty(t,"outerHTML",{get:function(){return"<template>"+this.innerHTML+"</template>"},set:function(t){if(!this.parentNode)throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");for(v.body.innerHTML=t,t=this.ownerDocument.createDocumentFragment();v.body.firstChild;)c.call(t,v.body.firstChild);u.call(this.parentNode,t,this)},configurable:!0})};N(t.prototype),S(t.prototype),t.a=function(n){for(var r,o=0,i=(n=e(n,"template")).length;o<i&&(r=n[o]);o++)t.R(r)},document.addEventListener("DOMContentLoaded",function(){t.a(document)}),Document.prototype.createElement=function(){var e=a.apply(this,arguments);return"template"===e.localName&&t.R(e),e},DOMParser.prototype.parseFromString=function(){var e=h.apply(this,arguments);return t.a(e),e},Object.defineProperty(HTMLElement.prototype,"innerHTML",{get:function(){return D(this)},set:function(e){d.set.call(this,e),t.a(this)},configurable:!0,enumerable:!0});var T=/[&\u00A0"]/g,P=/[&\u00A0<>]/g,O=function(t){switch(t){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case" ":return"&nbsp;"}},x=(b=function(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e})("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),A=b("style script xmp iframe noembed noframes plaintext noscript".split(" ")),D=function(t,e){"template"===t.localName&&(t=t.content);for(var n,r="",o=e?e(t):p.get.call(t),i=0,a=o.length;i<a&&(n=o[i]);i++){t:{var s=n,l=t,c=e;switch(s.nodeType){case Node.ELEMENT_NODE:for(var u=s.localName,h="<"+u,d=s.attributes,f=0;l=d[f];f++)h+=" "+l.name+'="'+l.value.replace(T,O)+'"';h+=">",s=x[u]?h:h+D(s,c)+"</"+u+">";break t;case Node.TEXT_NODE:s=s.data,s=l&&A[l.localName]?s:s.replace(P,O);break t;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break t;default:throw window.console.error(s),Error("not implemented")}}r+=s}return r}}if(n||g){t.b=function(t,e){var n=i.call(t,!1);return this.R&&this.R(n),e&&(c.call(n.content,i.call(t.content,!0)),M(n.content,t.content)),n};var M=function(n,r){if(r.querySelectorAll&&0!==(r=e(r,"template")).length)for(var o,i,a=0,s=(n=e(n,"template")).length;a<s;a++)i=r[a],o=n[a],t&&t.R&&t.R(i),u.call(o.parentNode,L.call(i,!0),o)},L=Node.prototype.cloneNode=function(e){if(!o&&r&&this instanceof DocumentFragment){if(!e)return this.ownerDocument.createDocumentFragment();var n=k.call(this.ownerDocument,this,!0)}else n=this.nodeType===Node.ELEMENT_NODE&&"template"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?t.b(this,e):i.call(this,e);return e&&M(n,this),n},k=Document.prototype.importNode=function(n,r){if(r=r||!1,"template"===n.localName)return t.b(n,r);var o=s.call(this,n,r);if(r){M(o,n),n=e(o,'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');for(var i,l=0;l<n.length;l++){i=n[l],(r=a.call(document,"script")).textContent=i.textContent;for(var c,h=i.attributes,d=0;d<h.length;d++)c=h[d],r.setAttribute(c.name,c.value);u.call(i.parentNode,r,i)}}return o}}n&&(window.HTMLTemplateElement=t)}();var E=setTimeout;function C(){}function N(t){if(!(this instanceof N))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this.J=0,this.Aa=!1,this.A=void 0,this.V=[],x(t,this)}function S(t,e){for(;3===t.J;)t=t.A;0===t.J?t.V.push(e):(t.Aa=!0,N.a(function(){var n=1===t.J?e.bb:e.cb;if(null===n)(1===t.J?T:P)(e.va,t.A);else{try{var r=n(t.A)}catch(t){return void P(e.va,t)}T(e.va,r)}}))}function T(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof N)return t.J=3,t.A=e,void O(t);if("function"==typeof n)return void x(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t.J=1,t.A=e,O(t)}catch(e){P(t,e)}}function P(t,e){t.J=2,t.A=e,O(t)}function O(t){2===t.J&&0===t.V.length&&N.a(function(){t.Aa||N.b(t.A)});for(var e=0,n=t.V.length;e<n;e++)S(t,t.V[e]);t.V=null}function x(t,e){var n=!1;try{t(function(t){n||(n=!0,T(e,t))},function(t){n||(n=!0,P(e,t))})}catch(t){n||(n=!0,P(e,t))}}if(N.prototype.catch=function(t){return this.then(null,t)},N.prototype.then=function(t,e){var n=new this.constructor(C);return S(this,new function(t,e,n){this.bb="function"==typeof t?t:null,this.cb="function"==typeof e?e:null,this.va=n}(t,e,n)),n},N.prototype.finally=function(t){var e=this.constructor;return this.then(function(n){return e.resolve(t()).then(function(){return n})},function(n){return e.resolve(t()).then(function(){return e.reject(n)})})},N.c=function(t){return new N(function(e,n){function r(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(e){r(t,e)},n)}o[t]=a,0==--i&&e(o)}catch(t){n(t)}}if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var o=Array.prototype.slice.call(t);if(0===o.length)return e([]);for(var i=o.length,a=0;a<o.length;a++)r(a,o[a])})},N.resolve=function(t){return t&&"object"==typeof t&&t.constructor===N?t:new N(function(e){e(t)})},N.reject=function(t){return new N(function(e,n){n(t)})},N.f=function(t){return new N(function(e,n){for(var r=0,o=t.length;r<o;r++)t[r].then(e,n)})},N.a="function"==typeof e&&function(t){e(t)}||function(t){E(t,0)},N.b=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},!window.Promise&&(window.Promise=N,N.prototype.then=N.prototype.then,N.all=N.c,N.race=N.f,N.resolve=N.resolve,N.reject=N.reject,!window.setImmediate)){var A=document.createTextNode(""),D=[];new MutationObserver(function(){for(var t=D.length,e=0;e<t;e++)D[e]();D.splice(0,t)}).observe(A,{characterData:!0}),N.a=function(t){D.push(t),A.textContent=0<A.textContent.length?"":"a"}}var M={},L=Object.create,k=Object.defineProperties,j=Object.defineProperty;function I(t,e){return{value:t,configurable:!!(e=void 0===e?{}:e).Ba,writable:!!e.kb,enumerable:!!e.e}}var R=void 0;try{R=1===j({},"y",{get:function(){return 1}}).y}catch(t){R=!1}var F={};var H=L(null);function U(t){if(this instanceof U)throw new TypeError("Symbol is not a constructor");var e=function(t){t=String(t);for(var e="",n=0;F[t+e];)e=n+=1;F[t+e]=1;var r="Symbol("+t+e+")";return R&&j(Object.prototype,r,{get:void 0,set:function(t){j(this,r,I(t,{Ba:!0,kb:!0}))},configurable:!0,enumerable:!1}),r}(t=void 0===t?"":String(t));return R?L(H,{xa:I(t),Na:I(e)}):e}k(U,{for:I(function(t){if(t=String(t),M[t])return M[t];var e=U(t);return M[t]=e}),keyFor:I(function(t){if(R&&(!t||"Symbol"!==t[U.toStringTag]))throw new TypeError(t+" is not a symbol");for(var e in M)if(M[e]===t)return R?M[e].xa:M[e].substr(7,M[e].length-8)})}),k(U,{Bb:I(U("hasInstance")),Cb:I(U("isConcatSpreadable")),iterator:I(U("iterator")),match:I(U("match")),replace:I(U("replace")),search:I(U("search")),Eb:I(U("species")),split:I(U("split")),Fb:I(U("toPrimitive")),toStringTag:I(U("toStringTag")),unscopables:I(U("unscopables"))}),k(H,{constructor:I(U),toString:I(function(){return this.Na}),valueOf:I(function(){return"Symbol("+this.xa+")"})}),R&&j(H,U.toStringTag,I("Symbol",{Ba:!0}));var B="function"==typeof Symbol?Symbol:U;if(!window.Symbol){window.Symbol=B;var z=window.Symbol.iterator;Array.prototype[z]=function t(){var e,n=this;return w(t,function(t){if(1==t.a&&(e=0),3!=t.a)return e<n.length?t=g(t,n[e]):(t.a=0,t=void 0),t;e++,t.a=2})},Set.prototype[z]=function t(){var e,n,r=this;return w(t,function(t){if(1==t.a&&(e=[],r.forEach(function(t){e.push(t)}),n=0),3!=t.a)return n<e.length?t=g(t,e[n]):(t.a=0,t=void 0),t;n++,t.a=2})},Map.prototype[z]=function t(){var e,n,r=this;return w(t,function(t){if(1==t.a&&(e=[],r.forEach(function(t,n){e.push([n,t])}),n=0),3!=t.a)return n<e.length?t=g(t,e[n]):(t.a=0,t=void 0),t;n++,t.a=2})},String.prototype[z]=function t(){var e,n=this;return w(t,function(t){if(1==t.a&&(e=0),3!=t.a)return e<n.length?t=g(t,n[e]):(t.a=0,t=void 0),t;e++,t.a=2})}}window.WebComponents=window.WebComponents||{flags:{}};var q=document.querySelector('script[src*="webcomponents-bundle"]'),V=/wc-(.+)/,W={};if(!W.noOpts){if(location.search.slice(1).split("&").forEach(function(t){var e;(t=t.split("="))[0]&&(e=t[0].match(V))&&(W[e[1]]=t[1]||!0)}),q)for(var G,$=0;G=q.attributes[$];$++)"src"!==G.name&&(W[G.name]=G.value||!0);if(W.log&&W.log.split){var Y=W.log.split(",");W.log={},Y.forEach(function(t){W.log[t]=!0})}else W.log={}}window.WebComponents.flags=W;var J=W.shadydom;J&&(window.ShadyDOM=window.ShadyDOM||{},window.ShadyDOM.force=J);var X=W.register||W.ce;function K(){this.Fa=this.root=null,this.fa=!1,this.N=this.ba=this.qa=this.assignedSlot=this.assignedNodes=this.T=null,this.childNodes=this.nextSibling=this.previousSibling=this.lastChild=this.firstChild=this.parentNode=this.W=void 0,this.Ja=this.ya=!1,this.$={}}function Z(t){return t.la||(t.la=new K),t.la}function Q(t){return t&&t.la}X&&window.customElements&&(window.customElements.forcePolyfill=X),K.prototype.toJSON=function(){return{}};var tt=window.ShadyDOM||{};tt.Ya=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var et=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild");tt.K=!!(et&&et.configurable&&et.get),tt.ta=tt.force||!tt.Ya;var nt=navigator.userAgent.match("Trident"),rt=navigator.userAgent.match("Edge");function ot(t){return(t=Q(t))&&void 0!==t.firstChild}function it(t){return"ShadyRoot"===t.Qa}function at(t){if(it(t=t.getRootNode()))return t}void 0===tt.Ha&&(tt.Ha=tt.K&&(nt||rt));var st=Element.prototype,lt=st.matches||st.matchesSelector||st.mozMatchesSelector||st.msMatchesSelector||st.oMatchesSelector||st.webkitMatchesSelector;function ct(t,e){if(t&&e)for(var n,r=Object.getOwnPropertyNames(e),o=0;o<r.length&&(n=r[o]);o++){var i=n,a=t,s=Object.getOwnPropertyDescriptor(e,i);s&&Object.defineProperty(a,i,s)}}function ut(t,e){for(var n=[],r=1;r<arguments.length;++r)n[r-1]=arguments[r];for(r=0;r<n.length;r++)ct(t,n[r]);return t}var ht=document.createTextNode(""),dt=0,pt=[];function ft(t){pt.push(t),ht.textContent=dt++}new MutationObserver(function(){for(;pt.length;)try{pt.shift()()}catch(t){throw ht.textContent=dt++,t}}).observe(ht,{characterData:!0});var mt=!!document.contains;function yt(t,e){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function gt(t){for(var e=t.length-1;0<=e;e--){var n=t[e],r=n.getAttribute("id")||n.getAttribute("name");r&&"length"!==r&&isNaN(r)&&(t[r]=n)}return t.item=function(e){return t[e]},t.namedItem=function(e){if("length"!==e&&isNaN(e)&&t[e])return t[e];for(var n=u(t),r=n.next();!r.done;r=n.next())if(((r=r.value).getAttribute("id")||r.getAttribute("name"))==e)return r;return null},t}var vt,_t=[];function bt(t){vt||(vt=!0,ft(wt)),_t.push(t)}function wt(){vt=!1;for(var t=!!_t.length;_t.length;)_t.shift()();return t}function Et(){this.a=!1,this.addedNodes=[],this.removedNodes=[],this.ea=new Set}wt.list=_t,Et.prototype.flush=function(){if(this.a){this.a=!1;var t=this.takeRecords();t.length&&this.ea.forEach(function(e){e(t)})}},Et.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var t=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];return this.addedNodes=[],this.removedNodes=[],t}return[]};var Ct=Element.prototype.insertBefore,Nt=Element.prototype.replaceChild,St=Element.prototype.removeChild,Tt=Element.prototype.setAttribute,Pt=Element.prototype.removeAttribute,Ot=Element.prototype.cloneNode,xt=Document.prototype.importNode,At=Element.prototype.addEventListener,Dt=Element.prototype.removeEventListener,Mt=Window.prototype.addEventListener,Lt=Window.prototype.removeEventListener,kt=Element.prototype.dispatchEvent,jt=Node.prototype.contains||HTMLElement.prototype.contains,It=Document.prototype.getElementById,Rt=Element.prototype.querySelector,Ft=DocumentFragment.prototype.querySelector,Ht=Document.prototype.querySelector,Ut=Element.prototype.querySelectorAll,Bt=DocumentFragment.prototype.querySelectorAll,zt=Document.prototype.querySelectorAll,qt={};qt.appendChild=Element.prototype.appendChild,qt.insertBefore=Ct,qt.replaceChild=Nt,qt.removeChild=St,qt.setAttribute=Tt,qt.removeAttribute=Pt,qt.cloneNode=Ot,qt.importNode=xt,qt.addEventListener=At,qt.removeEventListener=Dt,qt.lb=Mt,qt.mb=Lt,qt.dispatchEvent=kt,qt.contains=jt,qt.getElementById=It,qt.vb=Rt,qt.zb=Ft,qt.tb=Ht,qt.querySelector=function(t){switch(this.nodeType){case Node.ELEMENT_NODE:return Rt.call(this,t);case Node.DOCUMENT_NODE:return Ht.call(this,t);default:return Ft.call(this,t)}},qt.wb=Ut,qt.Ab=Bt,qt.ub=zt,qt.querySelectorAll=function(t){switch(this.nodeType){case Node.ELEMENT_NODE:return Ut.call(this,t);case Node.DOCUMENT_NODE:return zt.call(this,t);default:return Bt.call(this,t)}};var Vt=/[&\u00A0"]/g,Wt=/[&\u00A0<>]/g;function Gt(t){switch(t){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case" ":return"&nbsp;"}}function $t(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e}var Yt=$t("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),Jt=$t("style script xmp iframe noembed noframes plaintext noscript".split(" "));function Xt(t,e){"template"===t.localName&&(t=t.content);for(var n,r="",o=e?e(t):t.childNodes,i=0,a=o.length;i<a&&(n=o[i]);i++){t:{var s=n,l=t,c=e;switch(s.nodeType){case Node.ELEMENT_NODE:for(var u=s.localName,h="<"+u,d=s.attributes,p=0;l=d[p];p++)h+=" "+l.name+'="'+l.value.replace(Vt,Gt)+'"';h+=">",s=Yt[u]?h:h+Xt(s,c)+"</"+u+">";break t;case Node.TEXT_NODE:s=s.data,s=l&&Jt[l.localName]?s:s.replace(Wt,Gt);break t;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break t;default:throw window.console.error(s),Error("not implemented")}}r+=s}return r}var Kt=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),Zt=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1);function Qt(t){var e=[];for(Kt.currentNode=t,t=Kt.firstChild();t;)e.push(t),t=Kt.nextSibling();return e}var te={parentNode:function(t){return Kt.currentNode=t,Kt.parentNode()},firstChild:function(t){return Kt.currentNode=t,Kt.firstChild()},lastChild:function(t){return Kt.currentNode=t,Kt.lastChild()},previousSibling:function(t){return Kt.currentNode=t,Kt.previousSibling()},nextSibling:function(t){return Kt.currentNode=t,Kt.nextSibling()}};te.childNodes=Qt,te.parentElement=function(t){return Zt.currentNode=t,Zt.parentNode()},te.firstElementChild=function(t){return Zt.currentNode=t,Zt.firstChild()},te.lastElementChild=function(t){return Zt.currentNode=t,Zt.lastChild()},te.previousElementSibling=function(t){return Zt.currentNode=t,Zt.previousSibling()},te.nextElementSibling=function(t){return Zt.currentNode=t,Zt.nextSibling()},te.children=function(t){var e=[];for(Zt.currentNode=t,t=Zt.firstChild();t;)e.push(t),t=Zt.nextSibling();return gt(e)},te.innerHTML=function(t){return Xt(t,function(t){return Qt(t)})},te.textContent=function(t){switch(t.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:t=document.createTreeWalker(t,NodeFilter.SHOW_TEXT,null,!1);for(var e,n="";e=t.nextNode();)n+=e.nodeValue;return n;default:return t.nodeValue}};var ee=tt.K,ne=[Node.prototype,Element.prototype,HTMLElement.prototype];function re(t){var e;t:{for(e=0;e<ne.length;e++){var n=ne[e];if(n.hasOwnProperty(t)){e=n;break t}}e=void 0}if(!e)throw Error("Could not find descriptor for "+t);return Object.getOwnPropertyDescriptor(e,t)}var oe=ee?{parentNode:re("parentNode"),firstChild:re("firstChild"),lastChild:re("lastChild"),previousSibling:re("previousSibling"),nextSibling:re("nextSibling"),childNodes:re("childNodes"),parentElement:re("parentElement"),previousElementSibling:re("previousElementSibling"),nextElementSibling:re("nextElementSibling"),innerHTML:re("innerHTML"),textContent:re("textContent"),firstElementChild:re("firstElementChild"),lastElementChild:re("lastElementChild"),children:re("children")}:{},ie=ee?{firstElementChild:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"firstElementChild"),lastElementChild:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"lastElementChild"),children:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"children")}:{},ae=ee?{firstElementChild:Object.getOwnPropertyDescriptor(Document.prototype,"firstElementChild"),lastElementChild:Object.getOwnPropertyDescriptor(Document.prototype,"lastElementChild"),children:Object.getOwnPropertyDescriptor(Document.prototype,"children")}:{},se={Ea:oe,yb:ie,sb:ae,parentNode:function(t){return oe.parentNode.get.call(t)},firstChild:function(t){return oe.firstChild.get.call(t)},lastChild:function(t){return oe.lastChild.get.call(t)},previousSibling:function(t){return oe.previousSibling.get.call(t)},nextSibling:function(t){return oe.nextSibling.get.call(t)},childNodes:function(t){return Array.prototype.slice.call(oe.childNodes.get.call(t))},parentElement:function(t){return oe.parentElement.get.call(t)},previousElementSibling:function(t){return oe.previousElementSibling.get.call(t)},nextElementSibling:function(t){return oe.nextElementSibling.get.call(t)},innerHTML:function(t){return oe.innerHTML.get.call(t)},textContent:function(t){return oe.textContent.get.call(t)},children:function(t){switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return ie.children.get.call(t);case Node.DOCUMENT_NODE:return ae.children.get.call(t);default:return oe.children.get.call(t)}},firstElementChild:function(t){switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return ie.firstElementChild.get.call(t);case Node.DOCUMENT_NODE:return ae.firstElementChild.get.call(t);default:return oe.firstElementChild.get.call(t)}},lastElementChild:function(t){switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return ie.lastElementChild.get.call(t);case Node.DOCUMENT_NODE:return ae.lastElementChild.get.call(t);default:return oe.lastElementChild.get.call(t)}}},le=tt.Ha?se:te;function ce(t){for(;t.firstChild;)t.removeChild(t.firstChild)}var ue=tt.K,he=document.implementation.createHTMLDocument("inert"),de=Object.getOwnPropertyDescriptor(Node.prototype,"isConnected"),pe=de&&de.get,fe=Object.getOwnPropertyDescriptor(Document.prototype,"activeElement"),me={parentElement:{get:function(){var t=Q(this);return(t=t&&t.parentNode)&&t.nodeType!==Node.ELEMENT_NODE&&(t=null),void 0!==t?t:le.parentElement(this)},configurable:!0},parentNode:{get:function(){var t=Q(this);return void 0!==(t=t&&t.parentNode)?t:le.parentNode(this)},configurable:!0},nextSibling:{get:function(){var t=Q(this);return void 0!==(t=t&&t.nextSibling)?t:le.nextSibling(this)},configurable:!0},previousSibling:{get:function(){var t=Q(this);return void 0!==(t=t&&t.previousSibling)?t:le.previousSibling(this)},configurable:!0},nextElementSibling:{get:function(){var t=Q(this);if(t&&void 0!==t.nextSibling){for(t=this.nextSibling;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.nextSibling;return t}return le.nextElementSibling(this)},configurable:!0},previousElementSibling:{get:function(){var t=Q(this);if(t&&void 0!==t.previousSibling){for(t=this.previousSibling;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.previousSibling;return t}return le.previousElementSibling(this)},configurable:!0}},ye={className:{get:function(){return this.getAttribute("class")||""},set:function(t){this.setAttribute("class",t)},configurable:!0}},ge={childNodes:{get:function(){if(ot(this)){var t=Q(this);if(!t.childNodes){t.childNodes=[];for(var e=this.firstChild;e;e=e.nextSibling)t.childNodes.push(e)}var n=t.childNodes}else n=le.childNodes(this);return n.item=function(t){return n[t]},n},configurable:!0},childElementCount:{get:function(){return this.children.length},configurable:!0},firstChild:{get:function(){var t=Q(this);return void 0!==(t=t&&t.firstChild)?t:le.firstChild(this)},configurable:!0},lastChild:{get:function(){var t=Q(this);return void 0!==(t=t&&t.lastChild)?t:le.lastChild(this)},configurable:!0},textContent:{get:function(){if(ot(this)){for(var t,e=[],n=0,r=this.childNodes;t=r[n];n++)t.nodeType!==Node.COMMENT_NODE&&e.push(t.textContent);return e.join("")}return le.textContent(this)},set:function(t){switch(void 0!==t&&null!==t||(t=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!ot(this)&&ue){var e=this.firstChild;(e!=this.lastChild||e&&e.nodeType!=Node.TEXT_NODE)&&ce(this),se.Ea.textContent.set.call(this,t)}else ce(this),(0<t.length||this.nodeType===Node.ELEMENT_NODE)&&this.appendChild(document.createTextNode(t));break;default:this.nodeValue=t}},configurable:!0},firstElementChild:{get:function(){var t=Q(this);if(t&&void 0!==t.firstChild){for(t=this.firstChild;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.nextSibling;return t}return le.firstElementChild(this)},configurable:!0},lastElementChild:{get:function(){var t=Q(this);if(t&&void 0!==t.lastChild){for(t=this.lastChild;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.previousSibling;return t}return le.lastElementChild(this)},configurable:!0},children:{get:function(){return ot(this)?gt(Array.prototype.filter.call(this.childNodes,function(t){return t.nodeType===Node.ELEMENT_NODE})):le.children(this)},configurable:!0},innerHTML:{get:function(){return ot(this)?Xt("template"===this.localName?this.content:this):le.innerHTML(this)},set:function(t){var e="template"===this.localName?this.content:this;ce(e);var n=this.localName||"div";for(n=this.namespaceURI&&this.namespaceURI!==he.namespaceURI?he.createElementNS(this.namespaceURI,n):he.createElement(n),ue?se.Ea.innerHTML.set.call(n,t):n.innerHTML=t,t="template"===this.localName?n.content:n;t.firstChild;)e.appendChild(t.firstChild)},configurable:!0}},ve={shadowRoot:{get:function(){var t=Q(this);return t&&t.Fa||null},configurable:!0}},_e={activeElement:{get:function(){var t=fe&&fe.get?fe.get.call(document):tt.K?void 0:document.activeElement;if(t&&t.nodeType){var e=!!it(this);if(this===document||e&&this.host!==t&&qt.contains.call(this.host,t)){for(e=at(t);e&&e!==this;)e=at(t=e.host);t=this===document?e?null:t:e===this?t:null}else t=null}else t=null;return t},set:function(){},configurable:!0}};function be(t,e,n){for(var r in e){var o=Object.getOwnPropertyDescriptor(t,r);o&&o.configurable||!o&&n?Object.defineProperty(t,r,e[r]):n&&console.warn("Could not define",r,"on",t)}}function we(t){be(t,me),be(t,ye),be(t,ge),be(t,_e)}var Ee=tt.K?function(){}:function(t){var e=Z(t);e.ya||(e.ya=!0,be(t,me,!0),be(t,ye,!0))},Ce=tt.K?function(){}:function(t){Z(t).Ja||(be(t,ge,!0),be(t,ve,!0))},Ne=le.childNodes;function Se(t,e,n){Ee(t),n=n||null;var r=Z(t),o=Z(e),i=n?Z(n):null;r.previousSibling=n?i.previousSibling:e.lastChild,(i=Q(r.previousSibling))&&(i.nextSibling=t),(i=Q(r.nextSibling=n))&&(i.previousSibling=t),r.parentNode=e,n?n===o.firstChild&&(o.firstChild=t):(o.lastChild=t,o.firstChild||(o.firstChild=t)),o.childNodes=null}function Te(t){var e=Z(t);if(void 0===e.firstChild){e.childNodes=null;var n=Ne(t);for(e.firstChild=n[0]||null,e.lastChild=n[n.length-1]||null,Ce(t),e=0;e<n.length;e++){var r=n[e],o=Z(r);o.parentNode=t,o.nextSibling=n[e+1]||null,o.previousSibling=n[e-1]||null,Ee(r)}}}var Pe=le.parentNode;function Oe(t,e,n){if(e===t)throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");if(n){var r=Q(n);if(void 0!==(r=r&&r.parentNode)&&r!==t||void 0===r&&Pe(n)!==t)throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.")}if(n===e)return e;var o,i;if(e.parentNode&&xe(e.parentNode,e),!e.__noInsertionPoint){var a;if(i=o=at(t))"slot"===e.localName?a=[e]:e.querySelectorAll&&(a=e.querySelectorAll("slot")),i=a&&a.length?a:void 0;i&&(r=i,(a=o).a=a.a||[],a.m=a.m||[],a.v=a.v||{},a.a.push.apply(a.a,r instanceof Array?r:function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(u(r))))}if(("slot"===t.localName||i)&&(o=o||at(t))&&dn(o),ot(t)){if(o=n,Ce(t),void 0!==(i=Z(t)).firstChild&&(i.childNodes=null),e.nodeType===Node.DOCUMENT_FRAGMENT_NODE){for(i=e.childNodes,a=0;a<i.length;a++)Se(i[a],t,o);i=void 0!==(o=Z(e)).firstChild?null:void 0,o.firstChild=o.lastChild=i,o.childNodes=i}else Se(e,t,o);if(o=Q(t),Ae(t)){dn(o.root);var s=!0}else o.root&&(s=!0)}return s||(s=it(t)?t.host:t,n?(n=function t(e){var n=e;e&&"slot"===e.localName&&(n=(n=(n=Q(e))&&n.N)&&n.length?n[0]:t(e.nextSibling));return n}(n),qt.insertBefore.call(s,e,n)):qt.appendChild.call(s,e)),Me(t,e),e}function xe(t,e){if(e.parentNode!==t)throw Error("The node to be removed is not a child of this node: "+e);var n=at(e),r=Q(t);if(ot(t)){var o=Z(e),i=Z(t);e===i.firstChild&&(i.firstChild=o.nextSibling),e===i.lastChild&&(i.lastChild=o.previousSibling);var a=o.previousSibling,s=o.nextSibling;if(a&&(Z(a).nextSibling=s),s&&(Z(s).previousSibling=a),o.parentNode=o.previousSibling=o.nextSibling=void 0,void 0!==i.childNodes&&(i.childNodes=null),Ae(t)){dn(r.root);var l=!0}}if(function t(e){var n=Q(e);if(n&&void 0!==n.W)for(var r,o=0,i=(n=e.childNodes).length;o<i&&(r=n[o]);o++)t(r);(e=Q(e))&&(e.W=void 0)}(e),n){if((o=t&&"slot"===t.localName)&&(l=!0),n.m){for(f in gn(n),i=n.v)for(a=i[f],s=0;s<a.length;s++){var c=a[s];if(yt(e,c)){a.splice(s,1);var u=n.m.indexOf(c);if(0<=u&&n.m.splice(u,1),s--,c=(u=Q(c)).N)for(var h=0;h<c.length;h++){var d=c[h],p=an(d);p&&qt.removeChild.call(p,d)}u.N=[],u.assignedNodes=[],u=!0}}var f=u}else f=void 0;(f||o)&&dn(n)}return l||(l=it(t)?t.host:t,(!r.root&&"slot"!==e.localName||l===Pe(e))&&qt.removeChild.call(l,e)),Me(t,null,e),e}function Ae(t){return(t=(t=Q(t))&&t.root)&&bn(t)}function De(t,e){if("slot"===e)Ae(t=t.parentNode)&&dn(Q(t).root);else if("slot"===t.localName&&"name"===e&&(e=at(t))){if(e.m){var n=t.Ma,r=vn(t);if(r!==n){var o=(n=e.v[n]).indexOf(t);0<=o&&n.splice(o,1),(n=e.v[r]||(e.v[r]=[])).push(t),1<n.length&&(e.v[r]=_n(n))}}dn(e)}}function Me(t,e,n){(t=(t=Q(t))&&t.T)&&(e&&t.addedNodes.push(e),n&&t.removedNodes.push(n),function(t){t.a||(t.a=!0,ft(function(){t.flush()}))}(t))}function Le(t,e,n){var r=[];return function t(e,n,r,o){for(var i,a=0,s=e.length;a<s&&(i=e[a]);a++){var l;if(l=i.nodeType===Node.ELEMENT_NODE){var c=n,u=r,h=o,d=c(l=i);d&&h.push(l),u&&u(d)?l=d:(t(l.childNodes,c,u,h),l=void 0)}if(l)break}}(t.childNodes,e,n,r),r}var ke=null;function je(t,e,n){ke||(ke=window.ShadyCSS&&window.ShadyCSS.ScopingShim),ke&&"class"===e?ke.setElementClass(t,n):(qt.setAttribute.call(t,e,n),De(t,e))}var Ie="__eventWrappers"+Date.now(),Re=function(){var t=Object.getOwnPropertyDescriptor(Event.prototype,"composed");return t?function(e){return t.get.call(e)}:null}(),Fe={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},He={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};function Ue(t,e){var n=[],r=t;for(t=t===window?window:t.getRootNode();r;)n.push(r),r=r.assignedSlot?r.assignedSlot:r.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&r.host&&(e||r!==t)?r.host:r.parentNode;return n[n.length-1]===document&&n.push(window),n}function Be(t,e){if(!it)return t;t=Ue(t,!0);for(var n,r,o,i,a=0;a<e.length;a++)if((o=(n=e[a])===window?window:n.getRootNode())!==r&&(i=t.indexOf(o),r=o),!it(o)||-1<i)return n}var ze={get composed(){return void 0===this.Z&&(Re?this.Z=Re(this):!1!==this.isTrusted&&(this.Z=Fe[this.type])),this.Z||!1},composedPath:function(){return this.wa||(this.wa=Ue(this.__target,this.composed)),this.wa},get target(){return Be(this.currentTarget,this.composedPath())},get relatedTarget(){return this.ka?(this.za||(this.za=Ue(this.ka,!0)),Be(this.currentTarget,this.za)):null},stopPropagation:function(){Event.prototype.stopPropagation.call(this),this.ja=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this),this.ja=this.Ia=!0}};function qe(t){function e(e,n){return(e=new t(e,n)).Z=n&&!!n.composed,e}return function(t,e){for(var n in e)t[n]=e[n]}(e,t),e.prototype=t.prototype,e}var Ve={focus:!0,blur:!0};function We(t){return t.__target!==t.target||t.ka!==t.relatedTarget}function Ge(t,e,n){if(n=e.__handlers&&e.__handlers[t.type]&&e.__handlers[t.type][n])for(var r,o=0;(r=n[o])&&(!We(t)||t.target!==t.relatedTarget)&&(r.call(e,t),!t.Ia);o++);}function $e(t){var e,n=t.composedPath();Object.defineProperty(t,"currentTarget",{get:function(){return o},configurable:!0});for(var r=n.length-1;0<=r;r--){var o=n[r];if(Ge(t,o,"capture"),t.ja)return}for(Object.defineProperty(t,"eventPhase",{get:function(){return Event.AT_TARGET}}),r=0;r<n.length;r++){var i=Q(o=n[r]);if(i=i&&i.root,(0===r||i&&i===e)&&(Ge(t,o,"bubble"),o!==window&&(e=o.getRootNode()),t.ja))break}}function Ye(t,e,n,r,o,i){for(var a=0;a<t.length;a++){var s=t[a],l=s.type,c=s.capture,u=s.once,h=s.passive;if(e===s.node&&n===l&&r===c&&o===u&&i===h)return a}return-1}function Je(t,e,n){if(e){var r=typeof e;if(("function"===r||"object"===r)&&("object"!==r||e.handleEvent&&"function"==typeof e.handleEvent)){var o=this instanceof Window?qt.lb:qt.addEventListener;if(He[t])return o.call(this,t,e,n);if(n&&"object"==typeof n)var i=!!n.capture,a=!!n.once,s=!!n.passive;else i=!!n,s=a=!1;var l=n&&n.ma||this,c=e[Ie];if(c){if(-1<Ye(c,l,t,i,a,s))return}else e[Ie]=[];c=function(o){if(a&&this.removeEventListener(t,e,n),o.__target||Ke(o),l!==this){var i=Object.getOwnPropertyDescriptor(o,"currentTarget");Object.defineProperty(o,"currentTarget",{get:function(){return l},configurable:!0})}if((!it(l)||-1!=o.composedPath().indexOf(l))&&(o.composed||-1<o.composedPath().indexOf(l)))if(We(o)&&o.target===o.relatedTarget)o.eventPhase===Event.BUBBLING_PHASE&&o.stopImmediatePropagation();else if(o.eventPhase===Event.CAPTURING_PHASE||o.bubbles||o.target===l||l instanceof Window){var s="function"===r?e.call(l,o):e.handleEvent&&e.handleEvent(o);return l!==this&&(i?(Object.defineProperty(o,"currentTarget",i),i=null):delete o.currentTarget),s}},e[Ie].push({node:l,type:t,capture:i,once:a,passive:s,nb:c}),Ve[t]?(this.__handlers=this.__handlers||{},this.__handlers[t]=this.__handlers[t]||{capture:[],bubble:[]},this.__handlers[t][i?"capture":"bubble"].push(c)):o.call(this,t,c,n)}}}function Xe(t,e,n){if(e){var r=this instanceof Window?qt.mb:qt.removeEventListener;if(He[t])return r.call(this,t,e,n);if(n&&"object"==typeof n)var o=!!n.capture,i=!!n.once,a=!!n.passive;else o=!!n,a=i=!1;var s=n&&n.ma||this,l=void 0,c=null;try{c=e[Ie]}catch(t){}c&&(-1<(i=Ye(c,s,t,o,i,a))&&(l=c.splice(i,1)[0].nb,c.length||(e[Ie]=void 0))),r.call(this,t,l||e,n),l&&Ve[t]&&this.__handlers&&this.__handlers[t]&&(-1<(l=(t=this.__handlers[t][o?"capture":"bubble"]).indexOf(l))&&t.splice(l,1))}}function Ke(t){if(t.__target=t.target,t.ka=t.relatedTarget,tt.K){var e=Object.getPrototypeOf(t);if(!e.hasOwnProperty("__patchProto")){var n=Object.create(e);n.pb=e,ct(n,ze),e.__patchProto=n}t.__proto__=e.__patchProto}else ct(t,ze)}var Ze=qe(window.Event),Qe=qe(window.CustomEvent),tn=qe(window.MouseEvent);function en(t,e){return{index:t,X:[],da:e}}function nn(t,e,n,r){var o=0,i=0,a=0,s=0,l=Math.min(e-o,r-i);if(0==o&&0==i)t:{for(a=0;a<l;a++)if(t[a]!==n[a])break t;a=l}if(e==t.length&&r==n.length){s=t.length;for(var c=n.length,u=0;u<l-a&&rn(t[--s],n[--c]);)u++;s=u}if(i+=a,r-=s,0==(e-=s)-(o+=a)&&0==r-i)return[];if(o==e){for(e=en(o,0);i<r;)e.X.push(n[i++]);return[e]}if(i==r)return[en(o,e-o)];for(r=r-(a=i)+1,s=e-(l=o)+1,e=Array(r),c=0;c<r;c++)e[c]=Array(s),e[c][0]=c;for(c=0;c<s;c++)e[0][c]=c;for(c=1;c<r;c++)for(u=1;u<s;u++)if(t[l+u-1]===n[a+c-1])e[c][u]=e[c-1][u-1];else{var h=e[c-1][u]+1,d=e[c][u-1]+1;e[c][u]=h<d?h:d}for(l=e.length-1,a=e[0].length-1,r=e[l][a],t=[];0<l||0<a;)0==l?(t.push(2),a--):0==a?(t.push(3),l--):(s=e[l-1][a-1],(h=(c=e[l-1][a])<(u=e[l][a-1])?c<s?c:s:u<s?u:s)==s?(s==r?t.push(0):(t.push(1),r=s),l--,a--):h==c?(t.push(3),l--,r=c):(t.push(2),a--,r=u));for(t.reverse(),e=void 0,l=[],a=0;a<t.length;a++)switch(t[a]){case 0:e&&(l.push(e),e=void 0),o++,i++;break;case 1:e||(e=en(o,0)),e.da++,o++,e.X.push(n[i]),i++;break;case 2:e||(e=en(o,0)),e.da++,o++;break;case 3:e||(e=en(o,0)),e.X.push(n[i]),i++}return e&&l.push(e),l}function rn(t,e){return t===e}var on,an=le.parentNode,sn=le.childNodes,ln={},cn=tt.deferConnectionCallbacks&&"loading"===document.readyState;function un(t){var e=[];do{e.unshift(t)}while(t=t.parentNode);return e}function hn(t,e,n){if(t!==ln)throw new TypeError("Illegal constructor");this.Qa="ShadyRoot",this.host=e,this.c=n&&n.mode,Te(e),(t=Z(e)).root=this,t.Fa="closed"!==this.c?this:null,(t=Z(this)).firstChild=t.lastChild=t.parentNode=t.nextSibling=t.previousSibling=null,t.childNodes=[],this.b=this.ca=!1,this.a=this.v=this.m=null,dn(this)}function dn(t){t.ca||(t.ca=!0,bt(function(){return pn(t)}))}function pn(t){for(var e;t;){t.ca&&(e=t);t:{var n=t;if(it(t=n.host.getRootNode()))for(var r=n.host.childNodes,o=0;o<r.length;o++)if("slot"==(n=r[o]).localName)break t;t=void 0}}e&&e._renderRoot()}function fn(t,e,n){var r=Z(e),o=r.ba;r.ba=null,n||(n=(t=t.v[e.slot||"__catchall"])&&t[0]),n?(Z(n).assignedNodes.push(e),r.assignedSlot=n):r.assignedSlot=void 0,o!==r.assignedSlot&&r.assignedSlot&&(Z(r.assignedSlot).fa=!0)}function mn(t,e,n){for(var r,o=0;o<n.length&&(r=n[o]);o++)if("slot"==r.localName){var i=Q(r).assignedNodes;i&&i.length&&mn(t,e,i)}else e.push(n[o])}function yn(t,e){qt.dispatchEvent.call(e,new Event("slotchange")),(e=Q(e)).assignedSlot&&yn(t,e.assignedSlot)}function gn(t){if(t.a&&t.a.length){for(var e,n=t.a,r=0;r<n.length;r++){var o=n[r];Te(o),Te(o.parentNode);var i=vn(o);t.v[i]?((e=e||{})[i]=!0,t.v[i].push(o)):t.v[i]=[o],t.m.push(o)}if(e)for(var a in e)t.v[a]=_n(t.v[a]);t.a=[]}}function vn(t){var e=t.name||t.getAttribute("name")||"__catchall";return t.Ma=e}function _n(t){return t.sort(function(t,e){t=un(t);for(var n=un(e),r=0;r<t.length;r++){e=t[r];var o=n[r];if(e!==o)return(t=Array.from(e.parentNode.childNodes)).indexOf(e)-t.indexOf(o)}})}function bn(t){return gn(t),!(!t.m||!t.m.length)}if(hn.prototype._renderRoot=function(){var t=cn;if(cn=!0,this.ca=!1,this.m){gn(this);for(var e,n=0;n<this.m.length;n++){var r=Q(e=this.m[n]),o=r.assignedNodes;if(r.assignedNodes=[],r.N=[],r.qa=o)for(r=0;r<o.length;r++){var i=Q(o[r]);i.ba=i.assignedSlot,i.assignedSlot===e&&(i.assignedSlot=null)}}for(e=this.host.firstChild;e;e=e.nextSibling)fn(this,e);for(n=0;n<this.m.length;n++){if(!(o=Q(e=this.m[n])).assignedNodes.length)for(r=e.firstChild;r;r=r.nextSibling)fn(this,r,e);if((r=(r=Q(e.parentNode))&&r.root)&&bn(r)&&r._renderRoot(),mn(this,o.N,o.assignedNodes),r=o.qa){for(i=0;i<r.length;i++)Q(r[i]).ba=null;o.qa=null,r.length>o.assignedNodes.length&&(o.fa=!0)}o.fa&&(o.fa=!1,yn(this,e))}for(n=this.m,e=[],o=0;o<n.length;o++)(i=Q(r=n[o].parentNode))&&i.root||!(0>e.indexOf(r))||e.push(r);for(n=0;n<e.length;n++){r=(o=e[n])===this?this.host:o,i=[],o=o.childNodes;for(var a=0;a<o.length;a++){var s=o[a];if("slot"==s.localName){s=Q(s).N;for(var l=0;l<s.length;l++)i.push(s[l])}else i.push(s)}o=void 0,a=sn(r),s=nn(i,i.length,a,a.length);for(var c=l=0;l<s.length&&(o=s[l]);l++){for(var u,h=0;h<o.X.length&&(u=o.X[h]);h++)an(u)===r&&qt.removeChild.call(r,u),a.splice(o.index+c,1);c-=o.da}for(c=0;c<s.length&&(o=s[c]);c++)for(l=a[o.index],h=o.index;h<o.index+o.da;h++)u=i[h],qt.insertBefore.call(r,u,l),a.splice(h,0,u)}}if(!this.b)for(e=0,n=(u=this.host.childNodes).length;e<n;e++)r=Q(o=u[e]),an(o)!==this.host||"slot"!==o.localName&&r.assignedSlot||qt.removeChild.call(this.host,o);this.b=!0,cn=t,on&&on()},window.customElements&&tt.ta){var wn=new Map;on=function(){var t=Array.from(wn);wn.clear();for(var e=(t=u(t)).next();!e.done;e=t.next()){var n=(e=u(e.value)).next().value;e.next().value?n.Ka():n.La()}},cn&&document.addEventListener("readystatechange",function(){cn=!1,on()},{once:!0});var En=window.customElements.define;Object.defineProperty(window.CustomElementRegistry.prototype,"define",{value:function(t,e){var n=e.prototype.connectedCallback,r=e.prototype.disconnectedCallback;En.call(window.customElements,t,function(t,e,n){var r=0,o="__isConnected"+r++;return(e||n)&&(t.prototype.connectedCallback=t.prototype.Ka=function(){cn?wn.set(this,!0):this[o]||(this[o]=!0,e&&e.call(this))},t.prototype.disconnectedCallback=t.prototype.La=function(){cn?this.isConnected||wn.set(this,!1):this[o]&&(this[o]=!1,n&&n.call(this))}),t}(e,n,r)),e.prototype.connectedCallback=n,e.prototype.disconnectedCallback=r}})}function Cn(t){var e=t.getRootNode();return it(e)&&pn(e),(t=Q(t))&&t.assignedSlot||null}var Nn={addEventListener:Je.bind(window),removeEventListener:Xe.bind(window)},Sn={addEventListener:Je,removeEventListener:Xe,appendChild:function(t){return Oe(this,t)},insertBefore:function(t,e){return Oe(this,t,e)},removeChild:function(t){return xe(this,t)},replaceChild:function(t,e){return Oe(this,t,e),xe(this,e),t},cloneNode:function(t){if("template"==this.localName)var e=qt.cloneNode.call(this,t);else if(e=qt.cloneNode.call(this,!1),t&&e.nodeType!==Node.ATTRIBUTE_NODE){t=this.childNodes;for(var n,r=0;r<t.length;r++)n=t[r].cloneNode(!0),e.appendChild(n)}return e},getRootNode:function(){return function t(e){if(e&&e.nodeType){var n=Z(e),r=n.W;return void 0===r&&(it(e)?(r=e,n.W=r):(r=(r=e.parentNode)?t(r):e,qt.contains.call(document.documentElement,e)&&(n.W=r))),r}}(this)},contains:function(t){return yt(this,t)},dispatchEvent:function(t){return wt(),qt.dispatchEvent.call(this,t)}};Object.defineProperties(Sn,{isConnected:{get:function(){if(pe&&pe.call(this))return!0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return!1;var t=this.ownerDocument;if(mt){if(qt.contains.call(t,this))return!0}else if(t.documentElement&&qt.contains.call(t.documentElement,this))return!0;for(t=this;t&&!(t instanceof Document);)t=t.parentNode||(it(t)?t.host:void 0);return!!(t&&t instanceof Document)},configurable:!0}});var Tn={get assignedSlot(){return Cn(this)}},Pn={querySelector:function(t){return Le(this,function(e){return lt.call(e,t)},function(t){return!!t})[0]||null},querySelectorAll:function(t,e){if(e){e=Array.prototype.slice.call(qt.querySelectorAll.call(this,t));var n=this.getRootNode();return e.filter(function(t){return t.getRootNode()==n})}return Le(this,function(e){return lt.call(e,t)})}},On={assignedNodes:function(t){if("slot"===this.localName){var e=this.getRootNode();return it(e)&&pn(e),(e=Q(this))&&(t&&t.flatten?e.N:e.assignedNodes)||[]}}},xn=ut({setAttribute:function(t,e){je(this,t,e)},removeAttribute:function(t){qt.removeAttribute.call(this,t),De(this,t)},attachShadow:function(t){if(!this)throw"Must provide a host.";if(!t)throw"Not enough arguments.";return new hn(ln,this,t)},get slot(){return this.getAttribute("slot")},set slot(t){je(this,"slot",t)},get assignedSlot(){return Cn(this)}},Pn,On);Object.defineProperties(xn,ve);var An=ut({importNode:function(t,e){return function t(e,n){if(e.ownerDocument!==document||"template"===e.localName)return qt.importNode.call(document,e,n);var r=qt.importNode.call(document,e,!1);if(n){e=e.childNodes,n=0;for(var o;n<e.length;n++)o=t(e[n],!0),r.appendChild(o)}return r}(t,e)},getElementById:function(t){return Le(this,function(e){return e.id==t},function(t){return!!t})[0]||null}},Pn);Object.defineProperties(An,{_activeElement:_e.activeElement});for(var Dn=HTMLElement.prototype.blur,Mn={blur:function(){var t=Q(this);(t=(t=t&&t.root)&&t.activeElement)?t.blur():Dn.call(this)}},Ln={},kn=u(Object.getOwnPropertyNames(Document.prototype)),jn=kn.next();!jn.done;Ln={H:Ln.H},jn=kn.next())Ln.H=jn.value,"on"===Ln.H.substring(0,2)&&Object.defineProperty(Mn,Ln.H,{set:function(t){return function(e){var n=Z(this),r=t.H.substring(2);n.$[t.H]&&this.removeEventListener(r,n.$[t.H]),this.addEventListener(r,e,{}),n.$[t.H]=e}}(Ln),get:function(t){return function(){var e=Q(this);return e&&e.$[t.H]}}(Ln),configurable:!0});var In={addEventListener:function(t,e,n){"object"!=typeof n&&(n={capture:!!n}),n.ma=this,this.host.addEventListener(t,e,n)},removeEventListener:function(t,e,n){"object"!=typeof n&&(n={capture:!!n}),n.ma=this,this.host.removeEventListener(t,e,n)},getElementById:function(t){return Le(this,function(e){return e.id==t},function(t){return!!t})[0]||null}};function Rn(t,e){for(var n=Object.getOwnPropertyNames(e),r=0;r<n.length;r++){var o=n[r],i=Object.getOwnPropertyDescriptor(e,o);i.value?t[o]=i.value:Object.defineProperty(t,o,i)}}if(tt.ta){var Fn={inUse:tt.ta,patch:function(t){return Ce(t),Ee(t),t},isShadyRoot:it,enqueue:bt,flush:wt,settings:tt,filterMutations:function(t,e){var n=e.getRootNode();return t.map(function(t){var e=n===t.target.getRootNode();if(e&&t.addedNodes){if((e=Array.from(t.addedNodes).filter(function(t){return n===t.getRootNode()})).length)return t=Object.create(t),Object.defineProperty(t,"addedNodes",{value:e,configurable:!0}),t}else if(e)return t}).filter(function(t){return t})},observeChildren:function(t,e){var n=Z(t);n.T||(n.T=new Et),n.T.ea.add(e);var r=n.T;return{Oa:e,P:r,Ra:t,takeRecords:function(){return r.takeRecords()}}},unobserveChildren:function(t){var e=t&&t.P;e&&(e.ea.delete(t.Oa),e.ea.size||(Z(t.Ra).T=null))},nativeMethods:qt,nativeTree:le,deferConnectionCallbacks:tt.deferConnectionCallbacks};window.ShadyDOM=Fn,function(){if(window.Event=Ze,window.CustomEvent=Qe,window.MouseEvent=tn,function(){for(var t in Ve)window.addEventListener(t,function(t){t.__target||(Ke(t),$e(t))},!0)}(),!Re&&Object.getOwnPropertyDescriptor(Event.prototype,"isTrusted")){var t=function(){var t=new MouseEvent("click",{bubbles:!0,cancelable:!0,composed:!0});this.dispatchEvent(t)};Element.prototype.click?Element.prototype.click=t:HTMLElement.prototype.click&&(HTMLElement.prototype.click=t)}}();var Hn=window.customElements&&window.customElements.nativeHTMLElement||HTMLElement;Rn(hn.prototype,In),Rn(window.Node.prototype,Sn),Rn(window.Window.prototype,Nn),Rn(window.Text.prototype,Tn),Rn(window.DocumentFragment.prototype,Pn),Rn(window.Element.prototype,xn),Rn(window.Document.prototype,An),window.HTMLSlotElement&&Rn(window.HTMLSlotElement.prototype,On),Rn(Hn.prototype,Mn),tt.K&&(we(window.Node.prototype),we(window.Text.prototype),we(window.DocumentFragment.prototype),we(window.Element.prototype),we(Hn.prototype),we(window.Document.prototype),window.HTMLSlotElement&&we(window.HTMLSlotElement.prototype)),function(){var t=hn.prototype;t.__proto__=DocumentFragment.prototype,be(t,me,!0),be(t,ge,!0),be(t,_e,!0),Object.defineProperties(t,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:"#document-fragment",configurable:!0},nodeValue:{value:null,configurable:!0}}),["localName","namespaceURI","prefix"].forEach(function(e){Object.defineProperty(t,e,{value:void 0,configurable:!0})}),["ownerDocument","baseURI","isConnected"].forEach(function(e){Object.defineProperty(t,e,{get:function(){return this.host[e]},configurable:!0})})}(),window.ShadowRoot=hn}var Un=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));function Bn(t){var e=Un.has(t);return t=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(t),!e&&t}function zn(t){var e=t.isConnected;if(void 0!==e)return e;for(;t&&!(t.__CE_isImportDocument||t instanceof Document);)t=t.parentNode||(window.ShadowRoot&&t instanceof ShadowRoot?t.host:void 0);return!(!t||!(t.__CE_isImportDocument||t instanceof Document))}function qn(t,e){for(;e&&e!==t&&!e.nextSibling;)e=e.parentNode;return e&&e!==t?e.nextSibling:null}function Vn(t,e,n){n=void 0===n?new Set:n;for(var r=t;r;){if(r.nodeType===Node.ELEMENT_NODE){var o=r;e(o);var i=o.localName;if("link"===i&&"import"===o.getAttribute("rel")){if((r=o.import)instanceof Node&&!n.has(r))for(n.add(r),r=r.firstChild;r;r=r.nextSibling)Vn(r,e,n);r=qn(t,o);continue}if("template"===i){r=qn(t,o);continue}if(o=o.__CE_shadowRoot)for(o=o.firstChild;o;o=o.nextSibling)Vn(o,e,n)}r=r.firstChild?r.firstChild:qn(t,r)}}function Wn(t,e,n){t[e]=n}function Gn(){this.a=new Map,this.B=new Map,this.f=[],this.c=!1}function $n(t,e){t.c=!0,t.f.push(e)}function Yn(t,e){t.c&&Vn(e,function(e){return t.b(e)})}function Jn(t,e){var n=[];for(Vn(e,function(t){return n.push(t)}),e=0;e<n.length;e++){var r=n[e];1===r.__CE_state?t.connectedCallback(r):Zn(t,r)}}function Xn(t,e){var n=[];for(Vn(e,function(t){return n.push(t)}),e=0;e<n.length;e++){var r=n[e];1===r.__CE_state&&t.disconnectedCallback(r)}}function Kn(t,e,n){var r=(n=void 0===n?{}:n).jb||new Set,o=n.ia||function(e){return Zn(t,e)},i=[];if(Vn(e,function(e){if("link"===e.localName&&"import"===e.getAttribute("rel")){var n=e.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_hasRegistry=!0),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:e.addEventListener("load",function(){var n=e.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var i=new Set(r);i.delete(n),Kn(t,n,{jb:i,ia:o})}})}else i.push(e)},r),t.c)for(e=0;e<i.length;e++)t.b(i[e]);for(e=0;e<i.length;e++)o(i[e])}function Zn(t,e){if(void 0===e.__CE_state){var n=e.ownerDocument;if((n.defaultView||n.__CE_isImportDocument&&n.__CE_hasRegistry)&&(n=t.a.get(e.localName))){n.constructionStack.push(e);var r=n.constructor;try{try{if(new r!==e)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{n.constructionStack.pop()}}catch(t){throw e.__CE_state=2,t}if(e.__CE_state=1,e.__CE_definition=n,n.attributeChangedCallback)for(n=n.observedAttributes,r=0;r<n.length;r++){var o=n[r],i=e.getAttribute(o);null!==i&&t.attributeChangedCallback(e,o,null,i,null)}zn(e)&&t.connectedCallback(e)}}}function Qn(t){var e=document;this.w=t,this.a=e,this.P=void 0,Kn(this.w,this.a),"loading"===this.a.readyState&&(this.P=new MutationObserver(this.b.bind(this)),this.P.observe(this.a,{childList:!0,subtree:!0}))}function tr(t){t.P&&t.P.disconnect()}function er(){var t=this;this.a=this.A=void 0,this.b=new Promise(function(e){t.a=e,t.A&&e(t.A)})}function nr(t){this.na=!1,this.w=t,this.sa=new Map,this.oa=function(t){return t()},this.aa=!1,this.pa=[],this.Pa=new Qn(t)}Gn.prototype.b=function(t){if(this.c&&!t.__CE_patched){t.__CE_patched=!0;for(var e=0;e<this.f.length;e++)this.f[e](t)}},Gn.prototype.connectedCallback=function(t){var e=t.__CE_definition;e.connectedCallback&&e.connectedCallback.call(t)},Gn.prototype.disconnectedCallback=function(t){var e=t.__CE_definition;e.disconnectedCallback&&e.disconnectedCallback.call(t)},Gn.prototype.attributeChangedCallback=function(t,e,n,r,o){var i=t.__CE_definition;i.attributeChangedCallback&&-1<i.observedAttributes.indexOf(e)&&i.attributeChangedCallback.call(t,e,n,r,o)},Qn.prototype.b=function(t){var e=this.a.readyState;for("interactive"!==e&&"complete"!==e||tr(this),e=0;e<t.length;e++)for(var n=t[e].addedNodes,r=0;r<n.length;r++)Kn(this.w,n[r])},er.prototype.resolve=function(t){if(this.A)throw Error("Already resolved.");this.A=t,this.a&&this.a(t)},(n=nr.prototype).define=function(t,e){var n=this;if(!(e instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!Bn(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(this.w.a.get(t))throw Error("A custom element with name '"+t+"' has already been defined.");if(this.na)throw Error("A custom element is already being defined.");this.na=!0;try{var r=function(t){var e=o[t];if(void 0!==e&&!(e instanceof Function))throw Error("The '"+t+"' callback must be a function.");return e},o=e.prototype;if(!(o instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var i=r("connectedCallback"),a=r("disconnectedCallback"),s=r("adoptedCallback"),l=r("attributeChangedCallback"),c=e.observedAttributes||[]}catch(t){return}finally{this.na=!1}e={localName:t,constructor:e,connectedCallback:i,disconnectedCallback:a,adoptedCallback:s,attributeChangedCallback:l,observedAttributes:c,constructionStack:[]},function(t,e,n){t.a.set(e,n),t.B.set(n.constructor,n)}(this.w,t,e),this.pa.push(e),this.aa||(this.aa=!0,this.oa(function(){return function(t){if(!1!==t.aa){t.aa=!1;for(var e=t.pa,n=[],r=new Map,o=0;o<e.length;o++)r.set(e[o].localName,[]);for(Kn(t.w,document,{ia:function(e){if(void 0===e.__CE_state){var o=e.localName,i=r.get(o);i?i.push(e):t.w.a.get(o)&&n.push(e)}}}),o=0;o<n.length;o++)Zn(t.w,n[o]);for(;0<e.length;){var i=e.shift();o=i.localName,i=r.get(i.localName);for(var a=0;a<i.length;a++)Zn(t.w,i[a]);(o=t.sa.get(o))&&o.resolve(void 0)}}}(n)}))},n.ia=function(t){Kn(this.w,t)},n.get=function(t){if(t=this.w.a.get(t))return t.constructor},n.whenDefined=function(t){if(!Bn(t))return Promise.reject(new SyntaxError("'"+t+"' is not a valid custom element name."));var e=this.sa.get(t);return e?e.b:(e=new er,this.sa.set(t,e),this.w.a.get(t)&&!this.pa.some(function(e){return e.localName===t})&&e.resolve(void 0),e.b)},n.eb=function(t){tr(this.Pa);var e=this.oa;this.oa=function(n){return t(function(){return e(n)})}},window.CustomElementRegistry=nr,nr.prototype.define=nr.prototype.define,nr.prototype.upgrade=nr.prototype.ia,nr.prototype.get=nr.prototype.get,nr.prototype.whenDefined=nr.prototype.whenDefined,nr.prototype.polyfillWrapFlushCallback=nr.prototype.eb;var rr=window.Document.prototype.createElement,or=window.Document.prototype.createElementNS,ir=window.Document.prototype.importNode,ar=window.Document.prototype.prepend,sr=window.Document.prototype.append,lr=window.DocumentFragment.prototype.prepend,cr=window.DocumentFragment.prototype.append,ur=window.Node.prototype.cloneNode,hr=window.Node.prototype.appendChild,dr=window.Node.prototype.insertBefore,pr=window.Node.prototype.removeChild,fr=window.Node.prototype.replaceChild,mr=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),yr=window.Element.prototype.attachShadow,gr=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),vr=window.Element.prototype.getAttribute,_r=window.Element.prototype.setAttribute,br=window.Element.prototype.removeAttribute,wr=window.Element.prototype.getAttributeNS,Er=window.Element.prototype.setAttributeNS,Cr=window.Element.prototype.removeAttributeNS,Nr=window.Element.prototype.insertAdjacentElement,Sr=window.Element.prototype.insertAdjacentHTML,Tr=window.Element.prototype.prepend,Pr=window.Element.prototype.append,Or=window.Element.prototype.before,xr=window.Element.prototype.after,Ar=window.Element.prototype.replaceWith,Dr=window.Element.prototype.remove,Mr=window.HTMLElement,Lr=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),kr=window.HTMLElement.prototype.insertAdjacentElement,jr=window.HTMLElement.prototype.insertAdjacentHTML,Ir=new function(){};function Rr(t,e,n){function r(e){return function(n){for(var r=[],o=0;o<arguments.length;++o)r[o]=arguments[o];o=[];for(var i=[],a=0;a<r.length;a++){var s=r[a];if(s instanceof Element&&zn(s)&&i.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)o.push(s);else o.push(s)}for(e.apply(this,r),r=0;r<i.length;r++)Xn(t,i[r]);if(zn(this))for(r=0;r<o.length;r++)(i=o[r])instanceof Element&&Jn(t,i)}}void 0!==n.ha&&(e.prepend=r(n.ha)),void 0!==n.append&&(e.append=r(n.append))}var Fr=window.customElements;if(!Fr||Fr.forcePolyfill||"function"!=typeof Fr.define||"function"!=typeof Fr.get){var Hr=new Gn;!function(){var t=Hr;window.HTMLElement=function(){function e(){var e=this.constructor,n=t.B.get(e);if(!n)throw Error("The custom element being constructed was not registered with `customElements`.");var r=n.constructionStack;if(0===r.length)return r=rr.call(document,n.localName),Object.setPrototypeOf(r,e.prototype),r.__CE_state=1,r.__CE_definition=n,t.b(r),r;var o=r[n=r.length-1];if(o===Ir)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");return r[n]=Ir,Object.setPrototypeOf(o,e.prototype),t.b(o),o}return e.prototype=Mr.prototype,Object.defineProperty(e.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:e}),e}()}(),function(){var t=Hr;Wn(Document.prototype,"createElement",function(e){if(this.__CE_hasRegistry){var n=t.a.get(e);if(n)return new n.constructor}return e=rr.call(this,e),t.b(e),e}),Wn(Document.prototype,"importNode",function(e,n){return e=ir.call(this,e,n),this.__CE_hasRegistry?Kn(t,e):Yn(t,e),e}),Wn(Document.prototype,"createElementNS",function(e,n){if(this.__CE_hasRegistry&&(null===e||"http://www.w3.org/1999/xhtml"===e)){var r=t.a.get(n);if(r)return new r.constructor}return e=or.call(this,e,n),t.b(e),e}),Rr(t,Document.prototype,{ha:ar,append:sr})}(),Rr(Hr,DocumentFragment.prototype,{ha:lr,append:cr}),function(){function t(t,n){Object.defineProperty(t,"textContent",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(t){if(this.nodeType===Node.TEXT_NODE)n.set.call(this,t);else{var r=void 0;if(this.firstChild){var o=this.childNodes,i=o.length;if(0<i&&zn(this)){r=Array(i);for(var a=0;a<i;a++)r[a]=o[a]}}if(n.set.call(this,t),r)for(t=0;t<r.length;t++)Xn(e,r[t])}}})}var e=Hr;Wn(Node.prototype,"insertBefore",function(t,n){if(t instanceof DocumentFragment){var r=Array.prototype.slice.apply(t.childNodes);if(t=dr.call(this,t,n),zn(this))for(n=0;n<r.length;n++)Jn(e,r[n]);return t}return r=zn(t),n=dr.call(this,t,n),r&&Xn(e,t),zn(this)&&Jn(e,t),n}),Wn(Node.prototype,"appendChild",function(t){if(t instanceof DocumentFragment){var n=Array.prototype.slice.apply(t.childNodes);if(t=hr.call(this,t),zn(this))for(var r=0;r<n.length;r++)Jn(e,n[r]);return t}return n=zn(t),r=hr.call(this,t),n&&Xn(e,t),zn(this)&&Jn(e,t),r}),Wn(Node.prototype,"cloneNode",function(t){return t=ur.call(this,t),this.ownerDocument.__CE_hasRegistry?Kn(e,t):Yn(e,t),t}),Wn(Node.prototype,"removeChild",function(t){var n=zn(t),r=pr.call(this,t);return n&&Xn(e,t),r}),Wn(Node.prototype,"replaceChild",function(t,n){if(t instanceof DocumentFragment){var r=Array.prototype.slice.apply(t.childNodes);if(t=fr.call(this,t,n),zn(this))for(Xn(e,n),n=0;n<r.length;n++)Jn(e,r[n]);return t}r=zn(t);var o=fr.call(this,t,n),i=zn(this);return i&&Xn(e,n),r&&Xn(e,t),i&&Jn(e,t),o}),mr&&mr.get?t(Node.prototype,mr):$n(e,function(e){t(e,{enumerable:!0,configurable:!0,get:function(){for(var t=[],e=0;e<this.childNodes.length;e++)t.push(this.childNodes[e].textContent);return t.join("")},set:function(t){for(;this.firstChild;)pr.call(this,this.firstChild);hr.call(this,document.createTextNode(t))}})})}(),function(){function t(t,e){Object.defineProperty(t,"innerHTML",{enumerable:e.enumerable,configurable:!0,get:e.get,set:function(t){var n=this,o=void 0;if(zn(this)&&(o=[],Vn(this,function(t){t!==n&&o.push(t)})),e.set.call(this,t),o)for(var i=0;i<o.length;i++){var a=o[i];1===a.__CE_state&&r.disconnectedCallback(a)}return this.ownerDocument.__CE_hasRegistry?Kn(r,this):Yn(r,this),t}})}function e(t,e){Wn(t,"insertAdjacentElement",function(t,n){var o=zn(n);return t=e.call(this,t,n),o&&Xn(r,n),zn(t)&&Jn(r,n),t})}function n(t,e){function n(t,e){for(var n=[];t!==e;t=t.nextSibling)n.push(t);for(e=0;e<n.length;e++)Kn(r,n[e])}Wn(t,"insertAdjacentHTML",function(t,r){if("beforebegin"===(t=t.toLowerCase())){var o=this.previousSibling;e.call(this,t,r),n(o||this.parentNode.firstChild,this)}else if("afterbegin"===t)o=this.firstChild,e.call(this,t,r),n(this.firstChild,o);else if("beforeend"===t)o=this.lastChild,e.call(this,t,r),n(o||this.firstChild,null);else{if("afterend"!==t)throw new SyntaxError("The value provided ("+String(t)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");o=this.nextSibling,e.call(this,t,r),n(this.nextSibling,o)}})}var r=Hr;yr&&Wn(Element.prototype,"attachShadow",function(t){return this.__CE_shadowRoot=yr.call(this,t)}),gr&&gr.get?t(Element.prototype,gr):Lr&&Lr.get?t(HTMLElement.prototype,Lr):$n(r,function(e){t(e,{enumerable:!0,configurable:!0,get:function(){return ur.call(this,!0).innerHTML},set:function(t){var e="template"===this.localName,n=e?this.content:this,r=or.call(document,this.namespaceURI,this.localName);for(r.innerHTML=t;0<n.childNodes.length;)pr.call(n,n.childNodes[0]);for(t=e?r.content:r;0<t.childNodes.length;)hr.call(n,t.childNodes[0])}})}),Wn(Element.prototype,"setAttribute",function(t,e){if(1!==this.__CE_state)return _r.call(this,t,e);var n=vr.call(this,t);_r.call(this,t,e),e=vr.call(this,t),r.attributeChangedCallback(this,t,n,e,null)}),Wn(Element.prototype,"setAttributeNS",function(t,e,n){if(1!==this.__CE_state)return Er.call(this,t,e,n);var o=wr.call(this,t,e);Er.call(this,t,e,n),n=wr.call(this,t,e),r.attributeChangedCallback(this,e,o,n,t)}),Wn(Element.prototype,"removeAttribute",function(t){if(1!==this.__CE_state)return br.call(this,t);var e=vr.call(this,t);br.call(this,t),null!==e&&r.attributeChangedCallback(this,t,e,null,null)}),Wn(Element.prototype,"removeAttributeNS",function(t,e){if(1!==this.__CE_state)return Cr.call(this,t,e);var n=wr.call(this,t,e);Cr.call(this,t,e);var o=wr.call(this,t,e);n!==o&&r.attributeChangedCallback(this,e,n,o,t)}),kr?e(HTMLElement.prototype,kr):Nr?e(Element.prototype,Nr):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched."),jr?n(HTMLElement.prototype,jr):Sr?n(Element.prototype,Sr):console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched."),Rr(r,Element.prototype,{ha:Tr,append:Pr}),function(t){function e(e){return function(n){for(var r=[],o=0;o<arguments.length;++o)r[o]=arguments[o];o=[];for(var i=[],a=0;a<r.length;a++){var s=r[a];if(s instanceof Element&&zn(s)&&i.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)o.push(s);else o.push(s)}for(e.apply(this,r),r=0;r<i.length;r++)Xn(t,i[r]);if(zn(this))for(r=0;r<o.length;r++)(i=o[r])instanceof Element&&Jn(t,i)}}var n=Element.prototype;void 0!==Or&&(n.before=e(Or)),void 0!==Or&&(n.after=e(xr)),void 0!==Ar&&Wn(n,"replaceWith",function(e){for(var n=[],r=0;r<arguments.length;++r)n[r]=arguments[r];r=[];for(var o=[],i=0;i<n.length;i++){var a=n[i];if(a instanceof Element&&zn(a)&&o.push(a),a instanceof DocumentFragment)for(a=a.firstChild;a;a=a.nextSibling)r.push(a);else r.push(a)}for(i=zn(this),Ar.apply(this,n),n=0;n<o.length;n++)Xn(t,o[n]);if(i)for(Xn(t,this),n=0;n<r.length;n++)(o=r[n])instanceof Element&&Jn(t,o)}),void 0!==Dr&&Wn(n,"remove",function(){var e=zn(this);Dr.call(this),e&&Xn(t,this)})}(r)}(),document.__CE_hasRegistry=!0;var Ur=new nr(Hr);Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:Ur})}function Br(){this.end=this.start=0,this.rules=this.parent=this.previous=null,this.cssText=this.parsedCssText="",this.atRule=!1,this.type=0,this.parsedSelector=this.selector=this.keyframesName=""}function zr(t){var e=qr,n=t=t.replace(Jr,"").replace(Xr,""),r=new Br;r.start=0,r.end=n.length;for(var o=r,i=0,a=n.length;i<a;i++)if("{"===n[i]){o.rules||(o.rules=[]);var s=o,l=s.rules[s.rules.length-1]||null;(o=new Br).start=i+1,o.parent=s,o.previous=l,s.rules.push(o)}else"}"===n[i]&&(o.end=i+1,o=o.parent||r);return e(r,t)}function qr(t,e){var n=e.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=n.trim(),t.parent&&(n=(n=(n=function(t){return t.replace(/\\([0-9a-f]{1,6})\s/gi,function(t,e){for(e=6-(t=e).length;e--;)t="0"+t;return"\\"+t})}(n=e.substring(t.previous?t.previous.end:t.parent.start,t.start-1))).replace(no," ")).substring(n.lastIndexOf(";")+1),n=t.parsedSelector=t.selector=n.trim(),t.atRule=0===n.indexOf("@"),t.atRule?0===n.indexOf("@media")?t.type=$r:n.match(eo)&&(t.type=Gr,t.keyframesName=t.selector.split(no).pop()):t.type=0===n.indexOf("--")?Yr:Wr),n=t.rules)for(var r,o=0,i=n.length;o<i&&(r=n[o]);o++)qr(r,e);return t}var Vr,Wr=1,Gr=7,$r=4,Yr=1e3,Jr=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,Xr=/@import[^;]*;/gim,Kr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,Zr=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,Qr=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,to=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,eo=/^@[^\s]*keyframes/,no=/\s+/g,ro=!(window.ShadyDOM&&window.ShadyDOM.inUse);function oo(t){Vr=(!t||!t.shimcssproperties)&&(ro||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Vr=window.ShadyCSS.nativeCss:window.ShadyCSS?(oo(window.ShadyCSS),window.ShadyCSS=void 0):oo(window.WebComponents&&window.WebComponents.flags);var io=Vr,ao=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,so=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,lo=/(--[\w-]+)\s*([:,;)]|$)/gi,co=/(animation\s*:)|(animation-name\s*:)/,uo=/@media\s(.*)/,ho=/\{[^}]*\}/g,po=new Set;function fo(t,e){return t?("string"==typeof t&&(t=zr(t)),e&&go(t,e),function t(e,n,r){r=void 0===r?"":r;var o="";if(e.cssText||e.rules){var i,a=e.rules;if((i=a)&&(i=!((i=a[0])&&i.selector&&0===i.selector.indexOf("--"))),i){i=0;for(var s,l=a.length;i<l&&(s=a[i]);i++)o=t(s,n,o)}else n=n?e.cssText:(n=(n=e.cssText).replace(Kr,"").replace(Zr,"")).replace(Qr,"").replace(to,""),(o=n.trim())&&(o="  "+o+"\n")}return o&&(e.selector&&(r+=e.selector+" {\n"),r+=o,e.selector&&(r+="}\n\n")),r}(t,io)):""}function mo(t){return!t.__cssRules&&t.textContent&&(t.__cssRules=zr(t.textContent)),t.__cssRules||null}function yo(t){return!!t.parent&&t.parent.type===Gr}function go(t,e,n,r){if(t){var o=!1,i=t.type;if(r&&i===$r){var a=t.selector.match(uo);a&&(window.matchMedia(a[1]).matches||(o=!0))}if(i===Wr?e(t):n&&i===Gr?n(t):i===Yr&&(o=!0),(t=t.rules)&&!o){o=0,i=t.length;for(var s;o<i&&(s=t[o]);o++)go(s,e,n,r)}}}function vo(t,e,n,r){var o=document.createElement("style");return e&&o.setAttribute("scope",e),o.textContent=t,bo(o,n,r),o}var _o=null;function bo(t,e,n){(e=e||document.head).insertBefore(t,n&&n.nextSibling||e.firstChild),_o?t.compareDocumentPosition(_o)===Node.DOCUMENT_POSITION_PRECEDING&&(_o=t):_o=t}function wo(t,e){ro?t.setAttribute("class",e):window.ShadyDOM.nativeMethods.setAttribute.call(t,"class",e)}function Eo(t){var e=t.localName,n="";return e?-1<e.indexOf("-")||(n=e,e=t.getAttribute&&t.getAttribute("is")||""):(e=t.is,n=t.extends),{is:e,Y:n}}function Co(){}function No(t,e,n){var r=Yo;t.__styleScoped?t.__styleScoped=null:function t(e,n,r,o){n.nodeType===Node.ELEMENT_NODE&&So(n,r,o);if(n="template"===n.localName?(n.content||n.qb||n).childNodes:n.children||n.childNodes)for(var i=0;i<n.length;i++)t(e,n[i],r,o)}(r,t,e||"",n)}function So(t,e,n){if(e)if(t.classList)n?(t.classList.remove("style-scope"),t.classList.remove(e)):(t.classList.add("style-scope"),t.classList.add(e));else if(t.getAttribute){var r=t.getAttribute(Go);n?r&&wo(t,e=r.replace("style-scope","").replace(e,"")):wo(t,(r?r+" ":"")+"style-scope "+e)}}function To(t,e,n){var r=Yo,o=t.__cssBuild;return ro||"shady"===o?e=fo(e,n):e=function(t,e,n,r,o){var i=Po(n,r);return n=n?Vo+n:"",fo(e,function(e){e.c||(e.selector=e.G=Oo(t,e,t.b,n,i),e.c=!0),o&&o(e,n,i)})}(r,e,(t=Eo(t)).is,t.Y,n)+"\n\n",e.trim()}function Po(t,e){return e?"[is="+t+"]":t}function Oo(t,e,n,r,o){var i=e.selector.split(ko);if(!yo(e)){e=0;for(var a,s=i.length;e<s&&(a=i[e]);e++)i[e]=n.call(t,a,r,o)}return i.join(ko)}function xo(t){return t.replace(Mo,function(t,e,n){return-1<n.indexOf("+")?n=n.replace(/\+/g,"___"):-1<n.indexOf("___")&&(n=n.replace(/___/g,"+")),":"+e+"("+n+")"})}function Ao(t,e){return(t=t.split(Wo))[0]+=e,t.join(Wo)}function Do(t){t.selector===Fo&&(t.selector="html")}Co.prototype.b=function(t,e,n){var r=!1;t=t.trim();var o=Mo.test(t);return o&&(t=xo(t=t.replace(Mo,function(t,e,n){return":"+e+"("+n.replace(/\s/g,"")+")"}))),t=(t=t.replace(Uo,Ro+" $1")).replace(jo,function(t,o,i){return r||(t=function(t,e,n,r){var o=t.indexOf(Ho);if(0<=t.indexOf(Ro)?t=function(t,e){var n=t.match(Bo);return(n=n&&n[2].trim()||"")?n[0].match(Io)?t.replace(Bo,function(t,n,r){return e+r}):n.split(Io)[0]===e?n:$o:t.replace(Ro,e)}(t,r):0!==o&&(t=n?Ao(t,n):t),n=!1,0<=o&&(e="",n=!0),n){var i=!0;n&&(t=t.replace(zo,function(t,e){return" > "+e}))}return{value:t=t.replace(qo,function(t,e,n){return'[dir="'+n+'"] '+e+", "+e+'[dir="'+n+'"]'}),Va:e,stop:i}}(i,o,e,n),r=r||t.stop,o=t.Va,i=t.value),o+i}),o&&(t=xo(t)),t},Co.prototype.c=function(t){return t.match(Ho)?this.b(t,Lo):Ao(t.trim(),Lo)},o.Object.defineProperties(Co.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"style-scope"}}});var Mo=/:(nth[-\w]+)\(([^)]+)\)/,Lo=":not(.style-scope)",ko=",",jo=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,Io=/[[.:#*]/,Ro=":host",Fo=":root",Ho="::slotted",Uo=new RegExp("^("+Ho+")"),Bo=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,zo=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,qo=/(.*):dir\((?:(ltr|rtl))\)/,Vo=".",Wo=":",Go="class",$o="should_not_match",Yo=new Co;function Jo(t,e,n,r){this.M=t||null,this.b=e||null,this.ua=n||[],this.U=null,this.Y=r||"",this.a=this.I=this.O=null}function Xo(t){return t?t.__styleInfo:null}function Ko(t,e){return t.__styleInfo=e}function Zo(t){var e=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return e&&e.call(this,t)}Jo.prototype.c=function(){return this.M},Jo.prototype._getStyleRules=Jo.prototype.c;var Qo=navigator.userAgent.match("Trident");function ti(){}function ei(t){if(!t.C){var e={},n={};ni(t,n)&&(e.L=n,t.rules=null),e.cssText=t.parsedCssText.replace(ho,"").replace(ao,""),t.C=e}}function ni(t,e){var n=t.C;if(!n){n=t.parsedCssText;for(var r;t=ao.exec(n);)"inherit"===(r=(t[2]||t[3]).trim())&&"unset"===r||(e[t[1].trim()]=r),r=!0;return r}if(n.L)return Object.assign(e,n.L),!0}function ri(t,e,n){return e&&(e=0<=e.indexOf(";")?oi(t,e,n):function t(e,n){var r=e.indexOf("var(");if(-1===r)return n(e,"","","");t:{for(var o=0,i=r+3,a=e.length;i<a;i++)if("("===e[i])o++;else if(")"===e[i]&&0==--o)break t;i=-1}return o=e.substring(r+4,i),r=e.substring(0,r),e=t(e.substring(i+1),n),-1===(i=o.indexOf(","))?n(r,o.trim(),"",e):n(r,o.substring(0,i).trim(),o.substring(i+1).trim(),e)}(e,function(e,r,o,i){return r?((r=ri(t,n[r],n))&&"initial"!==r?"apply-shim-inherit"===r&&(r="inherit"):r=ri(t,n[o]||o,n)||o,e+(r||"")+i):e+i})),e&&e.trim()||""}function oi(t,e,n){e=e.split(";");for(var r,o,i=0;i<e.length;i++)if(r=e[i]){if(so.lastIndex=0,o=so.exec(r))r=ri(t,n[o[1]],n);else if(-1!==(o=r.indexOf(":"))){var a=r.substring(o);a=ri(t,a=a.trim(),n)||a,r=r.substring(0,o)+a}e[i]=r&&r.lastIndexOf(";")===r.length-1?r.slice(0,-1):r||""}return e.join(";")}function ii(t,e){var n={},r={},o=e&&e.__cssBuild;return go(e,function(e){!function(t,e,n,r){if(e.C||ei(e),e.C.L){var o=Eo(t);t=o.is,o=o.Y,o=t?Po(t,o):"html";var i=e.parsedSelector,a=":host > *"===i||"html"===i,s=0===i.indexOf(":host")&&!a;"shady"===n&&(s=!(a=i===o+" > *."+o||-1!==i.indexOf("html"))&&0===i.indexOf(o)),"shadow"===n&&(a=":host > *"===i||"html"===i,s=s&&!a),(a||s)&&(n=o,s&&(e.G||(e.G=Oo(Yo,e,Yo.b,t?Vo+t:"",o)),n=e.G||o),r({gb:n,ab:s,Db:a}))}}(t,e,o,function(o){Zo.call(t.rb||t,o.gb)&&(o.ab?ni(e,n):ni(e,r))})},null,!0),{fb:r,Za:n}}function ai(t,e,n,r){var o=Eo(e),i=Po(o.is,o.Y),a=new RegExp("(?:^|[^.#[:])"+(e.extends?"\\"+i.slice(0,-1)+"\\]":i)+"($|[.:[\\s>+~])"),s=function(t,e){t=t.b;var n={};if(!ro&&t)for(var r=0,o=t[r];r<t.length;o=t[++r]){var i=o,a=e;i.f=new RegExp("\\b"+i.keyframesName+"(?!\\B|-)","g"),i.a=i.keyframesName+"-"+a,i.G=i.G||i.selector,i.selector=i.G.replace(i.keyframesName,i.a),n[o.keyframesName]=si(o)}return n}(o=Xo(e).M,r);return To(e,o,function(e){var o="";if(e.C||ei(e),e.C.cssText&&(o=oi(t,e.C.cssText,n)),e.cssText=o,!ro&&!yo(e)&&e.cssText){var l=o=e.cssText;if(null==e.Ca&&(e.Ca=co.test(o)),e.Ca)if(null==e.ga)for(var c in e.ga=[],s)o!==(l=(l=s[c])(o))&&(o=l,e.ga.push(c));else{for(c=0;c<e.ga.length;++c)o=(l=s[e.ga[c]])(o);l=o}e.cssText=l,e.G=e.G||e.selector,o="."+r,l=0;for(var u,h=(c=e.G.split(",")).length;l<h&&(u=c[l]);l++)c[l]=u.match(a)?u.replace(i,o):o+" "+u;e.selector=c.join(",")}})}function si(t){return function(e){return e.replace(t.f,t.a)}}function li(t,e){var n=ci,r=mo(t);t.textContent=fo(r,function(t){var r=t.cssText=t.parsedCssText;t.C&&t.C.cssText&&(r=r.replace(Kr,"").replace(Zr,""),t.cssText=oi(n,r,e))})}o.Object.defineProperties(ti.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return"x-scope"}}});var ci=new ti,ui={},hi=window.customElements;if(hi&&!ro){var di=hi.define;hi.define=function(t,e,n){var r=document.createComment(" Shady DOM styles for "+t+" "),o=document.head;o.insertBefore(r,(_o?_o.nextSibling:null)||o.firstChild),_o=r,ui[t]=r,di.call(hi,t,e,n)}}function pi(){this.cache={}}function fi(){}function mi(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.target!==document.documentElement&&n.target!==document.head)for(var r=0;r<n.addedNodes.length;r++){var o=n.addedNodes[r];if(o.nodeType===Node.ELEMENT_NODE){var i=o.getRootNode(),a=o,s=[];if(a.classList?s=Array.from(a.classList):a instanceof window.SVGElement&&a.hasAttribute("class")&&(s=a.getAttribute("class").split(/\s+/)),(a=-1<(s=(a=s).indexOf(Yo.a))?a[s+1]:"")&&i===o.ownerDocument)No(o,a,!0);else if(i.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&(i=i.host))if(a===(i=Eo(i).is))for(o=window.ShadyDOM.nativeMethods.querySelectorAll.call(o,":not(."+Yo.a+")"),i=0;i<o.length;i++)So(o[i],a);else a&&No(o,a,!0),No(o,i)}}}}if(pi.prototype.store=function(t,e,n,r){var o=this.cache[t]||[];o.push({L:e,styleElement:n,I:r}),100<o.length&&o.shift(),this.cache[t]=o},pi.prototype.fetch=function(t,e,n){if(t=this.cache[t])for(var r=t.length-1;0<=r;r--){var o,i=t[r];t:{for(o=0;o<n.length;o++){var a=n[o];if(i.L[a]!==e[a]){o=!1;break t}}o=!0}if(o)return i}},!ro){var yi=new MutationObserver(mi),gi=function(t){yi.observe(t,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)gi(document);else{var vi=function(){gi(document.body)};window.HTMLImports?window.HTMLImports.whenReady(vi):requestAnimationFrame(function(){if("loading"===document.readyState){var t=function(){vi(),document.removeEventListener("readystatechange",t)};document.addEventListener("readystatechange",t)}else vi()})}fi=function(){mi(yi.takeRecords())}}var _i=fi,bi={},wi=Promise.resolve();function Ei(t){(t=bi[t])&&(t._applyShimCurrentVersion=t._applyShimCurrentVersion||0,t._applyShimValidatingVersion=t._applyShimValidatingVersion||0,t._applyShimNextVersion=(t._applyShimNextVersion||0)+1)}function Ci(t){return t._applyShimCurrentVersion===t._applyShimNextVersion}var Ni=new pi;function Si(){this.S={},this.c=document.documentElement;var t=new Br;t.rules=[],this.f=Ko(this.c,new Jo(t)),this.B=!1,this.b=this.a=null}function Ti(t){!t.a&&window.ShadyCSS&&window.ShadyCSS.ApplyShim&&(t.a=window.ShadyCSS.ApplyShim,t.a.invalidCallback=Ei),function(t){!t.b&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(t.b=window.ShadyCSS.CustomStyleInterface,t.b.transformCallback=function(e){t.Ga(e)},t.b.validateCallback=function(){requestAnimationFrame(function(){(t.b.enqueued||t.B)&&t.flushCustomStyles()})})}(t)}function Pi(t,e){return(e=e.getRootNode().host)?Xo(e)?e:Pi(t,e):t.c}function Oi(t,e,n){var r=Xo(t=Pi(t,e));t=Object.create(r.O||null);var o=ii(e,n.M);for(var i in e=function(t,e){var n={},r=[];return go(t,function(t){t.C||ei(t);var o=t.G||t.parsedSelector;e&&t.C.L&&o&&Zo.call(e,o)&&(ni(t,n),t=t.index,o=parseInt(t/32,10),r[o]=(r[o]||0)|1<<t%32)},null,!0),{L:n,key:r}}(r.M,e).L,Object.assign(t,o.Za,e,o.fb),e=n.U)((o=e[i])||0===o)&&(t[i]=o);for(i=ci,e=Object.getOwnPropertyNames(t),o=0;o<e.length;o++)t[r=e[o]]=ri(i,t[r],t);n.O=t}(n=Si.prototype).flush=function(){_i()},n.Xa=function(t){return mo(t)},n.ib=function(t){return fo(t)},n.prepareTemplate=function(t,e,n){this.prepareTemplateDom(t,e),this.prepareTemplateStyles(t,e,n)},n.prepareTemplateStyles=function(t,e,n){if(!t.B){t.B=!0,t.name=e,t.extends=n,bi[e]=t;for(var r=(r=t.content.querySelector("style"))&&r.getAttribute("css-build")||"",o=[],i=t.content.querySelectorAll("style"),a=0;a<i.length;a++){var s=i[a];if(s.hasAttribute("shady-unscoped")){if(!ro){var l=s.textContent;po.has(l)||(po.add(l),l=s.cloneNode(!0),document.head.appendChild(l)),s.parentNode.removeChild(s)}}else o.push(s.textContent),s.parentNode.removeChild(s)}o=o.join("").trim(),n={is:e,extends:n,ob:r},Ti(this),i=so.test(o)||ao.test(o),so.lastIndex=0,ao.lastIndex=0,o=zr(o),i&&io&&this.a&&this.a.transformRules(o,e),t._styleAst=o,t.S=r,r=[],io||(r=function(t){var e={},n=[],r=0;for(var o in go(t,function(t){ei(t),t.index=r++,t=t.C.cssText;for(var n;n=lo.exec(t);){var o=n[1];":"!==n[2]&&(e[o]=!0)}},function(t){n.push(t)}),t.b=n,t=[],e)t.push(o);return t}(t._styleAst)),r.length&&!io||(o=ro?t.content:null,e=ui[e],e=(i=To(n,t._styleAst)).length?vo(i,n.is,o,e):void 0,t.a=e),t.f=r}},n.prepareTemplateDom=function(t,e){ro||t.c||(t.c=!0,No(t.content,e))},n.flushCustomStyles=function(){if(Ti(this),this.b){var t=this.b.processStyles();if(this.b.enqueued){if(io)for(var e=0;e<t.length;e++){var n=this.b.getStyleForCustomStyle(t[e]);if(n&&io&&this.a){var r=mo(n);Ti(this),this.a.transformRules(r),n.textContent=fo(r)}}else for(Oi(this,this.c,this.f),e=0;e<t.length;e++)(n=this.b.getStyleForCustomStyle(t[e]))&&li(n,this.f.O);this.b.enqueued=!1,this.B&&!io&&this.styleDocument()}}},n.styleElement=function(t,e){var n=Eo(t).is,r=Xo(t);if(!r){var o=Eo(t);r=o.is,o=o.Y;var i=ui[r];if(r=bi[r])var a=r._styleAst,s=r.f;r=Ko(t,new Jo(a,i,s,o))}if(t!==this.c&&(this.B=!0),e&&(r.U=r.U||{},Object.assign(r.U,e)),io){if(r.U)for(var l in e=r.U)null===l?t.style.removeProperty(l):t.style.setProperty(l,e[l]);((l=bi[n])||t===this.c)&&l&&l.a&&!Ci(l)&&((Ci(l)||l._applyShimValidatingVersion!==l._applyShimNextVersion)&&(Ti(this),this.a&&this.a.transformRules(l._styleAst,n),l.a.textContent=To(t,r.M),function(t){t._applyShimValidatingVersion=t._applyShimNextVersion,t.b||(t.b=!0,wi.then(function(){t._applyShimCurrentVersion=t._applyShimNextVersion,t.b=!1}))}(l)),ro&&(n=t.shadowRoot)&&(n.querySelector("style").textContent=To(t,r.M)),r.M=l._styleAst)}else if(this.flush(),Oi(this,t,r),r.ua&&r.ua.length){n=r,l=Eo(t).is,r=(e=Ni.fetch(l,n.O,n.ua))?e.styleElement:null,a=n.I,(s=e&&e.I)||(s=l+"-"+(s=this.S[l]=(this.S[l]||0)+1)),n.I=s,s=n.I,o=ci,o=r?r.textContent||"":ai(o,t,n.O,s);var c=(i=Xo(t)).a;c&&!ro&&c!==r&&(c._useCount--,0>=c._useCount&&c.parentNode&&c.parentNode.removeChild(c)),ro?i.a?(i.a.textContent=o,r=i.a):o&&(r=vo(o,s,t.shadowRoot,i.b)):r?r.parentNode||(Qo&&-1<o.indexOf("@media")&&(r.textContent=o),bo(r,null,i.b)):o&&(r=vo(o,s,null,i.b)),r&&(r._useCount=r._useCount||0,i.a!=r&&r._useCount++,i.a=r),s=r,ro||(r=n.I,i=o=t.getAttribute("class")||"",a&&(i=o.replace(new RegExp("\\s*x-scope\\s*"+a+"\\s*","g")," ")),o!==(i+=(i?" ":"")+"x-scope "+r)&&wo(t,i)),e||Ni.store(l,n.O,s,n.I)}},n.styleDocument=function(t){this.styleSubtree(this.c,t)},n.styleSubtree=function(t,e){var n=t.shadowRoot;if((n||t===this.c)&&this.styleElement(t,e),e=n&&(n.children||n.childNodes))for(t=0;t<e.length;t++)this.styleSubtree(e[t]);else if(t=t.children||t.childNodes)for(e=0;e<t.length;e++)this.styleSubtree(t[e])},n.Ga=function(t){var e=this,n=mo(t);go(n,function(t){if(ro)Do(t);else{var n=Yo;t.selector=t.parsedSelector,Do(t),t.selector=t.G=Oo(n,t,n.c,void 0,void 0)}io&&(Ti(e),e.a&&e.a.transformRule(t))}),io?t.textContent=fo(n):this.f.M.rules.push(n)},n.getComputedStyleValue=function(t,e){var n;return io||(n=(Xo(t)||Xo(Pi(this,t))).O[e]),(n=n||window.getComputedStyle(t).getPropertyValue(e))?n.trim():""},n.hb=function(t,e){var n=t.getRootNode();if(e=e?e.split(/\s/):[],!(n=n.host&&n.host.localName)){var r=t.getAttribute("class");if(r){r=r.split(/\s/);for(var o=0;o<r.length;o++)if(r[o]===Yo.a){n=r[o+1];break}}}n&&e.push(Yo.a,n),io||(n=Xo(t))&&n.I&&e.push(ci.a,n.I),wo(t,e.join(" "))},n.Sa=function(t){return Xo(t)},Si.prototype.flush=Si.prototype.flush,Si.prototype.prepareTemplate=Si.prototype.prepareTemplate,Si.prototype.styleElement=Si.prototype.styleElement,Si.prototype.styleDocument=Si.prototype.styleDocument,Si.prototype.styleSubtree=Si.prototype.styleSubtree,Si.prototype.getComputedStyleValue=Si.prototype.getComputedStyleValue,Si.prototype.setElementClass=Si.prototype.hb,Si.prototype._styleInfoForNode=Si.prototype.Sa,Si.prototype.transformCustomStyleForDocument=Si.prototype.Ga,Si.prototype.getStyleAst=Si.prototype.Xa,Si.prototype.styleAstToString=Si.prototype.ib,Si.prototype.flushCustomStyles=Si.prototype.flushCustomStyles,Object.defineProperties(Si.prototype,{nativeShadow:{get:function(){return ro}},nativeCss:{get:function(){return io}}});var xi,Ai,Di=new Si;window.ShadyCSS&&(xi=window.ShadyCSS.ApplyShim,Ai=window.ShadyCSS.CustomStyleInterface),window.ShadyCSS={ScopingShim:Di,prepareTemplate:function(t,e,n){Di.flushCustomStyles(),Di.prepareTemplate(t,e,n)},prepareTemplateDom:function(t,e){Di.prepareTemplateDom(t,e)},prepareTemplateStyles:function(t,e,n){Di.flushCustomStyles(),Di.prepareTemplateStyles(t,e,n)},styleSubtree:function(t,e){Di.flushCustomStyles(),Di.styleSubtree(t,e)},styleElement:function(t){Di.flushCustomStyles(),Di.styleElement(t)},styleDocument:function(t){Di.flushCustomStyles(),Di.styleDocument(t)},flushCustomStyles:function(){Di.flushCustomStyles()},getComputedStyleValue:function(t,e){return Di.getComputedStyleValue(t,e)},nativeCss:io,nativeShadow:ro},xi&&(window.ShadyCSS.ApplyShim=xi),Ai&&(window.ShadyCSS.CustomStyleInterface=Ai),function(t){function e(t){return""==t&&(i.call(this),this.i=!0),t.toLowerCase()}function n(t){var e=t.charCodeAt(0);return 32<e&&127>e&&-1==[34,35,60,62,63,96].indexOf(e)?t:encodeURIComponent(t)}function r(t){var e=t.charCodeAt(0);return 32<e&&127>e&&-1==[34,35,60,62,96].indexOf(e)?t:encodeURIComponent(t)}function o(t,o,a){function s(t){g.push(t)}var l=o||"scheme start",p=0,f="",m=!1,y=!1,g=[];t:for(;(void 0!=t[p-1]||0==p)&&!this.i;){var v=t[p];switch(l){case"scheme start":if(!v||!h.test(v)){if(o){s("Invalid scheme.");break t}f="",l="no scheme";continue}f+=v.toLowerCase(),l="scheme";break;case"scheme":if(v&&d.test(v))f+=v.toLowerCase();else{if(":"!=v){if(o){void 0!=v&&s("Code point not allowed in scheme: "+v);break t}f="",p=0,l="no scheme";continue}if(this.h=f,f="",o)break t;void 0!==c[this.h]&&(this.F=!0),l="file"==this.h?"relative":this.F&&a&&a.h==this.h?"relative or authority":this.F?"authority first slash":"scheme data"}break;case"scheme data":"?"==v?(this.s="?",l="query"):"#"==v?(this.D="#",l="fragment"):void 0!=v&&"\t"!=v&&"\n"!=v&&"\r"!=v&&(this.ra+=n(v));break;case"no scheme":if(a&&void 0!==c[a.h]){l="relative";continue}s("Missing scheme."),i.call(this),this.i=!0;break;case"relative or authority":if("/"!=v||"/"!=t[p+1]){s("Expected /, got: "+v),l="relative";continue}l="authority ignore slashes";break;case"relative":if(this.F=!0,"file"!=this.h&&(this.h=a.h),void 0==v){this.j=a.j,this.o=a.o,this.l=a.l.slice(),this.s=a.s,this.u=a.u,this.g=a.g;break t}if("/"==v||"\\"==v)"\\"==v&&s("\\ is an invalid code point."),l="relative slash";else if("?"==v)this.j=a.j,this.o=a.o,this.l=a.l.slice(),this.s="?",this.u=a.u,this.g=a.g,l="query";else{if("#"!=v){l=t[p+1];var _=t[p+2];("file"!=this.h||!h.test(v)||":"!=l&&"|"!=l||void 0!=_&&"/"!=_&&"\\"!=_&&"?"!=_&&"#"!=_)&&(this.j=a.j,this.o=a.o,this.u=a.u,this.g=a.g,this.l=a.l.slice(),this.l.pop()),l="relative path";continue}this.j=a.j,this.o=a.o,this.l=a.l.slice(),this.s=a.s,this.D="#",this.u=a.u,this.g=a.g,l="fragment"}break;case"relative slash":if("/"!=v&&"\\"!=v){"file"!=this.h&&(this.j=a.j,this.o=a.o,this.u=a.u,this.g=a.g),l="relative path";continue}"\\"==v&&s("\\ is an invalid code point."),l="file"==this.h?"file host":"authority ignore slashes";break;case"authority first slash":if("/"!=v){s("Expected '/', got: "+v),l="authority ignore slashes";continue}l="authority second slash";break;case"authority second slash":if(l="authority ignore slashes","/"!=v){s("Expected '/', got: "+v);continue}break;case"authority ignore slashes":if("/"!=v&&"\\"!=v){l="authority";continue}s("Expected authority, got: "+v);break;case"authority":if("@"==v){for(m&&(s("@ already seen."),f+="%40"),m=!0,v=0;v<f.length;v++)"\t"==(_=f[v])||"\n"==_||"\r"==_?s("Invalid whitespace in authority."):":"==_&&null===this.g?this.g="":(_=n(_),null!==this.g?this.g+=_:this.u+=_);f=""}else{if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v){p-=f.length,f="",l="host";continue}f+=v}break;case"file host":if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v){2!=f.length||!h.test(f[0])||":"!=f[1]&&"|"!=f[1]?(0!=f.length&&(this.j=e.call(this,f),f=""),l="relative path start"):l="relative path";continue}"\t"==v||"\n"==v||"\r"==v?s("Invalid whitespace in file host."):f+=v;break;case"host":case"hostname":if(":"!=v||y){if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v){if(this.j=e.call(this,f),f="",l="relative path start",o)break t;continue}"\t"!=v&&"\n"!=v&&"\r"!=v?("["==v?y=!0:"]"==v&&(y=!1),f+=v):s("Invalid code point in host/hostname: "+v)}else if(this.j=e.call(this,f),f="",l="port","hostname"==o)break t;break;case"port":if(/[0-9]/.test(v))f+=v;else{if(void 0==v||"/"==v||"\\"==v||"?"==v||"#"==v||o){if(""!=f&&((f=parseInt(f,10))!=c[this.h]&&(this.o=f+""),f=""),o)break t;l="relative path start";continue}"\t"==v||"\n"==v||"\r"==v?s("Invalid code point in port: "+v):(i.call(this),this.i=!0)}break;case"relative path start":if("\\"==v&&s("'\\' not allowed in path."),l="relative path","/"!=v&&"\\"!=v)continue;break;case"relative path":void 0!=v&&"/"!=v&&"\\"!=v&&(o||"?"!=v&&"#"!=v)?"\t"!=v&&"\n"!=v&&"\r"!=v&&(f+=n(v)):("\\"==v&&s("\\ not allowed in relative path."),(_=u[f.toLowerCase()])&&(f=_),".."==f?(this.l.pop(),"/"!=v&&"\\"!=v&&this.l.push("")):"."==f&&"/"!=v&&"\\"!=v?this.l.push(""):"."!=f&&("file"==this.h&&0==this.l.length&&2==f.length&&h.test(f[0])&&"|"==f[1]&&(f=f[0]+":"),this.l.push(f)),f="","?"==v?(this.s="?",l="query"):"#"==v&&(this.D="#",l="fragment"));break;case"query":o||"#"!=v?void 0!=v&&"\t"!=v&&"\n"!=v&&"\r"!=v&&(this.s+=r(v)):(this.D="#",l="fragment");break;case"fragment":void 0!=v&&"\t"!=v&&"\n"!=v&&"\r"!=v&&(this.D+=v)}p++}}function i(){this.u=this.ra=this.h="",this.g=null,this.o=this.j="",this.l=[],this.D=this.s="",this.F=this.i=!1}function a(t,e){void 0===e||e instanceof a||(e=new a(String(e))),this.Ta=t,i.call(this),t=t.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,""),o.call(this,t,null,e)}var s=!1;if(!t.xb)try{var l=new URL("b","http://a");l.pathname="c%20d",s="http://a/c%20d"===l.href}catch(t){}if(!s){var c=Object.create(null);c.ftp=21,c.file=0,c.gopher=70,c.http=80,c.https=443,c.ws=80,c.wss=443;var u=Object.create(null);u["%2e"]=".",u[".%2e"]="..",u["%2e."]="..",u["%2e%2e"]="..";var h=/[a-zA-Z]/,d=/[a-zA-Z0-9\+\-\.]/;a.prototype={toString:function(){return this.href},get href(){if(this.i)return this.Ta;var t="";return""==this.u&&null==this.g||(t=this.u+(null!=this.g?":"+this.g:"")+"@"),this.protocol+(this.F?"//"+t+this.host:"")+this.pathname+this.s+this.D},set href(t){i.call(this),o.call(this,t)},get protocol(){return this.h+":"},set protocol(t){this.i||o.call(this,t+":","scheme start")},get host(){return this.i?"":this.o?this.j+":"+this.o:this.j},set host(t){!this.i&&this.F&&o.call(this,t,"host")},get hostname(){return this.j},set hostname(t){!this.i&&this.F&&o.call(this,t,"hostname")},get port(){return this.o},set port(t){!this.i&&this.F&&o.call(this,t,"port")},get pathname(){return this.i?"":this.F?"/"+this.l.join("/"):this.ra},set pathname(t){!this.i&&this.F&&(this.l=[],o.call(this,t,"relative path start"))},get search(){return this.i||!this.s||"?"==this.s?"":this.s},set search(t){!this.i&&this.F&&(this.s="?","?"==t[0]&&(t=t.slice(1)),o.call(this,t,"query"))},get hash(){return this.i||!this.D||"#"==this.D?"":this.D},set hash(t){this.i||(this.D="#","#"==t[0]&&(t=t.slice(1)),o.call(this,t,"fragment"))},get origin(){var t;if(this.i||!this.h)return"";switch(this.h){case"data":case"file":case"javascript":case"mailto":return"null"}return(t=this.host)?this.h+"://"+t:""}};var p=t.URL;p&&(a.createObjectURL=function(t){return p.createObjectURL.apply(p,arguments)},a.revokeObjectURL=function(t){p.revokeObjectURL(t)}),t.URL=a}}(window);var Mi=document.createElement("style");Mi.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var Li=document.querySelector("head");Li.insertBefore(Mi,Li.firstChild);var ki=window.customElements,ji=!1,Ii=null;function Ri(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document),Ii&&Ii(),ji=!0,window.WebComponents.ready=!0,document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}))}ki.polyfillWrapFlushCallback&&ki.polyfillWrapFlushCallback(function(t){Ii=t,ji&&t()}),"complete"!==document.readyState?(window.addEventListener("load",Ri),window.addEventListener("DOMContentLoaded",function(){window.removeEventListener("load",Ri),Ri()})):Ri()}).call(this)}).call(this,n(1),n(6).setImmediate)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2Jvb3QuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvcmVzb2x2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3NldHRpbmdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvc3R5bGUtZ2F0aGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9lbGVtZW50cy9kb20tbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9jYXNlLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0aWVzLWNoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0eS1hY2Nlc3NvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy90ZW1wbGF0ZS1zdGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbWl4aW5zL3Byb3BlcnR5LWVmZmVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0aWVzLW1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvaHRtbC10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9wb2x5bWVyMy1hcHAvcG9seW1lcjMtYXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAtMS9hcHAtMS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcG9seW1lcjMtYXBwL3BvbHltZXIzLWFwcC1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3dlYmNvbXBvbmVudHMtYnVuZGxlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwid2luZG93IiwiSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSIsInByb3AiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3b3JraW5nVVJMIiwicmVzb2x2ZURvYyIsIkNTU19VUkxfUlgiLCJBQlNfVVJMIiwicmVzb2x2ZVVybCIsInVybCIsImJhc2VVUkkiLCJ0ZXN0IiwidW5kZWZpbmVkIiwidSIsIlVSTCIsInBhdGhuYW1lIiwiaHJlZiIsImRvY3VtZW50IiwibG9jYXRpb24iLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImJhc2UiLCJjcmVhdGVFbGVtZW50IiwiaGVhZCIsImFwcGVuZENoaWxkIiwiYW5jaG9yIiwiYm9keSIsInJlc29sdmVDc3MiLCJjc3NUZXh0IiwicmVwbGFjZSIsInByZSIsInBvc3QiLCJwYXRoRnJvbVVybCIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwiQm9vbGVhbiIsIlNoYWR5Q1NTIiwibmF0aXZlQ3NzIiwiY3VzdG9tRWxlbWVudHMiLCJyb290UGF0aCIsInNhbml0aXplRE9NVmFsdWUiLCJtaXhpbl9kZWR1cGVJZCIsIk1peGluRnVuY3Rpb24iLCJfX21peGluQXBwbGljYXRpb25zIiwiX19taXhpblNldCIsImRlZHVwaW5nTWl4aW4iLCJtaXhpbiIsIm1peGluQXBwbGljYXRpb25zIiwiV2Vha01hcCIsIm1peGluRGVkdXBlSWQiLCJiYXNlU2V0IiwibWFwIiwiZXh0ZW5kZWQiLCJzZXQiLCJtaXhpblNldCIsIk1PRFVMRV9TVFlMRV9MSU5LX1NFTEVDVE9SIiwiSU5DTFVERV9BVFRSIiwiU0hBRFlfVU5TQ09QRURfQVRUUiIsImltcG9ydE1vZHVsZSIsIlBvbHltZXJEb21Nb2R1bGUiLCJpbXBvcnQiLCJzdHlsZUZvckltcG9ydCIsImltcG9ydERvYyIsImltcG9ydENzcyIsInRleHRDb250ZW50Iiwic3R5bGUiLCJzdHlsZXNGcm9tTW9kdWxlcyIsIm1vZHVsZUlkcyIsInRyaW0iLCJzcGxpdCIsInN0eWxlcyIsImxlbmd0aCIsInB1c2giLCJzdHlsZXNGcm9tTW9kdWxlIiwiY29uc29sZSIsIndhcm4iLCJfc3R5bGVzIiwiX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzIiwidGVtcGxhdGUiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGVzRnJvbVRlbXBsYXRlIiwiYXNzZXRwYXRoIiwiZSQiLCJjb250ZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImluY2x1ZGUiLCJnZXRBdHRyaWJ1dGUiLCJmaWx0ZXIiLCJpdGVtIiwiaW5kZXgiLCJzZWxmIiwiaW5kZXhPZiIsInAkIiwidW5zY29wZWQiLCJoYXNBdHRyaWJ1dGUiLCJfdW5zY29wZWRTdHlsZSIsInNldEF0dHJpYnV0ZSIsIl9zdHlsZSIsImxjTW9kdWxlcyIsImRvbV9tb2R1bGVfRG9tTW9kdWxlIiwiSFRNTEVsZW1lbnQiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJbb2JqZWN0IE9iamVjdF0iLCJpZCIsInNlbGVjdG9yIiwidG9Mb3dlckNhc2UiLCJmaW5kTW9kdWxlIiwib2xkIiwibmFtZXNwYWNlIiwicmVnaXN0ZXIiLCJfX2Fzc2V0cGF0aCIsIm93bmVyIiwiSFRNTEltcG9ydHMiLCJpbXBvcnRGb3JFbGVtZW50Iiwib3duZXJEb2N1bWVudCIsImluc3QiLCJzdHlsZU91dHNpZGVUZW1wbGF0ZUNoZWNrIiwicGF0aF9pc1BhdGgiLCJwYXRoIiwicGF0aF9yb290IiwiZG90SW5kZXgiLCJzbGljZSIsImlzQW5jZXN0b3IiLCJpc0Rlc2NlbmRhbnQiLCJ0cmFuc2xhdGUiLCJuZXdCYXNlIiwibm9ybWFsaXplIiwiQXJyYXkiLCJpc0FycmF5IiwicGFydHMiLCJhcmdzIiwidG9TdHJpbmciLCJqIiwiam9pbiIsInJvb3QiLCJpbmZvIiwibGFzdCIsImRlZmluZSIsImNhc2VNYXAiLCJEQVNIX1RPX0NBTUVMIiwiQ0FNRUxfVE9fREFTSCIsImRhc2hUb0NhbWVsQ2FzZSIsImRhc2giLCJ0b1VwcGVyQ2FzZSIsImNhbWVsVG9EYXNoQ2FzZSIsImNhbWVsIiwibWljcm90YXNrQ3VyckhhbmRsZSIsIm1pY3JvdGFza0xhc3RIYW5kbGUiLCJtaWNyb3Rhc2tDYWxsYmFja3MiLCJtaWNyb3Rhc2tOb2RlQ29udGVudCIsIm1pY3JvdGFza05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJsZW4iLCJjYiIsInNldFRpbWVvdXQiLCJzcGxpY2UiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsIm1pY3JvdGFzayIsInJ1biIsImNhbGxiYWNrIiwiaGFuZGxlIiwiaWR4IiwiRXJyb3IiLCJQcm9wZXJ0aWVzQ2hhbmdlZCIsInN1cGVyQ2xhc3MiLCJwcm9wcyIsInByb3RvIiwiX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IiLCJyZWFkT25seSIsIl9hZGRQcm9wZXJ0eVRvQXR0cmlidXRlTWFwIiwiX19kYXRhSGFzQWNjZXNzb3IiLCJhc3NpZ24iLCJfZGVmaW5lUHJvcGVydHlBY2Nlc3NvciIsIl9fZGF0YUF0dHJpYnV0ZXMiLCJhdHRyIiwiY29uc3RydWN0b3IiLCJhdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkiLCJfZ2V0UHJvcGVydHkiLCJfc2V0UHJvcGVydHkiLCJzdXBlciIsIl9fZGF0YUVuYWJsZWQiLCJfX2RhdGFSZWFkeSIsIl9fZGF0YUludmFsaWQiLCJfX2RhdGEiLCJfX2RhdGFQZW5kaW5nIiwiX19kYXRhT2xkIiwiX19kYXRhSW5zdGFuY2VQcm9wcyIsIl9fc2VyaWFsaXppbmciLCJfaW5pdGlhbGl6ZVByb3BlcnRpZXMiLCJfZmx1c2hQcm9wZXJ0aWVzIiwiX3NldFBlbmRpbmdQcm9wZXJ0eSIsIl9pbnZhbGlkYXRlUHJvcGVydGllcyIsImV4dCIsImNoYW5nZWQiLCJfc2hvdWxkUHJvcGVydHlDaGFuZ2UiLCJfaW5pdGlhbGl6ZUluc3RhbmNlUHJvcGVydGllcyIsInJlYWR5IiwiY2hhbmdlZFByb3BzIiwiX3Nob3VsZFByb3BlcnRpZXNDaGFuZ2UiLCJfcHJvcGVydGllc0NoYW5nZWQiLCJjdXJyZW50UHJvcHMiLCJvbGRQcm9wcyIsIl9hdHRyaWJ1dGVUb1Byb3BlcnR5IiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiYXR0cmlidXRlIiwidHlwZSIsIl9kZXNlcmlhbGl6ZVZhbHVlIiwidHlwZUZvclByb3BlcnR5IiwiYXJndW1lbnRzIiwiX3ZhbHVlVG9Ob2RlQXR0cmlidXRlIiwibm9kZSIsInN0ciIsIl9zZXJpYWxpemVWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIk51bWJlciIsInByb3BlcnR5X2FjY2Vzc29yc19jYXNlTWFwIiwiY2FzZV9tYXBfbmFtZXNwYWNlT2JqZWN0IiwibmF0aXZlUHJvcGVydGllcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRQcm90b3R5cGVPZiIsInByb3BlcnR5X2FjY2Vzc29yc19Qcm9wZXJ0eUFjY2Vzc29ycyIsImEkIiwiX19kYXRhUHJvdG8iLCJfaW5pdGlhbGl6ZVByb3RvUHJvcGVydGllcyIsImVsIiwiRGF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ4Iiwib3V0VmFsdWUiLCJwYXJzZSIsImlzTmFOIiwiU3RyaW5nIiwibW9kZWwiLCJzYXZlQWNjZXNzb3JWYWx1ZSIsInRlbXBsYXRlRXh0ZW5zaW9ucyIsImRvbS1pZiIsImRvbS1yZXBlYXQiLCJ3cmFwVGVtcGxhdGVFeHRlbnNpb24iLCJpcyIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJhdHRyaWJ1dGVzIiwiZmluZFRlbXBsYXRlTm9kZSIsIm5vZGVJbmZvIiwicGFyZW50IiwicGFyZW50SW5mbyIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsInBhcmVudEluZGV4IiwiYXBwbHlJZFRvTWFwIiwiYXBwbHlFdmVudExpc3RlbmVyIiwiZXZlbnRzIiwiX2FkZE1ldGhvZEV2ZW50TGlzdGVuZXJUb05vZGUiLCJhcHBseVRlbXBsYXRlQ29udGVudCIsInRlbXBsYXRlSW5mbyIsIl90ZW1wbGF0ZUluZm8iLCJUZW1wbGF0ZVN0YW1wIiwib3V0ZXJUZW1wbGF0ZUluZm8iLCJub2RlSW5mb0xpc3QiLCJzdHJpcFdoaXRlU3BhY2UiLCJfcGFyc2VUZW1wbGF0ZUNvbnRlbnQiLCJfcGFyc2VUZW1wbGF0ZU5vZGUiLCJub3RlZCIsImVsZW1lbnQiLCJsb2NhbE5hbWUiLCJoYXNJbnNlcnRpb25Qb2ludCIsIl9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUiLCJfcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMiLCJoYXNBdHRyaWJ1dGVzIiwiX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlcyIsIm5leHQiLCJub2RlVHlwZSIsIk5vZGUiLCJURVhUX05PREUiLCJyZW1vdmVDaGlsZCIsImNoaWxkSW5mbyIsImluZm9JbmRleCIsIl9wYXJzZVRlbXBsYXRlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImF0dHJzIiwiZnJvbSIsImEiLCJfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUiLCJIVE1MVGVtcGxhdGVFbGVtZW50IiwiZGVjb3JhdGUiLCJkb20iLCJpbXBvcnROb2RlIiwiX19ub0luc2VydGlvblBvaW50Iiwibm9kZXMiLCJub2RlTGlzdCIsIiQiLCJldmVudE5hbWUiLCJtZXRob2ROYW1lIiwiY29udGV4dCIsImhhbmRsZXIiLCJfbWV0aG9kSG9zdCIsImRldGFpbCIsImNyZWF0ZU5vZGVFdmVudEhhbmRsZXIiLCJfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQ2FzZU1hcCIsInByb3BlcnR5X2VmZmVjdHNfZGVkdXBlSWQiLCJUWVBFUyIsIkNPTVBVVEUiLCJSRUZMRUNUIiwiTk9USUZZIiwiUFJPUEFHQVRFIiwiT0JTRVJWRSIsIlJFQURfT05MWSIsImNhcGl0YWxBdHRyaWJ1dGVSZWdleCIsIlByb3BlcnR5RWZmZWN0c1R5cGUiLCJlbnN1cmVPd25FZmZlY3RNYXAiLCJlZmZlY3RzIiwicHJvdG9GeCIsImluc3RGeCIsInJ1bkVmZmVjdHMiLCJoYXNQYXRocyIsImV4dHJhQXJncyIsInJhbiIsInJ1bkVmZmVjdHNGb3JQcm9wZXJ0eSIsImRlZHVwZUlkIiwiZnhzIiwiZngiLCJsYXN0UnVuIiwicGF0aE1hdGNoZXNUcmlnZ2VyIiwidHJpZ2dlciIsImZuIiwidHJpZ2dlclBhdGgiLCJzdHJ1Y3R1cmVkIiwid2lsZGNhcmQiLCJydW5PYnNlcnZlckVmZmVjdCIsIm1ldGhvZCIsImNoYW5nZWRQcm9wIiwiZHluYW1pY0ZuIiwibm90aWZ5UGF0aCIsInJvb3RQcm9wZXJ0eSIsImRpc3BhdGNoTm90aWZ5RXZlbnQiLCJxdWV1ZVByb3BlcnR5IiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwicnVuTm90aWZ5RWZmZWN0IiwicnVuUmVmbGVjdEVmZmVjdCIsImF0dHJOYW1lIiwiX3Byb3BlcnR5VG9BdHRyaWJ1dGUiLCJydW5Db21wdXRlZEVmZmVjdCIsInJlc3VsdCIsInJ1bk1ldGhvZEVmZmVjdCIsImNvbXB1dGVkUHJvcCIsIm1ldGhvZEluZm8iLCJhZGRCaW5kaW5nIiwia2luZCIsInRhcmdldCIsImxpdGVyYWwiLCJiaW5kaW5ncyIsImJpbmRpbmciLCJpc0NvbXBvdW5kIiwic2hvdWxkQWRkTGlzdGVuZXIiLCJldmVudCIsIm5lZ2F0ZSIsImxpc3RlbmVyRXZlbnQiLCJsaXN0ZW5lck5lZ2F0ZSIsInBhcnQiLCJjb21wb3VuZEluZGV4IiwiYWRkRWZmZWN0Rm9yQmluZGluZ1BhcnQiLCJkZXBlbmRlbmNpZXMiLCJldmFsdWF0b3IiLCJwYXJzZUFyZyIsIl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0IiwicnVuQmluZGluZ0VmZmVjdCIsInNvdXJjZSIsIl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQiLCJfc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoIiwiX2VucXVldWVDbGllbnQiLCJzdG9yYWdlIiwiX19kYXRhQ29tcG91bmRTdG9yYWdlIiwiY29tcHV0ZUJpbmRpbmdWYWx1ZSIsIl9zZXRVbm1hbmFnZWRQcm9wZXJ0eVRvTm9kZSIsImFwcGx5QmluZGluZ1ZhbHVlIiwiX2V2YWx1YXRlQmluZGluZyIsInNldHVwQ29tcG91bmRTdG9yYWdlIiwibGl0ZXJhbHMiLCJhZGROb3RpZnlMaXN0ZW5lciIsImZyb21Qcm9wIiwidG9QYXRoIiwiZnJvbVBhdGgiLCJoYW5kbGVOb3RpZmljYXRpb24iLCJjcmVhdGVNZXRob2RFZmZlY3QiLCJzaWciLCJlZmZlY3RGbiIsInN0YXRpYyIsImFyZyIsIl9hZGRQcm9wZXJ0eUVmZmVjdCIsImRhdGEiLCJ2YWx1ZXMiLCJ2IiwiYmFzZUNoYW5nZWQiLCJtYXRjaGVzIiwibWFyc2hhbEFyZ3MiLCJhcHBseSIsImVtcHR5QXJyYXkiLCJiaW5kaW5nUmVnZXgiLCJSZWdFeHAiLCJPUEVOX0JSQUNLRVQiLCJsaXRlcmFsRnJvbVBhcnRzIiwicGFyc2VNZXRob2QiLCJleHByZXNzaW9uIiwibWF0Y2giLCJhcmdMaXN0IiwicmF3QXJnIiwicGFyc2VBcmdzIiwiZmMiLCJub3RpZnlTcGxpY2VzIiwiYXJyYXkiLCJzcGxpY2VzIiwic3BsaWNlc1BhdGgiLCJpbmRleFNwbGljZXMiLCJub3RpZnlTcGxpY2UiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsInByb3BlcnR5X2VmZmVjdHNfUHJvcGVydHlFZmZlY3RzIiwicHJvcGVydHlFZmZlY3RzQmFzZSIsIlByb3BlcnR5RWZmZWN0cyIsIl9fZGF0YUNvdW50ZXIiLCJfX2RhdGFDbGllbnRzUmVhZHkiLCJfX2RhdGFQZW5kaW5nQ2xpZW50cyIsIl9fZGF0YVRvTm90aWZ5IiwiX19kYXRhTGlua2VkUGF0aHMiLCJfX2RhdGFIYXNQYXRocyIsIl9fZGF0YUhvc3QiLCJfX2RhdGFUZW1wIiwiX19kYXRhQ2xpZW50c0luaXRpYWxpemVkIiwiX19jb21wdXRlRWZmZWN0cyIsIl9fcmVmbGVjdEVmZmVjdHMiLCJfX25vdGlmeUVmZmVjdHMiLCJfX3Byb3BhZ2F0ZUVmZmVjdHMiLCJfX29ic2VydmVFZmZlY3RzIiwiX19yZWFkT25seSIsIl9fdGVtcGxhdGVJbmZvIiwiUFJPUEVSVFlfRUZGRUNUX1RZUEVTIiwiaG9zdFN0YWNrIiwicmVnaXN0ZXJIb3N0IiwiZWZmZWN0IiwiX2hhc1Byb3BlcnR5RWZmZWN0Iiwic2hvdWxkTm90aWZ5IiwiaXNQYXRoTm90aWZpY2F0aW9uIiwibGlua3MiLCJsaW5rIiwiYiIsImNvbXB1dGVMaW5rZWRQYXRocyIsImlzUGF0aCIsInByZXZQcm9wcyIsImNsaWVudCIsIl9fZW5hYmxlT3JGbHVzaENsaWVudHMiLCJfcmVhZHlDbGllbnRzIiwiY2xpZW50cyIsIl9lbmFibGVQcm9wZXJ0aWVzIiwic2V0UmVhZE9ubHkiLCJfZmx1c2hDbGllbnRzIiwiY29tcHV0ZUVmZmVjdHMiLCJpbnB1dFByb3BzIiwicnVuQ29tcHV0ZWRFZmZlY3RzIiwibm90aWZ5UHJvcHMiLCJfcHJvcGFnYXRlUHJvcGVydHlDaGFuZ2VzIiwibm90aWZpZWQiLCJob3N0IiwicnVuTm90aWZ5RWZmZWN0cyIsInByb3BlcnR5RWZmZWN0cyIsIm5leHRUZW1wbGF0ZUluZm8iLCJ0byIsIml0ZW1zIiwicmV0IiwiaGFkTGVuZ3RoIiwicG9wIiwic3RhcnQiLCJkZWxldGVDb3VudCIsIk1hdGgiLCJmbG9vciIsInNoaWZ0IiwidW5zaGlmdCIsInByb3BQYXRoIiwicHJvdGVjdGVkU2V0dGVyIiwidXBwZXIiLCJfY3JlYXRlUHJvcGVydHlPYnNlcnZlciIsIl9jcmVhdGVNZXRob2RPYnNlcnZlciIsIl9jcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eSIsIl9jcmVhdGVSZWFkT25seVByb3BlcnR5IiwiX2NyZWF0ZVJlZmxlY3RlZFByb3BlcnR5IiwiX2NyZWF0ZUNvbXB1dGVkUHJvcGVydHkiLCJfYmluZFRlbXBsYXRlIiwiaW5zdGFuY2VCaW5kaW5nIiwid2FzUHJlQm91bmQiLCJfX3RlbXBsYXRlSW5mb0xhc3QiLCJwcmV2aW91c1RlbXBsYXRlSW5mbyIsImhvc3RQcm9wcyIsImJlZ2luSG9zdGluZyIsIl9zdGFtcFRlbXBsYXRlIiwiZW5kSG9zdGluZyIsImNoaWxkTm9kZXMiLCJzZXR1cEJpbmRpbmdzIiwiX3BhcnNlQmluZGluZ3MiLCJvcmlnTmFtZSIsInRleHQiLCJsYXN0SW5kZXgiLCJleGVjIiwiY3VzdG9tRXZlbnQiLCJub3RpZnlFdmVudCIsImNvbG9uIiwic2lnbmF0dXJlIiwiZHluYW1pY0ZucyIsInN0YWNrIiwic3RhY2tMZW4iLCJwcm9wZXJ0aWVzX21peGluX1Byb3BlcnRpZXNNaXhpbiIsInN1cGVyUHJvcGVydGllc0NsYXNzIiwic3VwZXJDdG9yIiwiUHJvcGVydGllc01peGluIiwib3duUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJvdXRwdXQiLCJub3JtYWxpemVQcm9wZXJ0aWVzIiwiX19vd25Qcm9wZXJ0aWVzIiwiX3Byb3BlcnRpZXMiLCJrZXlzIiwiZmluYWxpemUiLCJfX2ZpbmFsaXplZCIsIl9maW5hbGl6ZUNsYXNzIiwiY3JlYXRlUHJvcGVydGllcyIsIl9fcHJvcGVydGllcyIsImNvbm5lY3RlZENhbGxiYWNrIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJFbGVtZW50TWl4aW4iLCJwb2x5bWVyRWxlbWVudEJhc2UiLCJjcmVhdGVQcm9wZXJ0eUZyb21Db25maWciLCJhbGxQcm9wcyIsImNvbXB1dGVkIiwiX2hhc1JlYWRPbmx5RWZmZWN0IiwicmVmbGVjdFRvQXR0cmlidXRlIiwiX2hhc1JlZmxlY3RFZmZlY3QiLCJub3RpZnkiLCJfaGFzTm90aWZ5RWZmZWN0Iiwib2JzZXJ2ZXIiLCJwcm9jZXNzRWxlbWVudFN0eWxlcyIsImtsYXNzIiwidGVtcGxhdGVTdHlsZXMiLCJzdHlsZXNXaXRoSW1wb3J0cyIsImxpbmtlZFN0eWxlcyIsInN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzIiwiZmlyc3RUZW1wbGF0ZUNoaWxkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJfcHJvY2Vzc1N0eWxlVGV4dCIsImluc2VydEJlZm9yZSIsInRlbXBsYXRlU3R5bGVJbmRleCIsInRlbXBsYXRlU3R5bGUiLCJjbG9uZU5vZGUiLCJwcmVwYXJlVGVtcGxhdGUiLCJyZWdpc3RyYXRpb25zIiwib2JzZXJ2ZXJzIiwiX19vd25PYnNlcnZlcnMiLCJvd25PYnNlcnZlcnMiLCJjcmVhdGVPYnNlcnZlcnMiLCJlcnJvciIsIl90ZW1wbGF0ZSIsImltcG9ydFBhdGgiLCJtZXRhIiwiaW1wb3J0TWV0YSIsIl9pbXBvcnRQYXRoIiwiaW5zdGFuY2VDb3VudCIsIl9maW5hbGl6ZVRlbXBsYXRlIiwiX19wcm9wZXJ0eURlZmF1bHRzIiwicHJvcGVydHlEZWZhdWx0cyIsIl9oYXNBY2Nlc3NvciIsIl9fcG9seW1lckZpbmFsaXplZCIsInN0eWxlRWxlbWVudCIsIl9hdHRhY2hEb20iLCJhdHRhY2hTaGFkb3ciLCJzaGFkb3dSb290Iiwic3R5bGVTdWJ0cmVlIiwiTGl0ZXJhbFN0cmluZyIsInN0cmluZyIsImxpdGVyYWxWYWx1ZSIsImh0bWwiLCJzdHJpbmdzIiwiaW5uZXJIVE1MIiwicmVkdWNlIiwiYWNjIiwiaHRtbFZhbHVlIiwicG9seW1lcl9lbGVtZW50X1BvbHltZXJFbGVtZW50IiwicHJvcDEiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJnbG9iYWwiLCJzZXRJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJtZXNzYWdlUHJlZml4IiwicmFuZG9tIiwib25HbG9iYWxNZXNzYWdlIiwiYXR0YWNoRXZlbnQiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsIk1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJ0YXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJzY29wZSIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImFhIiwiZGVmaW5lUHJvcGVydGllcyIsImJhIiwiZGEiLCJlYSIsImthIiwiZmEiLCJpdGVyYXRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiaGEiLCJpYSIsImRvbmUiLCJqYSIsInNldFByb3RvdHlwZU9mIiwibGEiLCJuYSIsIl9fcHJvdG9fXyIsIlVhIiwiVHlwZUVycm9yIiwib2EiLCJwYSIsImYiLCJEYSIsIlMiLCJxYSIsInJhIiwiV2EiLCIkYSIsInNhIiwid2EiLCJ4YSIsInJldHVybiIsInlhIiwiQiIsInRocm93IiwidmEiLCJ6YSIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwiRXZlbnQiLCJjYW5jZWxhYmxlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiYnViYmxlcyIsIk1vdXNlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInZpZXciLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwiY3RybEtleSIsImFsdEtleSIsInNoaWZ0S2V5IiwibWV0YUtleSIsImJ1dHRvbiIsInJlbGF0ZWRUYXJnZXQiLCJHIiwiV2ViQ29tcG9uZW50cyIsIkRPQ1VNRU5UX05PREUiLCJ1YSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJqZiIsIkEiLCJEb2N1bWVudEZyYWdtZW50Iiwibm9kZU5hbWUiLCJEb2N1bWVudCIsImgiLCJrIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRWxlbWVudCIsImtmIiwiY2EiLCJFYyIsInEiLCJGYyIsImxmIiwiUiIsIm5hbWVzcGFjZVVSSSIsIkQiLCJwaCIsIm9iIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRoIiwidGQiLCJwYiIsImxhc3RDaGlsZCIsIm1mIiwibmYiLCJHYyIsIm9mIiwicGYiLCJFTEVNRU5UX05PREUiLCJDT01NRU5UX05PREUiLCJxYiIsInFmIiwicmYiLCJCYSIsIkNhIiwiSiIsIkFhIiwiViIsIkVhIiwiRmEiLCJiYiIsIkdhIiwiSGEiLCJ0aGVuIiwiSWEiLCJyZXNvbHZlIiwicmVqZWN0IiwiUHJvbWlzZSIsImFsbCIsInJhY2UiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJrYiIsIlFhIiwieSIsIlJhIiwiVGEiLCJTYSIsImZvciIsImtleUZvciIsInN1YnN0ciIsIkJiIiwiQ2IiLCJzZWFyY2giLCJFYiIsIkZiIiwidW5zY29wYWJsZXMiLCJ2YWx1ZU9mIiwiVmEiLCJTZXQiLCJmb3JFYWNoIiwiTWFwIiwiZmxhZ3MiLCJYYSIsInciLCJub09wdHMiLCJaYSIsIllhIiwibG9nIiwiYWIiLCJzaGFkeWRvbSIsIlNoYWR5RE9NIiwiZm9yY2UiLCJjZSIsIk4iLCJhc3NpZ25lZFNsb3QiLCJhc3NpZ25lZE5vZGVzIiwiVCIsInByZXZpb3VzU2libGluZyIsIlciLCJKYSIsImZvcmNlUG9seWZpbGwiLCJ0b0pTT04iLCJ6IiwiZ2V0Um9vdE5vZGUiLCJkYiIsIksiLCJ0YSIsImViIiwiZmIiLCJnYiIsIkMiLCJoYiIsImliIiwiamIiLCJtYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJsYiIsIm5iIiwicmIiLCJzYiIsInRiIiwidWIiLCJjb250YWlucyIsInZiIiwid2IiLCJuYW1lZEl0ZW0iLCJ5YiIsInhiIiwiemIiLCJBYiIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJsaXN0IiwiZmx1c2giLCJ0YWtlUmVjb3JkcyIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiV2luZG93IiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJnZXRFbGVtZW50QnlJZCIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIkUiLCJtYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsIkYiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiTm9kZUZpbHRlciIsIlNIT1dfQUxMIiwiSCIsIlNIT1dfRUxFTUVOVCIsImdjIiwiY3VycmVudE5vZGUiLCJJIiwicGFyZW50RWxlbWVudCIsImxhc3RFbGVtZW50Q2hpbGQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY2hpbGRyZW4iLCJTSE9XX1RFWFQiLCJuZXh0Tm9kZSIsIm5vZGVWYWx1ZSIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJMIiwibWMiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwic2MiLCJ0YyIsImNsYXNzTmFtZSIsInVjIiwiY2hpbGRFbGVtZW50Q291bnQiLCJjcmVhdGVFbGVtZW50TlMiLCJ2YyIsIndjIiwiYWN0aXZlRWxlbWVudCIsIk0iLCJ4YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJTY29waW5nU2hpbSIsInNldEVsZW1lbnRDbGFzcyIsImJkIiwibm93IiwiY2QiLCJkZCIsImJsdXIiLCJmb2N1cyIsImZvY3VzaW4iLCJmb2N1c291dCIsImNsaWNrIiwiZGJsY2xpY2siLCJtb3VzZWRvd24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIm1vdXNlbW92ZSIsIm1vdXNlb3V0IiwibW91c2VvdmVyIiwibW91c2V1cCIsIndoZWVsIiwiYmVmb3JlaW5wdXQiLCJpbnB1dCIsImtleWRvd24iLCJrZXl1cCIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbnVwZGF0ZSIsImNvbXBvc2l0aW9uZW5kIiwidG91Y2hzdGFydCIsInRvdWNoZW5kIiwidG91Y2htb3ZlIiwidG91Y2hjYW5jZWwiLCJwb2ludGVyb3ZlciIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVyY2FuY2VsIiwicG9pbnRlcm91dCIsInBvaW50ZXJsZWF2ZSIsImdvdHBvaW50ZXJjYXB0dXJlIiwibG9zdHBvaW50ZXJjYXB0dXJlIiwiZHJhZ3N0YXJ0IiwiZHJhZyIsImRyYWdlbnRlciIsImRyYWdsZWF2ZSIsImRyYWdvdmVyIiwiZHJvcCIsImRyYWdlbmQiLCJET01BY3RpdmF0ZSIsIkRPTUZvY3VzSW4iLCJET01Gb2N1c091dCIsImtleXByZXNzIiwiZWQiLCJET01BdHRyTW9kaWZpZWQiLCJET01BdHRyaWJ1dGVOYW1lQ2hhbmdlZCIsIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZCIsIkRPTUVsZW1lbnROYW1lQ2hhbmdlZCIsIkRPTU5vZGVJbnNlcnRlZCIsIkRPTU5vZGVJbnNlcnRlZEludG9Eb2N1bWVudCIsIkRPTU5vZGVSZW1vdmVkIiwiRE9NTm9kZVJlbW92ZWRGcm9tRG9jdW1lbnQiLCJET01TdWJ0cmVlTW9kaWZpZWQiLCJmZCIsImdkIiwiaGQiLCJjb21wb3NlZCIsIloiLCJpc1RydXN0ZWQiLCJjb21wb3NlZFBhdGgiLCJfX3RhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJfX2hhbmRsZXJzIiwibWQiLCJBVF9UQVJHRVQiLCJuZCIsImNhcHR1cmUiLCJwYXNzaXZlIiwib2QiLCJoYW5kbGVFdmVudCIsIm1hIiwicGQiLCJldmVudFBoYXNlIiwiQlVCQkxJTkdfUEhBU0UiLCJDQVBUVVJJTkdfUEhBU0UiLCJidWJibGUiLCJxZCIsIl9fcGF0Y2hQcm90byIsInNkIiwidWQiLCJ3ZCIsIlgiLCJ4ZCIsIm1pbiIsInlkIiwicmV2ZXJzZSIsIkNkIiwiemQiLCJBZCIsIkJkIiwiZGVmZXJDb25uZWN0aW9uQ2FsbGJhY2tzIiwicmVhZHlTdGF0ZSIsIkRkIiwiemMiLCJFZCIsIl9yZW5kZXJSb290IiwiRmQiLCJzbG90IiwiR2QiLCJIZCIsInNvcnQiLCJJZCIsImNsZWFyIiwiQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5IiwiaXNDb25uZWN0ZWQiLCJKZCIsIktkIiwiTGQiLCJNZCIsIkFUVFJJQlVURV9OT0RFIiwiV2MiLCJOZCIsIk9kIiwiUGQiLCJmbGF0dGVuIiwiUWQiLCJSZCIsImFkIiwiX2FjdGl2ZUVsZW1lbnQiLCJTZCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJpblVzZSIsInBhdGNoIiwiaXNTaGFkeVJvb3QiLCJlbnF1ZXVlIiwic2V0dGluZ3MiLCJmaWx0ZXJNdXRhdGlvbnMiLCJvYnNlcnZlQ2hpbGRyZW4iLCJhZGQiLCJQIiwidW5vYnNlcnZlQ2hpbGRyZW4iLCJkZWxldGUiLCJzaXplIiwibmF0aXZlTWV0aG9kcyIsIm5hdGl2ZVRyZWUiLCJyZCIsInZkIiwiWWQiLCJuYXRpdmVIVE1MRWxlbWVudCIsIlRleHQiLCJIVE1MU2xvdEVsZW1lbnQiLCJ5YyIsIlNoYWRvd1Jvb3QiLCJaZCIsIiRkIiwiaGFzIiwiTyIsIl9fQ0VfaXNJbXBvcnREb2N1bWVudCIsImFlIiwiYmUiLCJfX0NFX3NoYWRvd1Jvb3QiLCJlZSIsImZlIiwiUSIsIl9fQ0Vfc3RhdGUiLCJnZSIsIl9fQ0VfaGFzUmVnaXN0cnkiLCJfX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQiLCJkZWZhdWx0VmlldyIsImNvbnN0cnVjdGlvblN0YWNrIiwiX19DRV9kZWZpbml0aW9uIiwiaGUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiaWUiLCJkaXNjb25uZWN0IiwiamUiLCJfX0NFX3BhdGNoZWQiLCJTeW50YXhFcnJvciIsImFkb3B0ZWRDYWxsYmFjayIsImRlIiwia2UiLCJ3aGVuRGVmaW5lZCIsInNvbWUiLCJ1cGdyYWRlIiwicG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayIsImxlIiwibWUiLCJuZSIsIm9lIiwicHJlcGVuZCIsInBlIiwiYXBwZW5kIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsImdldEF0dHJpYnV0ZU5TIiwiRWUiLCJzZXRBdHRyaWJ1dGVOUyIsIkZlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJHZSIsImluc2VydEFkamFjZW50RWxlbWVudCIsIkhlIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiSWUiLCJKZSIsIktlIiwiYmVmb3JlIiwiTGUiLCJhZnRlciIsIk1lIiwicmVwbGFjZVdpdGgiLCJOZSIsInJlbW92ZSIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJWZSIsIiRlIiwiVWUiLCJUZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiYWYiLCJlbmQiLCJydWxlcyIsInByZXZpb3VzIiwicGFyc2VkQ3NzVGV4dCIsImF0UnVsZSIsInBhcnNlZFNlbGVjdG9yIiwia2V5ZnJhbWVzTmFtZSIsImJmIiwiZWYiLCJjZiIsImRmIiwiZmYiLCJnZiIsImhmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJCZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiVSIsIkNmIiwic2hpbWNzc3Byb3BlcnRpZXMiLCJDU1MiLCJzdXBwb3J0cyIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJMZiIsIndmIiwiTWYiLCJfX2Nzc1J1bGVzIiwiTmYiLCJtYXRjaE1lZGlhIiwiT2YiLCJQZiIsIlFmIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkciLCJTZiIsIlRmIiwiZXh0ZW5kcyIsIlkiLCJVZiIsIlZmIiwiX19zdHlsZVNjb3BlZCIsIldmIiwiWGYiLCJjbGFzc0xpc3QiLCJZZiIsIlpmIiwiX19jc3NCdWlsZCIsImFnIiwiYmciLCJjZyIsIiRmIiwiZGciLCJlZyIsImZnIiwibWciLCJwZyIsInRnIiwidWciLCJnZyIsImhnIiwiaWciLCJrZyIsInFnIiwicmciLCJzZyIsImxnIiwibmciLCJvZyIsInN0b3AiLCJqZyIsInZnIiwid2ciLCJfX3N0eWxlSW5mbyIsInhnIiwieWciLCJfZ2V0U3R5bGVSdWxlcyIsInpnIiwiQWciLCJDZyIsIkRnIiwiRWciLCJGZyIsIlJmIiwiSWciLCJEYiIsIkhnIiwiSmciLCJMZyIsIktnIiwiZ2EiLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiY3JlYXRlQ29tbWVudCIsIlJnIiwiY2FjaGUiLCJTZyIsIlRnIiwiU1ZHRWxlbWVudCIsInN0b3JlIiwiZmV0Y2giLCJVZyIsIlZnIiwiV2ciLCJ3aGVuUmVhZHkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJYZyIsIllnIiwiWmciLCIkZyIsIl9hcHBseVNoaW1DdXJyZW50VmVyc2lvbiIsIl9hcHBseVNoaW1WYWxpZGF0aW5nVmVyc2lvbiIsIl9hcHBseVNoaW1OZXh0VmVyc2lvbiIsImFoIiwiY2giLCJkaCIsIkFwcGx5U2hpbSIsImludmFsaWRDYWxsYmFjayIsIkN1c3RvbVN0eWxlSW50ZXJmYWNlIiwidHJhbnNmb3JtQ2FsbGJhY2siLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiZW5xdWV1ZWQiLCJmbHVzaEN1c3RvbVN0eWxlcyIsImVoIiwiZ2giLCJmaCIsInBhcnNlSW50IiwiR2ciLCJwcmVwYXJlVGVtcGxhdGVEb20iLCJwcmVwYXJlVGVtcGxhdGVTdHlsZXMiLCJ0cmFuc2Zvcm1SdWxlcyIsIl9zdHlsZUFzdCIsIkJnIiwicHJvY2Vzc1N0eWxlcyIsImdldFN0eWxlRm9yQ3VzdG9tU3R5bGUiLCJzdHlsZURvY3VtZW50IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImJoIiwiX3VzZUNvdW50IiwidHJhbnNmb3JtUnVsZSIsImdldENvbXB1dGVkU3R5bGVWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX3N0eWxlSW5mb0Zvck5vZGUiLCJ0cmFuc2Zvcm1DdXN0b21TdHlsZUZvckRvY3VtZW50IiwiZ2V0U3R5bGVBc3QiLCJzdHlsZUFzdFRvU3RyaW5nIiwibmF0aXZlU2hhZG93IiwiaGgiLCJpaCIsImNoYXJDb2RlQXQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmdHAiLCJmaWxlIiwiZ29waGVyIiwiaHR0cCIsImh0dHBzIiwid3MiLCJ3c3MiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsImhhc2giLCJvcmlnaW4iLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJib290c3RyYXAiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsYUFBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFB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MG1DLFdBQUE1NEMsT0FBQWtTLG9CQUFBMG1DLFVBQUE1NEMsT0FBQXFCLFVBQTRGcTNDLFNBQVNELElBQUEsRUFBTXo0QyxPQUFBMnVCLGNBQUFqaUIsT0FBQSxFQUE4QnJMLFNBQUFxVSxjQUFBLElBQUFDLFlBQUEsc0JBQTZEaVksU0FBQSxLQUExUzRxQixHQUFBL08sMkJBQUErTyxHQUFBL08sMEJBQUEsU0FBQXozQixHQUF1RTBtQyxHQUFBMW1DLEVBQUt5bUMsSUFBQXptQyxNQUNoZCxhQUFBM1EsU0FBQTRpQyxZQUFBamtDLE9BQUFrVCxpQkFBQSxPQUFBeWxDLElBQUEzNEMsT0FBQWtULGlCQUFBLDhCQUEySGxULE9BQUFtVCxvQkFBQSxPQUFBd2xDLElBQXNDQSxRQUFLQSxPQUFTeDZDLEtBQUFpQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0L1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG53aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3ApIHsgcmV0dXJuIHByb3A7IH07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxubGV0IENTU19VUkxfUlggPSAvKHVybFxcKCkoW14pXSopKFxcKSkvZztcbmxldCBBQlNfVVJMID0gLyheXFwvKXwoXiMpfCheW1xcdy1cXGRdKjopLztcbmxldCB3b3JraW5nVVJMO1xubGV0IHJlc29sdmVEb2M7XG4vKipcbiAqIFJlc29sdmVzIHRoZSBnaXZlbiBVUkwgYWdhaW5zdCB0aGUgcHJvdmlkZWQgYGJhc2VVcmknLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIHBlcmZvcm1zIG5vIHJlc29sdXRpb24gZm9yIFVSTHMgdGhhdCBzdGFydFxuICogd2l0aCBgL2AgKGFic29sdXRlIFVSTHMpIG9yIGAjYCAoaGFzaCBpZGVudGlmaWVycykuICBGb3IgZ2VuZXJhbCBwdXJwb3NlXG4gKiBVUkwgcmVzb2x1dGlvbiwgdXNlIGB3aW5kb3cuVVJMYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIElucHV0IFVSTCB0byByZXNvbHZlXG4gKiBAcGFyYW0gez9zdHJpbmc9fSBiYXNlVVJJIEJhc2UgVVJJIHRvIHJlc29sdmUgdGhlIFVSTCBhZ2FpbnN0XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHJlc29sdmVkIFVSTFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVVybCh1cmwsIGJhc2VVUkkpIHtcbiAgaWYgKHVybCAmJiBBQlNfVVJMLnRlc3QodXJsKSkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgLy8gTGF6eSBmZWF0dXJlIGRldGVjdGlvbi5cbiAgaWYgKHdvcmtpbmdVUkwgPT09IHVuZGVmaW5lZCkge1xuICAgIHdvcmtpbmdVUkwgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdSA9IG5ldyBVUkwoJ2InLCAnaHR0cDovL2EnKTtcbiAgICAgIHUucGF0aG5hbWUgPSAnYyUyMGQnO1xuICAgICAgd29ya2luZ1VSTCA9ICh1LmhyZWYgPT09ICdodHRwOi8vYS9jJTIwZCcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNpbGVudGx5IGZhaWxcbiAgICB9XG4gIH1cbiAgaWYgKCFiYXNlVVJJKSB7XG4gICAgYmFzZVVSSSA9IGRvY3VtZW50LmJhc2VVUkkgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIH1cbiAgaWYgKHdvcmtpbmdVUkwpIHtcbiAgICByZXR1cm4gKG5ldyBVUkwodXJsLCBiYXNlVVJJKSkuaHJlZjtcbiAgfVxuICAvLyBGYWxsYmFjayB0byBjcmVhdGluZyBhbiBhbmNob3IgaW50byBhIGRpc2Nvbm5lY3RlZCBkb2N1bWVudC5cbiAgaWYgKCFyZXNvbHZlRG9jKSB7XG4gICAgcmVzb2x2ZURvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgndGVtcCcpO1xuICAgIHJlc29sdmVEb2MuYmFzZSA9IHJlc29sdmVEb2MuY3JlYXRlRWxlbWVudCgnYmFzZScpO1xuICAgIHJlc29sdmVEb2MuaGVhZC5hcHBlbmRDaGlsZChyZXNvbHZlRG9jLmJhc2UpO1xuICAgIHJlc29sdmVEb2MuYW5jaG9yID0gcmVzb2x2ZURvYy5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgcmVzb2x2ZURvYy5ib2R5LmFwcGVuZENoaWxkKHJlc29sdmVEb2MuYW5jaG9yKTtcbiAgfVxuICByZXNvbHZlRG9jLmJhc2UuaHJlZiA9IGJhc2VVUkk7XG4gIHJlc29sdmVEb2MuYW5jaG9yLmhyZWYgPSB1cmw7XG4gIHJldHVybiByZXNvbHZlRG9jLmFuY2hvci5ocmVmIHx8IHVybDtcblxufVxuXG4vKipcbiAqIFJlc29sdmVzIGFueSByZWxhdGl2ZSBVUkwncyBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHQgYWdhaW5zdCB0aGUgcHJvdmlkZWRcbiAqIGBvd25lckRvY3VtZW50YCdzIGBiYXNlVVJJYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dCBDU1MgdGV4dCB0byBwcm9jZXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSBQcm9jZXNzZWQgQ1NTIHRleHQgd2l0aCByZXNvbHZlZCBVUkwnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNzcyhjc3NUZXh0LCBiYXNlVVJJKSB7XG4gIHJldHVybiBjc3NUZXh0LnJlcGxhY2UoQ1NTX1VSTF9SWCwgZnVuY3Rpb24obSwgcHJlLCB1cmwsIHBvc3QpIHtcbiAgICByZXR1cm4gcHJlICsgJ1xcJycgK1xuICAgICAgcmVzb2x2ZVVybCh1cmwucmVwbGFjZSgvW1wiJ10vZywgJycpLCBiYXNlVVJJKSArXG4gICAgICAnXFwnJyArIHBvc3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGZyb20gYSBnaXZlbiBgdXJsYC4gVGhlIHBhdGggaW5jbHVkZXMgdGhlIHRyYWlsaW5nXG4gKiBgL2AgZnJvbSB0aGUgdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSW5wdXQgVVJMIHRvIHRyYW5zZm9ybVxuICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRoRnJvbVVybCh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmltcG9ydCB7IHBhdGhGcm9tVXJsIH0gZnJvbSAnLi9yZXNvbHZlLXVybC5qcyc7XG5leHBvcnQgY29uc3QgdXNlU2hhZG93ID0gISh3aW5kb3cuU2hhZHlET00pO1xuZXhwb3J0IGNvbnN0IHVzZU5hdGl2ZUNTU1Byb3BlcnRpZXMgPSBCb29sZWFuKCF3aW5kb3cuU2hhZHlDU1MgfHwgd2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzcyk7XG5leHBvcnQgY29uc3QgdXNlTmF0aXZlQ3VzdG9tRWxlbWVudHMgPSAhKHdpbmRvdy5jdXN0b21FbGVtZW50cy5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrKTtcblxuXG4vKipcbiAqIEdsb2JhbGx5IHNldHRhYmxlIHByb3BlcnR5IHRoYXQgaXMgYXV0b21hdGljYWxseSBhc3NpZ25lZCB0b1xuICogYEVsZW1lbnRNaXhpbmAgaW5zdGFuY2VzLCB1c2VmdWwgZm9yIGJpbmRpbmcgaW4gdGVtcGxhdGVzIHRvXG4gKiBtYWtlIFVSTCdzIHJlbGF0aXZlIHRvIGFuIGFwcGxpY2F0aW9uJ3Mgcm9vdC4gIERlZmF1bHRzIHRvIHRoZSBtYWluXG4gKiBkb2N1bWVudCBVUkwsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBieSB1c2Vycy4gIEl0IG1heSBiZSB1c2VmdWwgdG8gc2V0XG4gKiBgcm9vdFBhdGhgIHRvIHByb3ZpZGUgYSBzdGFibGUgYXBwbGljYXRpb24gbW91bnQgcGF0aCB3aGVuXG4gKiB1c2luZyBjbGllbnQgc2lkZSByb3V0aW5nLlxuICovXG5leHBvcnQgbGV0IHJvb3RQYXRoID0gdW5kZWZpbmVkIHx8XG4gIHBhdGhGcm9tVXJsKGRvY3VtZW50LmJhc2VVUkkgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4vKipcbiAqIFNldHMgdGhlIGdsb2JhbCByb290UGF0aCBwcm9wZXJ0eSB1c2VkIGJ5IGBFbGVtZW50TWl4aW5gIGFuZFxuICogYXZhaWxhYmxlIHZpYSBgcm9vdFBhdGhgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBuZXcgcm9vdCBwYXRoXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0Um9vdFBhdGggPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJvb3RQYXRoID0gcGF0aDtcbn07XG5cbi8qKlxuICogQSBnbG9iYWwgY2FsbGJhY2sgdXNlZCB0byBzYW5pdGl6ZSBhbnkgdmFsdWUgYmVmb3JlIGluc2VydGluZyBpdCBpbnRvIHRoZSBET00uIFRoZSBjYWxsYmFjayBzaWduYXR1cmUgaXM6XG4gKlxuICogICAgIFBvbHltZXIgPSB7XG4gKiAgICAgICBzYW5pdGl6ZURPTVZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgbmFtZSwgdHlwZSwgbm9kZSkgeyAuLi4gfVxuICogICAgIH1cbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiBgdmFsdWVgIGlzIHRoZSB2YWx1ZSB0byBzYW5pdGl6ZS5cbiAqIGBuYW1lYCBpcyB0aGUgbmFtZSBvZiBhbiBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgKGZvciBleGFtcGxlLCBocmVmKS5cbiAqIGB0eXBlYCBpbmRpY2F0ZXMgd2hlcmUgdGhlIHZhbHVlIGlzIGJlaW5nIGluc2VydGVkOiBvbmUgb2YgcHJvcGVydHksIGF0dHJpYnV0ZSwgb3IgdGV4dC5cbiAqIGBub2RlYCBpcyB0aGUgbm9kZSB3aGVyZSB0aGUgdmFsdWUgaXMgYmVpbmcgaW5zZXJ0ZWQuXG4gKlxuICogQHR5cGUgeyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsTm9kZSk6Kil8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgbGV0IHNhbml0aXplRE9NVmFsdWUgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogU2V0cyB0aGUgZ2xvYmFsIHNhbml0aXplRE9NVmFsdWUgYXZhaWxhYmxlIHZpYSB0aGlzIG1vZHVsZSdzIGV4cG9ydGVkXG4gKiBgc2FuaXRpemVET01WYWx1ZWAgdmFyaWFibGUuXG4gKlxuICogQHBhcmFtIHsoZnVuY3Rpb24oKixzdHJpbmcsc3RyaW5nLE5vZGUpOiopfHVuZGVmaW5lZH0gbmV3U2FuaXRpemVET01WYWx1ZSB0aGUgZ2xvYmFsIHNhbml0aXplRE9NVmFsdWUgY2FsbGJhY2tcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRTYW5pdGl6ZURPTVZhbHVlID0gZnVuY3Rpb24obmV3U2FuaXRpemVET01WYWx1ZSkge1xuICBzYW5pdGl6ZURPTVZhbHVlID0gbmV3U2FuaXRpemVET01WYWx1ZTtcbn07XG5cbi8qKlxuICogR2xvYmFsbHkgc2V0dGFibGUgcHJvcGVydHkgdG8gbWFrZSBQb2x5bWVyIEdlc3R1cmVzIHVzZSBwYXNzaXZlIFRvdWNoRXZlbnQgbGlzdGVuZXJzIHdoZW4gcmVjb2duaXppbmcgZ2VzdHVyZXMuXG4gKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGdlc3R1cmVzIG1hZGUgZnJvbSB0b3VjaCB3aWxsIG5vdCBiZSBhYmxlIHRvIHByZXZlbnQgc2Nyb2xsaW5nLCBhbGxvd2luZyBmb3Igc21vb3RoZXJcbiAqIHNjcm9sbGluZyBwZXJmb3JtYW5jZS5cbiAqIERlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgbGV0IHBhc3NpdmVUb3VjaEdlc3R1cmVzID0gZmFsc2U7XG5cbi8qKlxuICogU2V0cyBgcGFzc2l2ZVRvdWNoR2VzdHVyZXNgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHMgdXNpbmcgUG9seW1lciBHZXN0dXJlcy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZVBhc3NpdmUgZW5hYmxlIG9yIGRpc2FibGUgcGFzc2l2ZSB0b3VjaCBnZXN0dXJlcyBnbG9iYWxseVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFBhc3NpdmVUb3VjaEdlc3R1cmVzID0gZnVuY3Rpb24odXNlUGFzc2l2ZSkge1xuICBwYXNzaXZlVG91Y2hHZXN0dXJlcyA9IHVzZVBhc3NpdmU7XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuLy8gdW5pcXVlIGdsb2JhbCBpZCBmb3IgZGVkdXBpbmcgbWl4aW5zLlxubGV0IGRlZHVwZUlkID0gMDtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gTWl4aW5GdW5jdGlvbigpe31cbi8qKiBAdHlwZSB7KFdlYWtNYXAgfCB1bmRlZmluZWQpfSAqL1xuTWl4aW5GdW5jdGlvbi5wcm90b3R5cGUuX19taXhpbkFwcGxpY2F0aW9ucztcbi8qKiBAdHlwZSB7KE9iamVjdCB8IHVuZGVmaW5lZCl9ICovXG5NaXhpbkZ1bmN0aW9uLnByb3RvdHlwZS5fX21peGluU2V0O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuLyoqXG4gKiBXcmFwcyBhbiBFUzYgY2xhc3MgZXhwcmVzc2lvbiBtaXhpbiBzdWNoIHRoYXQgdGhlIG1peGluIGlzIG9ubHkgYXBwbGllZFxuICogaWYgaXQgaGFzIG5vdCBhbHJlYWR5IGJlZW4gYXBwbGllZCBpdHMgYmFzZSBhcmd1bWVudC4gQWxzbyBtZW1vaXplcyBtaXhpblxuICogYXBwbGljYXRpb25zLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IG1peGluIEVTNiBjbGFzcyBleHByZXNzaW9uIG1peGluIHRvIHdyYXBcbiAqIEByZXR1cm4ge1R9XG4gKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZHVwaW5nTWl4aW4gPSBmdW5jdGlvbihtaXhpbikge1xuICBsZXQgbWl4aW5BcHBsaWNhdGlvbnMgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucztcbiAgaWYgKCFtaXhpbkFwcGxpY2F0aW9ucykge1xuICAgIG1peGluQXBwbGljYXRpb25zID0gbmV3IFdlYWtNYXAoKTtcbiAgICAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhtaXhpbikuX19taXhpbkFwcGxpY2F0aW9ucyA9IG1peGluQXBwbGljYXRpb25zO1xuICB9XG4gIC8vIG1haW50YWluIGEgdW5pcXVlIGlkIGZvciBlYWNoIG1peGluXG4gIGxldCBtaXhpbkRlZHVwZUlkID0gZGVkdXBlSWQrKztcbiAgZnVuY3Rpb24gZGVkdXBpbmdNaXhpbihiYXNlKSB7XG4gICAgbGV0IGJhc2VTZXQgPSAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhiYXNlKS5fX21peGluU2V0O1xuICAgIGlmIChiYXNlU2V0ICYmIGJhc2VTZXRbbWl4aW5EZWR1cGVJZF0pIHtcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cbiAgICBsZXQgbWFwID0gbWl4aW5BcHBsaWNhdGlvbnM7XG4gICAgbGV0IGV4dGVuZGVkID0gbWFwLmdldChiYXNlKTtcbiAgICBpZiAoIWV4dGVuZGVkKSB7XG4gICAgICBleHRlbmRlZCA9IC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyhtaXhpbikoYmFzZSk7XG4gICAgICBtYXAuc2V0KGJhc2UsIGV4dGVuZGVkKTtcbiAgICB9XG4gICAgLy8gY29weSBpbmhlcml0ZWQgbWl4aW4gc2V0IGZyb20gdGhlIGV4dGVuZGVkIGNsYXNzLCBvciB0aGUgYmFzZSBjbGFzc1xuICAgIC8vIE5PVEU6IHdlIGF2b2lkIHVzZSBvZiBTZXQgaGVyZSBiZWNhdXNlIHNvbWUgYnJvd3NlciAoSUUxMSlcbiAgICAvLyBjYW5ub3QgZXh0ZW5kIGEgYmFzZSBTZXQgdmlhIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICBsZXQgbWl4aW5TZXQgPSBPYmplY3QuY3JlYXRlKC8qKiBAdHlwZSB7IU1peGluRnVuY3Rpb259ICovKGV4dGVuZGVkKS5fX21peGluU2V0IHx8IGJhc2VTZXQgfHwgbnVsbCk7XG4gICAgbWl4aW5TZXRbbWl4aW5EZWR1cGVJZF0gPSB0cnVlO1xuICAgIC8qKiBAdHlwZSB7IU1peGluRnVuY3Rpb259ICovKGV4dGVuZGVkKS5fX21peGluU2V0ID0gbWl4aW5TZXQ7XG4gICAgcmV0dXJuIGV4dGVuZGVkO1xuICB9XG5cbiAgcmV0dXJuIC8qKiBAdHlwZSB7VH0gKi8gKGRlZHVwaW5nTWl4aW4pO1xufTtcbi8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgeyByZXNvbHZlQ3NzIH0gZnJvbSAnLi9yZXNvbHZlLXVybC5qcyc7XG5cbmNvbnN0IE1PRFVMRV9TVFlMRV9MSU5LX1NFTEVDVE9SID0gJ2xpbmtbcmVsPWltcG9ydF1bdHlwZX49Y3NzXSc7XG5jb25zdCBJTkNMVURFX0FUVFIgPSAnaW5jbHVkZSc7XG5jb25zdCBTSEFEWV9VTlNDT1BFRF9BVFRSID0gJ3NoYWR5LXVuc2NvcGVkJztcblxuZnVuY3Rpb24gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKSB7XG4gIGNvbnN0IC8qKiBEb21Nb2R1bGUgKi8gUG9seW1lckRvbU1vZHVsZSA9IGN1c3RvbUVsZW1lbnRzLmdldCgnZG9tLW1vZHVsZScpO1xuICBpZiAoIVBvbHltZXJEb21Nb2R1bGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gUG9seW1lckRvbU1vZHVsZS5pbXBvcnQobW9kdWxlSWQpO1xufVxuXG5mdW5jdGlvbiBzdHlsZUZvckltcG9ydChpbXBvcnREb2MpIHtcbiAgLy8gTk9URTogcG9seWZpbGwgYWZmb3JkYW5jZS5cbiAgLy8gdW5kZXIgdGhlIEhUTUxJbXBvcnRzIHBvbHlmaWxsLCB0aGVyZSB3aWxsIGJlIG5vICdib2R5JyxcbiAgLy8gYnV0IHRoZSBpbXBvcnQgcHNldWRvLWRvYyBjYW4gYmUgdXNlZCBkaXJlY3RseS5cbiAgbGV0IGNvbnRhaW5lciA9IGltcG9ydERvYy5ib2R5ID8gaW1wb3J0RG9jLmJvZHkgOiBpbXBvcnREb2M7XG4gIGNvbnN0IGltcG9ydENzcyA9IHJlc29sdmVDc3MoY29udGFpbmVyLnRleHRDb250ZW50LFxuICAgIGltcG9ydERvYy5iYXNlVVJJKTtcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50ZXh0Q29udGVudCA9IGltcG9ydENzcztcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vKiogQHR5cGVkZWYge3thc3NldHBhdGg6IHN0cmluZ319ICovXG5sZXQgdGVtcGxhdGVXaXRoQXNzZXRQYXRoOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbi8qKlxuICogTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBjb2xsZWN0aW9uIENTUyB0ZXh0IGZyb20gYDx0ZW1wbGF0ZXM+YCwgZXh0ZXJuYWxcbiAqIHN0eWxlc2hlZXRzLCBhbmQgYGRvbS1tb2R1bGVgcy5cbiAqXG4gKiBAc3VtbWFyeSBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIGNvbGxlY3Rpb24gQ1NTIHRleHQgZnJvbSB2YXJpb3VzIHNvdXJjZXMuXG4gKi9cbmBUT0RPKG1vZHVsaXplcik6IEEgbmFtZXNwYWNlIG5hbWVkIFBvbHltZXIuU3R5bGVHYXRoZXIgd2FzXG5kZWNsYXJlZCBoZXJlLiBUaGUgc3Vycm91bmRpbmcgY29tbWVudHMgc2hvdWxkIGJlIHJldmlld2VkLFxuYW5kIHRoaXMgc3RyaW5nIGNhbiB0aGVuIGJlIGRlbGV0ZWRgO1xuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIDxzdHlsZT4gZWxlbWVudHMgaW4gYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBgZG9tLW1vZHVsZWBzLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkcyBMaXN0IG9mIGRvbS1tb2R1bGUgaWQncyB3aXRoaW4gd2hpY2ggdG9cbiAqIHNlYXJjaCBmb3IgY3NzLlxuICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIDxzdHlsZT4gZWxlbWVudHNcbiAqIEB0aGlzIHtTdHlsZUdhdGhlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlc0Zyb21Nb2R1bGVzKG1vZHVsZUlkcykge1xuIGNvbnN0IG1vZHVsZXMgPSBtb2R1bGVJZHMudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG4gY29uc3Qgc3R5bGVzID0gW107XG4gZm9yIChsZXQgaT0wOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgc3R5bGVzLnB1c2goLi4uc3R5bGVzRnJvbU1vZHVsZShtb2R1bGVzW2ldKSk7XG4gfVxuIHJldHVybiBzdHlsZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgPHN0eWxlPiBlbGVtZW50cyBpbiBhIGdpdmVuIGBkb20tbW9kdWxlYC5cbiAqIFN0eWxlcyBpbiBhIGBkb20tbW9kdWxlYCBjYW4gY29tZSBlaXRoZXIgZnJvbSBgPHN0eWxlPmBzIHdpdGhpbiB0aGVcbiAqIGZpcnN0IGA8dGVtcGxhdGU+YCwgb3IgZWxzZSBmcm9tIG9uZSBvciBtb3JlXG4gKiBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgb3V0c2lkZSB0aGUgdGVtcGxhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIGRvbS1tb2R1bGUgaWQgdG8gZ2F0aGVyIHN0eWxlcyBmcm9tXG4gKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTdHlsZUVsZW1lbnQ+fSBBcnJheSBvZiBjb250YWluZWQgc3R5bGVzLlxuICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVzRnJvbU1vZHVsZShtb2R1bGVJZCkge1xuICBjb25zdCBtID0gaW1wb3J0TW9kdWxlKG1vZHVsZUlkKTtcblxuICBpZiAoIW0pIHtcbiAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBmaW5kIHN0eWxlIGRhdGEgaW4gbW9kdWxlIG5hbWVkJywgbW9kdWxlSWQpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmIChtLl9zdHlsZXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgIC8vIG1vZHVsZSBpbXBvcnRzOiA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+XG4gICAgc3R5bGVzLnB1c2goLi4uX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG0pKTtcbiAgICAvLyBpbmNsdWRlIGNzcyBmcm9tIHRoZSBmaXJzdCB0ZW1wbGF0ZSBpbiB0aGUgbW9kdWxlXG4gICAgY29uc3QgdGVtcGxhdGUgPSBtLnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJyk7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBzdHlsZXMucHVzaCguLi5zdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsXG4gICAgICAgIC8qKiBAdHlwZSB7dGVtcGxhdGVXaXRoQXNzZXRQYXRofSAqLyhtKS5hc3NldHBhdGgpKTtcbiAgICB9XG5cbiAgICBtLl9zdHlsZXMgPSBzdHlsZXM7XG4gIH1cblxuICByZXR1cm4gbS5fc3R5bGVzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGA8c3R5bGU+YCBlbGVtZW50cyB3aXRoaW4gYSBnaXZlbiB0ZW1wbGF0ZS5cbiAqXG4gKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBnYXRoZXIgc3R5bGVzIGZyb21cbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJJIGJhc2VVUkkgZm9yIHN0eWxlIGNvbnRlbnRcbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIHN0eWxlc1xuICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBiYXNlVVJJKSB7XG4gIGlmICghdGVtcGxhdGUuX3N0eWxlcykge1xuICAgIGNvbnN0IHN0eWxlcyA9IFtdO1xuICAgIC8vIGlmIGVsZW1lbnQgaXMgYSB0ZW1wbGF0ZSwgZ2V0IGNvbnRlbnQgZnJvbSBpdHMgLmNvbnRlbnRcbiAgICBjb25zdCBlJCA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICBmb3IgKGxldCBpPTA7IGkgPCBlJC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGUgPSBlJFtpXTtcbiAgICAgIC8vIHN1cHBvcnQgc3R5bGUgc2hhcmluZyBieSBhbGxvd2luZyBzdHlsZXMgdG8gXCJpbmNsdWRlXCJcbiAgICAgIC8vIG90aGVyIGRvbS1tb2R1bGVzIHRoYXQgY29udGFpbiBzdHlsaW5nXG4gICAgICBsZXQgaW5jbHVkZSA9IGUuZ2V0QXR0cmlidXRlKElOQ0xVREVfQVRUUik7XG4gICAgICBpZiAoaW5jbHVkZSkge1xuICAgICAgICBzdHlsZXMucHVzaCguLi5zdHlsZXNGcm9tTW9kdWxlcyhpbmNsdWRlKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSwgaW5kZXgsIHNlbGYpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5pbmRleE9mKGl0ZW0pID09PSBpbmRleDtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VVUkkpIHtcbiAgICAgICAgZS50ZXh0Q29udGVudCA9IHJlc29sdmVDc3MoZS50ZXh0Q29udGVudCwgYmFzZVVSSSk7XG4gICAgICB9XG4gICAgICBzdHlsZXMucHVzaChlKTtcbiAgICB9XG4gICAgdGVtcGxhdGUuX3N0eWxlcyA9IHN0eWxlcztcbiAgfVxuICByZXR1cm4gdGVtcGxhdGUuX3N0eWxlcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiA8c3R5bGU+IGVsZW1lbnRzICBmcm9tIHN0eWxlc2hlZXRzIGxvYWRlZCB2aWEgYDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5gIGxpbmtzIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGBkb20tbW9kdWxlYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSWQgSWQgb2YgYGRvbS1tb2R1bGVgIHRvIGdhdGhlciBDU1MgZnJvbVxuICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIHN0eWxlcy5cbiAqIEB0aGlzIHtTdHlsZUdhdGhlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG1vZHVsZUlkKSB7XG4gbGV0IG0gPSBpbXBvcnRNb2R1bGUobW9kdWxlSWQpO1xuIHJldHVybiBtID8gX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG0pIDogW107XG59XG5cbi8qKlxuICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IG1vZHVsZSBkb20tbW9kdWxlIGVsZW1lbnQgdGhhdCBjb3VsZCBjb250YWluIGA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+YCBzdHlsZXNcbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIGNvbnRhaW5lZCBzdHlsZXNcbiAqL1xuZnVuY3Rpb24gX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG1vZHVsZSkge1xuICBjb25zdCBzdHlsZXMgPSBbXTtcbiAgY29uc3QgcCQgPSBtb2R1bGUucXVlcnlTZWxlY3RvckFsbChNT0RVTEVfU1RZTEVfTElOS19TRUxFQ1RPUik7XG4gIGZvciAobGV0IGk9MDsgaSA8IHAkLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHAgPSBwJFtpXTtcbiAgICBpZiAocC5pbXBvcnQpIHtcbiAgICAgIGNvbnN0IGltcG9ydERvYyA9IHAuaW1wb3J0O1xuICAgICAgY29uc3QgdW5zY29wZWQgPSBwLmhhc0F0dHJpYnV0ZShTSEFEWV9VTlNDT1BFRF9BVFRSKTtcbiAgICAgIGlmICh1bnNjb3BlZCAmJiAhaW1wb3J0RG9jLl91bnNjb3BlZFN0eWxlKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gc3R5bGVGb3JJbXBvcnQoaW1wb3J0RG9jKTtcbiAgICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKFNIQURZX1VOU0NPUEVEX0FUVFIsICcnKTtcbiAgICAgICAgaW1wb3J0RG9jLl91bnNjb3BlZFN0eWxlID0gc3R5bGU7XG4gICAgICB9IGVsc2UgaWYgKCFpbXBvcnREb2MuX3N0eWxlKSB7XG4gICAgICAgIGltcG9ydERvYy5fc3R5bGUgPSBzdHlsZUZvckltcG9ydChpbXBvcnREb2MpO1xuICAgICAgfVxuICAgICAgc3R5bGVzLnB1c2godW5zY29wZWQgPyBpbXBvcnREb2MuX3Vuc2NvcGVkU3R5bGUgOiBpbXBvcnREb2MuX3N0eWxlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxuLyoqXG4gKlxuICogUmV0dXJucyBDU1MgdGV4dCBvZiBzdHlsZXMgaW4gYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBgZG9tLW1vZHVsZWBzLlxuICogTm90ZTogVGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlIGBzdHlsZXNGcm9tTW9kdWxlc2AgaW5zdGVhZC5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkcyBMaXN0IG9mIGRvbS1tb2R1bGUgaWQncyB3aXRoaW4gd2hpY2ggdG9cbiAqIHNlYXJjaCBmb3IgY3NzLlxuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgc1xuICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3NzRnJvbU1vZHVsZXMobW9kdWxlSWRzKSB7XG4gbGV0IG1vZHVsZXMgPSBtb2R1bGVJZHMudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG4gbGV0IGNzc1RleHQgPSAnJztcbiBmb3IgKGxldCBpPTA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICBjc3NUZXh0ICs9IGNzc0Zyb21Nb2R1bGUobW9kdWxlc1tpXSk7XG4gfVxuIHJldHVybiBjc3NUZXh0O1xufVxuXG4vKipcbiAqIFJldHVybnMgQ1NTIHRleHQgb2Ygc3R5bGVzIGluIGEgZ2l2ZW4gYGRvbS1tb2R1bGVgLiAgQ1NTIGluIGEgYGRvbS1tb2R1bGVgXG4gKiBjYW4gY29tZSBlaXRoZXIgZnJvbSBgPHN0eWxlPmBzIHdpdGhpbiB0aGUgZmlyc3QgYDx0ZW1wbGF0ZT5gLCBvciBlbHNlXG4gKiBmcm9tIG9uZSBvciBtb3JlIGA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+YCBsaW5rcyBvdXRzaWRlIHRoZVxuICogdGVtcGxhdGUuXG4gKlxuICogQW55IGA8c3R5bGVzPmAgcHJvY2Vzc2VkIGFyZSByZW1vdmVkIGZyb20gdGhlaXIgb3JpZ2luYWwgbG9jYXRpb24uXG4gKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgYHN0eWxlRnJvbU1vZHVsZWAgaW5zdGVhZC5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIGRvbS1tb2R1bGUgaWQgdG8gZ2F0aGVyIHN0eWxlcyBmcm9tXG4gKiBAcmV0dXJuIHtzdHJpbmd9IENvbmNhdGVuYXRlZCBDU1MgY29udGVudCBmcm9tIHNwZWNpZmllZCBgZG9tLW1vZHVsZWBcbiAqIEB0aGlzIHtTdHlsZUdhdGhlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzc0Zyb21Nb2R1bGUobW9kdWxlSWQpIHtcbiAgbGV0IG0gPSBpbXBvcnRNb2R1bGUobW9kdWxlSWQpO1xuICBpZiAobSAmJiBtLl9jc3NUZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBtb2R1bGUgaW1wb3J0czogPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPlxuICAgIGxldCBjc3NUZXh0ID0gX2Nzc0Zyb21Nb2R1bGVJbXBvcnRzKG0pO1xuICAgIC8vIGluY2x1ZGUgY3NzIGZyb20gdGhlIGZpcnN0IHRlbXBsYXRlIGluIHRoZSBtb2R1bGVcbiAgICBsZXQgdCA9IG0ucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKTtcbiAgICBpZiAodCkge1xuICAgICAgY3NzVGV4dCArPSBjc3NGcm9tVGVtcGxhdGUodCxcbiAgICAgICAgLyoqIEB0eXBlIHt0ZW1wbGF0ZVdpdGhBc3NldFBhdGh9ICovKG0pLmFzc2V0cGF0aCk7XG4gICAgfVxuICAgIG0uX2Nzc1RleHQgPSBjc3NUZXh0IHx8IG51bGw7XG4gIH1cbiAgaWYgKCFtKSB7XG4gICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCBzdHlsZSBkYXRhIGluIG1vZHVsZSBuYW1lZCcsIG1vZHVsZUlkKTtcbiAgfVxuICByZXR1cm4gbSAmJiBtLl9jc3NUZXh0IHx8ICcnO1xufVxuXG4vKipcbiAqIFJldHVybnMgQ1NTIHRleHQgb2YgYDxzdHlsZXM+YCB3aXRoaW4gYSBnaXZlbiB0ZW1wbGF0ZS5cbiAqXG4gKiBBbnkgYDxzdHlsZXM+YCBwcm9jZXNzZWQgYXJlIHJlbW92ZWQgZnJvbSB0aGVpciBvcmlnaW5hbCBsb2NhdGlvbi5cbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVGcm9tVGVtcGxhdGVgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkkgQmFzZSBVUkkgdG8gcmVzb2x2ZSB0aGUgVVJMIGFnYWluc3RcbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gc3BlY2lmaWVkIHRlbXBsYXRlXG4gKiBAdGhpcyB7U3R5bGVHYXRoZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tVGVtcGxhdGUodGVtcGxhdGUsIGJhc2VVUkkpIHtcbiAgbGV0IGNzc1RleHQgPSAnJztcbiAgY29uc3QgZSQgPSBzdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsIGJhc2VVUkkpO1xuICAvLyBpZiBlbGVtZW50IGlzIGEgdGVtcGxhdGUsIGdldCBjb250ZW50IGZyb20gaXRzIC5jb250ZW50XG4gIGZvciAobGV0IGk9MDsgaSA8IGUkLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGUgPSBlJFtpXTtcbiAgICBpZiAoZS5wYXJlbnROb2RlKSB7XG4gICAgICBlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7XG4gICAgfVxuICAgIGNzc1RleHQgKz0gZS50ZXh0Q29udGVudDtcbiAgfVxuICByZXR1cm4gY3NzVGV4dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIENTUyB0ZXh0IGZyb20gc3R5bGVzaGVldHMgbG9hZGVkIHZpYSBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmBcbiAqIGxpbmtzIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGBkb20tbW9kdWxlYC5cbiAqXG4gKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgYHN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzYCBpbnN0ZWFkLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIElkIG9mIGBkb20tbW9kdWxlYCB0byBnYXRoZXIgQ1NTIGZyb21cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gbGlua3MgaW4gc3BlY2lmaWVkIGBkb20tbW9kdWxlYFxuICogQHRoaXMge1N0eWxlR2F0aGVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3NzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlSWQpIHtcbiAgbGV0IG0gPSBpbXBvcnRNb2R1bGUobW9kdWxlSWQpO1xuICByZXR1cm4gbSA/IF9jc3NGcm9tTW9kdWxlSW1wb3J0cyhtKSA6ICcnO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBAdGhpcyB7U3R5bGVHYXRoZXJ9XG4gKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gbW9kdWxlIGRvbS1tb2R1bGUgZWxlbWVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5gIHN0eWxlc1xuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBsaW5rcyBpbiB0aGUgZG9tLW1vZHVsZVxuICovXG5mdW5jdGlvbiBfY3NzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlKSB7XG4gbGV0IGNzc1RleHQgPSAnJztcbiBsZXQgc3R5bGVzID0gX3N0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKG1vZHVsZSk7XG4gZm9yIChsZXQgaT0wOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICBjc3NUZXh0ICs9IHN0eWxlc1tpXS50ZXh0Q29udGVudDtcbiB9XG4gcmV0dXJuIGNzc1RleHQ7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgcmVzb2x2ZVVybCwgcGF0aEZyb21VcmwgfSBmcm9tICcuLi91dGlscy9yZXNvbHZlLXVybC5qcyc7XG5cbmxldCBtb2R1bGVzID0ge307XG5sZXQgbGNNb2R1bGVzID0ge307XG5mdW5jdGlvbiBmaW5kTW9kdWxlKGlkKSB7XG4gIHJldHVybiBtb2R1bGVzW2lkXSB8fCBsY01vZHVsZXNbaWQudG9Mb3dlckNhc2UoKV07XG59XG5cbmZ1bmN0aW9uIHN0eWxlT3V0c2lkZVRlbXBsYXRlQ2hlY2soaW5zdCkge1xuICBpZiAoaW5zdC5xdWVyeVNlbGVjdG9yKCdzdHlsZScpKSB7XG4gICAgY29uc29sZS53YXJuKCdkb20tbW9kdWxlICVzIGhhcyBzdHlsZSBvdXRzaWRlIHRlbXBsYXRlJywgaW5zdC5pZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYGRvbS1tb2R1bGVgIGVsZW1lbnQgcmVnaXN0ZXJzIHRoZSBkb20gaXQgY29udGFpbnMgdG8gdGhlIG5hbWUgZ2l2ZW5cbiAqIGJ5IHRoZSBtb2R1bGUncyBpZCBhdHRyaWJ1dGUuIEl0IHByb3ZpZGVzIGEgdW5pZmllZCBkYXRhYmFzZSBvZiBkb21cbiAqIGFjY2Vzc2libGUgdmlhIGl0cyBzdGF0aWMgYGltcG9ydGAgQVBJLlxuICpcbiAqIEEga2V5IHVzZSBjYXNlIG9mIGBkb20tbW9kdWxlYCBpcyBmb3IgcHJvdmlkaW5nIGN1c3RvbSBlbGVtZW50IGA8dGVtcGxhdGU+YHNcbiAqIHZpYSBIVE1MIGltcG9ydHMgdGhhdCBhcmUgcGFyc2VkIGJ5IHRoZSBuYXRpdmUgSFRNTCBwYXJzZXIsIHRoYXQgY2FuIGJlXG4gKiByZWxvY2F0ZWQgZHVyaW5nIGEgYnVuZGxpbmcgcGFzcyBhbmQgc3RpbGwgbG9va2VkIHVwIGJ5IGBpZGAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgPGRvbS1tb2R1bGUgaWQ9XCJmb29cIj5cbiAqICAgICAgIDxpbWcgc3JjPVwic3R1ZmYucG5nXCI+XG4gKiAgICAgPC9kb20tbW9kdWxlPlxuICpcbiAqIFRoZW4gaW4gY29kZSBpbiBzb21lIG90aGVyIGxvY2F0aW9uIHRoYXQgY2Fubm90IGFjY2VzcyB0aGUgZG9tLW1vZHVsZSBhYm92ZVxuICpcbiAqICAgICBsZXQgaW1nID0gY3VzdG9tRWxlbWVudHMuZ2V0KCdkb20tbW9kdWxlJykuaW1wb3J0KCdmb28nLCAnaW1nJyk7XG4gKlxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCB0aGF0IHByb3ZpZGVzIGEgcmVnaXN0cnkgb2YgcmVsb2NhdGFibGUgRE9NIGNvbnRlbnRcbiAqICAgYnkgYGlkYCB0aGF0IGlzIGFnbm9zdGljIHRvIGJ1bmRsaW5nLlxuICogQHVucmVzdHJpY3RlZFxuICovXG5leHBvcnQgY2xhc3MgRG9tTW9kdWxlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkgeyByZXR1cm4gWydpZCddOyB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgZWxlbWVudCBzcGVjaWZpZWQgYnkgdGhlIGNzcyBgc2VsZWN0b3JgIGluIHRoZSBtb2R1bGVcbiAgICogcmVnaXN0ZXJlZCBieSBgaWRgLiBGb3IgZXhhbXBsZSwgdGhpcy5pbXBvcnQoJ2ZvbycsICdpbWcnKTtcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgZG9tLW1vZHVsZSBpbiB3aGljaCB0byBzZWFyY2guXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc2VsZWN0b3IgVGhlIGNzcyBzZWxlY3RvciBieSB3aGljaCB0byBmaW5kIHRoZSBlbGVtZW50LlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fSBSZXR1cm5zIHRoZSBlbGVtZW50IHdoaWNoIG1hdGNoZXMgYHNlbGVjdG9yYCBpbiB0aGVcbiAgICogbW9kdWxlIHJlZ2lzdGVyZWQgYXQgdGhlIHNwZWNpZmllZCBgaWRgLlxuICAgKi9cbiAgc3RhdGljIGltcG9ydChpZCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoaWQpIHtcbiAgICAgIGxldCBtID0gZmluZE1vZHVsZShpZCk7XG4gICAgICBpZiAobSAmJiBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gbS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBDdXJyZW50IHZhbHVlIG9mIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lc3BhY2UgQXR0cmlidXRlIG5hbWVzcGFjZS5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlLCBuYW1lc3BhY2UpIHtcbiAgICBpZiAob2xkICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5yZWdpc3RlcigpO1xuICAgIH1cbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1hcmdzICovXG5cbiAgLyoqXG4gICAqIFRoZSBhYnNvbHV0ZSBVUkwgb2YgdGhlIG9yaWdpbmFsIGxvY2F0aW9uIG9mIHRoaXMgYGRvbS1tb2R1bGVgLlxuICAgKlxuICAgKiBUaGlzIHZhbHVlIHdpbGwgZGlmZmVyIGZyb20gdGhpcyBlbGVtZW50J3MgYG93bmVyRG9jdW1lbnRgIGluIHRoZVxuICAgKiBmb2xsb3dpbmcgd2F5czpcbiAgICogLSBUYWtlcyBpbnRvIGFjY291bnQgYW55IGBhc3NldHBhdGhgIGF0dHJpYnV0ZSBhZGRlZCBkdXJpbmcgYnVuZGxpbmdcbiAgICogICB0byBpbmRpY2F0ZSB0aGUgb3JpZ2luYWwgbG9jYXRpb24gcmVsYXRpdmUgdG8gdGhlIGJ1bmRsZWQgbG9jYXRpb25cbiAgICogLSBVc2VzIHRoZSBIVE1MSW1wb3J0cyBwb2x5ZmlsbCdzIGBpbXBvcnRGb3JFbGVtZW50YCBBUEkgdG8gZW5zdXJlXG4gICAqICAgdGhlIHBhdGggaXMgcmVsYXRpdmUgdG8gdGhlIGltcG9ydCBkb2N1bWVudCdzIGxvY2F0aW9uIHNpbmNlXG4gICAqICAgYG93bmVyRG9jdW1lbnRgIGlzIG5vdCBjdXJyZW50bHkgcG9seWZpbGxlZFxuICAgKi9cbiAgZ2V0IGFzc2V0cGF0aCgpIHtcbiAgICAvLyBEb24ndCBvdmVycmlkZSBleGlzdGluZyBhc3NldHBhdGguXG4gICAgaWYgKCF0aGlzLl9fYXNzZXRwYXRoKSB7XG4gICAgICAvLyBub3RlOiBhc3NldHBhdGggc2V0IHZpYSBhbiBhdHRyaWJ1dGUgbXVzdCBiZSByZWxhdGl2ZSB0byB0aGlzXG4gICAgICAvLyBlbGVtZW50J3MgbG9jYXRpb247IGFjY29tb2RhdGUgcG9seWZpbGxlZCBIVE1MSW1wb3J0c1xuICAgICAgY29uc3Qgb3duZXIgPSB3aW5kb3cuSFRNTEltcG9ydHMgJiYgSFRNTEltcG9ydHMuaW1wb3J0Rm9yRWxlbWVudCA/XG4gICAgICAgIEhUTUxJbXBvcnRzLmltcG9ydEZvckVsZW1lbnQodGhpcykgfHwgZG9jdW1lbnQgOiB0aGlzLm93bmVyRG9jdW1lbnQ7XG4gICAgICBjb25zdCB1cmwgPSByZXNvbHZlVXJsKFxuICAgICAgICB0aGlzLmdldEF0dHJpYnV0ZSgnYXNzZXRwYXRoJykgfHwgJycsIG93bmVyLmJhc2VVUkkpO1xuICAgICAgdGhpcy5fX2Fzc2V0cGF0aCA9IHBhdGhGcm9tVXJsKHVybCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9fYXNzZXRwYXRoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyB0aGUgZG9tLW1vZHVsZSBhdCBhIGdpdmVuIGlkLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWRcbiAgICogd2hlbiBhIGRvbS1tb2R1bGUgaXMgaW1wZXJhdGl2ZWx5IGNyZWF0ZWQuIEZvclxuICAgKiBleGFtcGxlLCBgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZG9tLW1vZHVsZScpLnJlZ2lzdGVyKCdmb28nKWAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaWQgVGhlIGlkIGF0IHdoaWNoIHRvIHJlZ2lzdGVyIHRoZSBkb20tbW9kdWxlLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcmVnaXN0ZXIoaWQpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMuaWQ7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAvLyBzdG9yZSBpZCBzZXBhcmF0ZSBmcm9tIGxvd2VyY2FzZWQgaWQgc28gdGhhdFxuICAgICAgLy8gaW4gYWxsIGNhc2VzIG1peGVkQ2FzZSBpZCB3aWxsIHN0b3JlZCBkaXN0aW5jdGx5XG4gICAgICAvLyBhbmQgbG93ZXJjYXNlIHZlcnNpb24gaXMgYSBmYWxsYmFja1xuICAgICAgbW9kdWxlc1tpZF0gPSB0aGlzO1xuICAgICAgbGNNb2R1bGVzW2lkLnRvTG93ZXJDYXNlKCldID0gdGhpcztcbiAgICAgIHN0eWxlT3V0c2lkZVRlbXBsYXRlQ2hlY2sodGhpcyk7XG4gICAgfVxuICB9XG59XG5cbkRvbU1vZHVsZS5wcm90b3R5cGVbJ21vZHVsZXMnXSA9IG1vZHVsZXM7XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZG9tLW1vZHVsZScsIERvbU1vZHVsZSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG4vKipcbiAqIE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgbWFuaXB1bGF0aW5nIHN0cnVjdHVyZWQgZGF0YSBwYXRoIHN0cmluZ3MuXG4gKlxuICogQHN1bW1hcnkgTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBtYW5pcHVsYXRpbmcgc3RydWN0dXJlZCBkYXRhIHBhdGggc3RyaW5ncy5cbiAqL1xuYFRPRE8obW9kdWxpemVyKTogQSBuYW1lc3BhY2UgbmFtZWQgUG9seW1lci5QYXRoIHdhc1xuZGVjbGFyZWQgaGVyZS4gVGhlIHN1cnJvdW5kaW5nIGNvbW1lbnRzIHNob3VsZCBiZSByZXZpZXdlZCxcbmFuZCB0aGlzIHN0cmluZyBjYW4gdGhlbiBiZSBkZWxldGVkYDtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyBhIHN0cnVjdHVyZWQgZGF0YSBwYXRoIChoYXMgZG90cykuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIGlzUGF0aCgnZm9vLmJhci5iYXonKSAvLyB0cnVlXG4gKiBpc1BhdGgoJ2ZvbycpICAgICAgICAgLy8gZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgY29udGFpbmVkIG9uZSBvciBtb3JlIGRvdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmluZGV4T2YoJy4nKSA+PSAwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJvb3QgcHJvcGVydHkgbmFtZSBmb3IgdGhlIGdpdmVuIHBhdGguXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIHJvb3QoJ2Zvby5iYXIuYmF6JykgLy8gJ2ZvbydcbiAqIHJvb3QoJ2ZvbycpICAgICAgICAgLy8gJ2ZvbydcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFJvb3QgcHJvcGVydHkgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm9vdChwYXRoKSB7XG4gIGxldCBkb3RJbmRleCA9IHBhdGguaW5kZXhPZignLicpO1xuICBpZiAoZG90SW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZG90SW5kZXgpO1xufVxuXG4vKipcbiAqIEdpdmVuIGBiYXNlYCBpcyBgZm9vLmJhcmAsIGBmb29gIGlzIGFuIGFuY2VzdG9yLCBgZm9vLmJhcmAgaXMgbm90XG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBhdGggaXMgYW4gYW5jZXN0b3Igb2YgdGhlIGJhc2UgcGF0aC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogaXNBbmNlc3RvcignZm9vLmJhcicsICdmb28nKSAgICAgICAgIC8vIHRydWVcbiAqIGlzQW5jZXN0b3IoJ2Zvby5iYXInLCAnZm9vLmJhcicpICAgICAvLyBmYWxzZVxuICogaXNBbmNlc3RvcignZm9vLmJhcicsICdmb28uYmFyLmJheicpIC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZSBQYXRoIHN0cmluZyB0byB0ZXN0IGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZyB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgcGF0aGAgaXMgYW4gYW5jZXN0b3Igb2YgYGJhc2VgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBbmNlc3RvcihiYXNlLCBwYXRoKSB7XG4gIC8vICAgICBiYXNlLnN0YXJ0c1dpdGgocGF0aCArICcuJyk7XG4gIHJldHVybiBiYXNlLmluZGV4T2YocGF0aCArICcuJykgPT09IDA7XG59XG5cbi8qKlxuICogR2l2ZW4gYGJhc2VgIGlzIGBmb28uYmFyYCwgYGZvby5iYXIuYmF6YCBpcyBhbiBkZXNjZW5kYW50XG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIGlzRGVzY2VuZGFudCgnZm9vLmJhcicsICdmb28uYmFyLmJheicpIC8vIHRydWVcbiAqIGlzRGVzY2VuZGFudCgnZm9vLmJhcicsICdmb28uYmFyJykgICAgIC8vIGZhbHNlXG4gKiBpc0Rlc2NlbmRhbnQoJ2Zvby5iYXInLCAnZm9vJykgICAgICAgICAvLyBmYWxzZVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgUGF0aCBzdHJpbmcgdG8gdGVzdCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmcgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHBhdGhgIGlzIGEgZGVzY2VuZGFudCBvZiBgYmFzZWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Rlc2NlbmRhbnQoYmFzZSwgcGF0aCkge1xuICAvLyAgICAgcGF0aC5zdGFydHNXaXRoKGJhc2UgKyAnLicpO1xuICByZXR1cm4gcGF0aC5pbmRleE9mKGJhc2UgKyAnLicpID09PSAwO1xufVxuXG4vKipcbiAqIFJlcGxhY2VzIGEgcHJldmlvdXMgYmFzZSBwYXRoIHdpdGggYSBuZXcgYmFzZSBwYXRoLCBwcmVzZXJ2aW5nIHRoZVxuICogcmVtYWluZGVyIG9mIHRoZSBwYXRoLlxuICpcbiAqIFVzZXIgbXVzdCBlbnN1cmUgYHBhdGhgIGhhcyBhIHByZWZpeCBvZiBgYmFzZWAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIHRyYW5zbGF0ZSgnZm9vLmJhcicsICd6b3QnLCAnZm9vLmJhci5iYXonKSAvLyAnem90LmJheidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIEN1cnJlbnQgYmFzZSBzdHJpbmcgdG8gcmVtb3ZlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3QmFzZSBOZXcgYmFzZSBzdHJpbmcgdG8gcmVwbGFjZSB3aXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIHRyYW5zbGF0ZVxuICogQHJldHVybiB7c3RyaW5nfSBUcmFuc2xhdGVkIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKGJhc2UsIG5ld0Jhc2UsIHBhdGgpIHtcbiAgcmV0dXJuIG5ld0Jhc2UgKyBwYXRoLnNsaWNlKGJhc2UubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZSBQYXRoIHN0cmluZyB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHBhdGhgIGlzIGVxdWFsIHRvIGBiYXNlYFxuICogQHRoaXMge1BhdGh9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVzKGJhc2UsIHBhdGgpIHtcbiAgcmV0dXJuIChiYXNlID09PSBwYXRoKSB8fFxuICAgICAgICAgaXNBbmNlc3RvcihiYXNlLCBwYXRoKSB8fFxuICAgICAgICAgaXNEZXNjZW5kYW50KGJhc2UsIHBhdGgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5LWJhc2VkIHBhdGhzIHRvIGZsYXR0ZW5lZCBwYXRoLiAgU3RyaW5nLWJhc2VkIHBhdGhzXG4gKiBhcmUgcmV0dXJuZWQgYXMtaXMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIG5vcm1hbGl6ZShbJ2Zvby5iYXInLCAwLCAnYmF6J10pICAvLyAnZm9vLmJhci4wLmJheidcbiAqIG5vcm1hbGl6ZSgnZm9vLmJhci4wLmJheicpICAgICAgICAvLyAnZm9vLmJhci4wLmJheidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIElucHV0IHBhdGhcbiAqIEByZXR1cm4ge3N0cmluZ30gRmxhdHRlbmVkIHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgZm9yIChsZXQgaT0wOyBpPHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBhcmdzID0gcGF0aFtpXS50b1N0cmluZygpLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGxldCBqPTA7IGo8YXJncy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFyZ3Nbal0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbignLicpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG59XG5cbi8qKlxuICogU3BsaXRzIGEgcGF0aCBpbnRvIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLiBBY2NlcHRzIGVpdGhlciBhcnJheXNcbiAqIG9mIHBhdGggcGFydHMgb3Igc3RyaW5ncy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogc3BsaXQoWydmb28uYmFyJywgMCwgJ2JheiddKSAgLy8gWydmb28nLCAnYmFyJywgJzAnLCAnYmF6J11cbiAqIHNwbGl0KCdmb28uYmFyLjAuYmF6JykgICAgICAgIC8vIFsnZm9vJywgJ2JhcicsICcwJywgJ2JheiddXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBJbnB1dCBwYXRoXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn0gQXJyYXkgb2YgcGF0aCBwYXJ0c1xuICogQHRoaXMge1BhdGh9XG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdChwYXRoKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZShwYXRoKS5zcGxpdCgnLicpO1xuICB9XG4gIHJldHVybiBwYXRoLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcbn1cblxuLyoqXG4gKiBSZWFkcyBhIHZhbHVlIGZyb20gYSBwYXRoLiAgSWYgYW55IHN1Yi1wcm9wZXJ0eSBpbiB0aGUgcGF0aCBpcyBgdW5kZWZpbmVkYCxcbiAqIHRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAgKHdpbGwgbmV2ZXIgdGhyb3cuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJvb3QgT2JqZWN0IGZyb20gd2hpY2ggdG8gZGVyZWZlcmVuY2UgcGF0aCBmcm9tXG4gKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIHJlYWRcbiAqIEBwYXJhbSB7T2JqZWN0PX0gaW5mbyBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgdG8gYGluZm9gLCB0aGUgbm9ybWFsaXplZFxuICogIChmbGF0dGVuZWQpIHBhdGggd2lsbCBiZSBzZXQgdG8gYGluZm8ucGF0aGAuXG4gKiBAcmV0dXJuIHsqfSBWYWx1ZSBhdCBwYXRoLCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgcGF0aCBjb3VsZCBub3QgYmVcbiAqICBmdWxseSBkZXJlZmVyZW5jZWQuXG4gKiBAdGhpcyB7UGF0aH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChyb290LCBwYXRoLCBpbmZvKSB7XG4gIGxldCBwcm9wID0gcm9vdDtcbiAgbGV0IHBhcnRzID0gc3BsaXQocGF0aCk7XG4gIC8vIExvb3Agb3ZlciBwYXRoIHBhcnRzWzAuLm4tMV0gYW5kIGRlcmVmZXJlbmNlXG4gIGZvciAobGV0IGk9MDsgaTxwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghcHJvcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGFydCA9IHBhcnRzW2ldO1xuICAgIHByb3AgPSBwcm9wW3BhcnRdO1xuICB9XG4gIGlmIChpbmZvKSB7XG4gICAgaW5mby5wYXRoID0gcGFydHMuam9pbignLicpO1xuICB9XG4gIHJldHVybiBwcm9wO1xufVxuXG4vKipcbiAqIFNldHMgYSB2YWx1ZSB0byBhIHBhdGguICBJZiBhbnkgc3ViLXByb3BlcnR5IGluIHRoZSBwYXRoIGlzIGB1bmRlZmluZWRgLFxuICogdGhpcyBtZXRob2Qgd2lsbCBuby1vcC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcm9vdCBPYmplY3QgZnJvbSB3aGljaCB0byBkZXJlZmVyZW5jZSBwYXRoIGZyb21cbiAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gc2V0XG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldCB0byBwYXRoXG4gKiBAcmV0dXJuIHtzdHJpbmcgfCB1bmRlZmluZWR9IFRoZSBub3JtYWxpemVkIHZlcnNpb24gb2YgdGhlIGlucHV0IHBhdGhcbiAqIEB0aGlzIHtQYXRofVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KHJvb3QsIHBhdGgsIHZhbHVlKSB7XG4gIGxldCBwcm9wID0gcm9vdDtcbiAgbGV0IHBhcnRzID0gc3BsaXQocGF0aCk7XG4gIGxldCBsYXN0ID0gcGFydHNbcGFydHMubGVuZ3RoLTFdO1xuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgIC8vIExvb3Agb3ZlciBwYXRoIHBhcnRzWzAuLm4tMl0gYW5kIGRlcmVmZXJlbmNlXG4gICAgZm9yIChsZXQgaT0wOyBpPHBhcnRzLmxlbmd0aC0xOyBpKyspIHtcbiAgICAgIGxldCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICBwcm9wID0gcHJvcFtwYXJ0XTtcbiAgICAgIGlmICghcHJvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFNldCB2YWx1ZSB0byBvYmplY3QgYXQgZW5kIG9mIHBhdGhcbiAgICBwcm9wW2xhc3RdID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2ltcGxlIHByb3BlcnR5IHNldFxuICAgIHByb3BbcGF0aF0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcGFydHMuam9pbignLicpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgc3RydWN0dXJlZCBkYXRhIHBhdGggKGhhcyBkb3RzKS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQuICBVc2UgYGlzUGF0aGAgaW5zdGVhZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogaXNEZWVwKCdmb28uYmFyLmJheicpIC8vIHRydWVcbiAqIGlzRGVlcCgnZm9vJykgICAgICAgICAvLyBmYWxzZVxuICogYGBgXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgY29udGFpbmVkIG9uZSBvciBtb3JlIGRvdHNcbiAqL1xuZXhwb3J0IGNvbnN0IGlzRGVlcCA9IGlzUGF0aDtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmNvbnN0IGNhc2VNYXAgPSB7fTtcbmNvbnN0IERBU0hfVE9fQ0FNRUwgPSAvLVthLXpdL2c7XG5jb25zdCBDQU1FTF9UT19EQVNIID0gLyhbQS1aXSkvZztcblxuLyoqXG4gKiBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIGNvbnZlcnRpbmcgYmV0d2VlbiBcImRhc2gtY2FzZVwiIGFuZCBcImNhbWVsQ2FzZVwiXG4gKiBpZGVudGlmaWVycy5cbiAqXG4gKiBAc3VtbWFyeSBNb2R1bGUgdGhhdCBwcm92aWRlcyB1dGlsaXRpZXMgZm9yIGNvbnZlcnRpbmcgYmV0d2VlbiBcImRhc2gtY2FzZVwiXG4gKiAgIGFuZCBcImNhbWVsQ2FzZVwiLlxuICovXG5gVE9ETyhtb2R1bGl6ZXIpOiBBIG5hbWVzcGFjZSBuYW1lZCBQb2x5bWVyLkNhc2VNYXAgd2FzXG5kZWNsYXJlZCBoZXJlLiBUaGUgc3Vycm91bmRpbmcgY29tbWVudHMgc2hvdWxkIGJlIHJldmlld2VkLFxuYW5kIHRoaXMgc3RyaW5nIGNhbiB0aGVuIGJlIGRlbGV0ZWRgO1xuXG4vKipcbiAqIENvbnZlcnRzIFwiZGFzaC1jYXNlXCIgaWRlbnRpZmllciAoZS5nLiBgZm9vLWJhci1iYXpgKSB0byBcImNhbWVsQ2FzZVwiXG4gKiAoZS5nLiBgZm9vQmFyQmF6YCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhc2ggRGFzaC1jYXNlIGlkZW50aWZpZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gQ2FtZWwtY2FzZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgaWRlbnRpZmllclxuICovXG5leHBvcnQgZnVuY3Rpb24gZGFzaFRvQ2FtZWxDYXNlKGRhc2gpIHtcbiAgcmV0dXJuIGNhc2VNYXBbZGFzaF0gfHwgKFxuICAgIGNhc2VNYXBbZGFzaF0gPSBkYXNoLmluZGV4T2YoJy0nKSA8IDAgPyBkYXNoIDogZGFzaC5yZXBsYWNlKERBU0hfVE9fQ0FNRUwsXG4gICAgICAobSkgPT4gbVsxXS50b1VwcGVyQ2FzZSgpXG4gICAgKVxuICApO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIFwiY2FtZWxDYXNlXCIgaWRlbnRpZmllciAoZS5nLiBgZm9vQmFyQmF6YCkgdG8gXCJkYXNoLWNhc2VcIlxuICogKGUuZy4gYGZvby1iYXItYmF6YCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhbWVsIENhbWVsLWNhc2UgaWRlbnRpZmllclxuICogQHJldHVybiB7c3RyaW5nfSBEYXNoLWNhc2UgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlkZW50aWZpZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsVG9EYXNoQ2FzZShjYW1lbCkge1xuICByZXR1cm4gY2FzZU1hcFtjYW1lbF0gfHwgKFxuICAgIGNhc2VNYXBbY2FtZWxdID0gY2FtZWwucmVwbGFjZShDQU1FTF9UT19EQVNILCAnLSQxJykudG9Mb3dlckNhc2UoKVxuICApO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYSBudW1iZXIgb2Ygc3RyYXRlZ2llcyBmb3IgZW5xdWV1aW5nIGFzeW5jaHJvbm91c1xuICogdGFza3MuIEVhY2ggc3ViLW1vZHVsZSBwcm92aWRlcyBhIHN0YW5kYXJkIGBydW4oZm4pYCBpbnRlcmZhY2UgdGhhdCByZXR1cm5zIGFcbiAqIGhhbmRsZSwgYW5kIGEgYGNhbmNlbChoYW5kbGUpYCBpbnRlcmZhY2UgZm9yIGNhbmNlbGluZyBhc3luYyB0YXNrcyBiZWZvcmVcbiAqIHRoZXkgcnVuLlxuICpcbiAqIEBzdW1tYXJ5IE1vZHVsZSB0aGF0IHByb3ZpZGVzIGEgbnVtYmVyIG9mIHN0cmF0ZWdpZXMgZm9yIGVucXVldWluZ1xuICogYXN5bmNocm9ub3VzIHRhc2tzLlxuICovXG5cbmltcG9ydCAnLi9ib290LmpzJztcblxuLy8gTWljcm90YXNrIGltcGxlbWVudGVkIHVzaW5nIE11dGF0aW9uIE9ic2VydmVyXG5sZXQgbWljcm90YXNrQ3VyckhhbmRsZSA9IDA7XG5sZXQgbWljcm90YXNrTGFzdEhhbmRsZSA9IDA7XG5sZXQgbWljcm90YXNrQ2FsbGJhY2tzID0gW107XG5sZXQgbWljcm90YXNrTm9kZUNvbnRlbnQgPSAwO1xubGV0IG1pY3JvdGFza05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG5uZXcgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIobWljcm90YXNrRmx1c2gpLm9ic2VydmUobWljcm90YXNrTm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTtcblxuZnVuY3Rpb24gbWljcm90YXNrRmx1c2goKSB7XG4gIGNvbnN0IGxlbiA9IG1pY3JvdGFza0NhbGxiYWNrcy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBsZXQgY2IgPSBtaWNyb3Rhc2tDYWxsYmFja3NbaV07XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhyb3cgZTsgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG1pY3JvdGFza0NhbGxiYWNrcy5zcGxpY2UoMCwgbGVuKTtcbiAgbWljcm90YXNrTGFzdEhhbmRsZSArPSBsZW47XG59XG5cbi8qKlxuICogQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGBzZXRUaW1lb3V0YC5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAc3VtbWFyeSBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHNldFRpbWVvdXRgLlxuICovXG5jb25zdCB0aW1lT3V0ID0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIHN1Yi1tb2R1bGUgd2l0aCB0aGUgYXN5bmMgaW50ZXJmYWNlIHByb3ZpZGluZyB0aGUgcHJvdmlkZWRcbiAgICogZGVsYXkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiB0aW1lT3V0XG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gZGVsYXkgVGltZSB0byB3YWl0IGJlZm9yZSBjYWxsaW5nIGNhbGxiYWNrcyBpbiBtc1xuICAgKiBAcmV0dXJuIHshQXN5bmNJbnRlcmZhY2V9IEFuIGFzeW5jIHRpbWVvdXQgaW50ZXJmYWNlXG4gICAqL1xuICBhZnRlcihkZWxheSkge1xuICAgIHJldHVybiB7XG4gICAgICBydW4oZm4pIHsgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCBkZWxheSk7IH0sXG4gICAgICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgaW4gdGhlIG5leHQgdGFzay5cbiAgICpcbiAgICogQG1lbWJlcm9mIHRpbWVPdXRcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGZuIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGF5IERlbGF5IGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGZuLCBkZWxheSkge1xuICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChmbiwgZGVsYXkpO1xuICB9LFxuICAvKipcbiAgICogQ2FuY2VscyBhIHByZXZpb3VzbHkgZW5xdWV1ZWQgYHRpbWVPdXRgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgdGltZU91dFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIGBydW5gIG9mIGNhbGxiYWNrIHRvIGNhbmNlbFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY2FuY2VsKGhhbmRsZSkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgfVxufTtcbmV4cG9ydCB7dGltZU91dH07XG5cbi8qKlxuICogQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBzdW1tYXJ5IEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC5cbiAqL1xuY29uc3QgYW5pbWF0aW9uRnJhbWUgPSB7XG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIGZ1bmN0aW9uIGNhbGxlZCBhdCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCB0aW1pbmcuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBhbmltYXRpb25GcmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik6dm9pZH0gZm4gQ2FsbGJhY2sgdG8gcnVuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAqL1xuICBydW4oZm4pIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG4gIH0sXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgYW5pbWF0aW9uRnJhbWVgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgYW5pbWF0aW9uRnJhbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNhbmNlbChoYW5kbGUpIHtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKTtcbiAgfVxufTtcbmV4cG9ydCB7YW5pbWF0aW9uRnJhbWV9O1xuXG4vKipcbiAqIEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdElkbGVDYWxsYmFja2AuICBGYWxscyBiYWNrIHRvXG4gKiBgc2V0VGltZW91dGAgb24gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBgcmVxdWVzdElkbGVDYWxsYmFja2AuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0SWRsZUNhbGxiYWNrYC5cbiAqL1xuY29uc3QgaWRsZVBlcmlvZCA9IHtcbiAgLyoqXG4gICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGF0IGByZXF1ZXN0SWRsZUNhbGxiYWNrYCB0aW1pbmcuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBpZGxlUGVyaW9kXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUlkbGVEZWFkbGluZSk6dm9pZH0gZm4gQ2FsbGJhY2sgdG8gcnVuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAqL1xuICBydW4oZm4pIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgP1xuICAgICAgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soZm4pIDpcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCAxNik7XG4gIH0sXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgaWRsZVBlcmlvZGAgY2FsbGJhY2suXG4gICAqXG4gICAqIEBtZW1iZXJvZiBpZGxlUGVyaW9kXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gYHJ1bmAgb2YgY2FsbGJhY2sgdG8gY2FuY2VsXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayA/XG4gICAgICB3aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrKGhhbmRsZSkgOlxuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUpO1xuICB9XG59O1xuZXhwb3J0IHtpZGxlUGVyaW9kfTtcblxuLyoqXG4gKiBBc3luYyBpbnRlcmZhY2UgZm9yIGVucXVldWluZyBjYWxsYmFja3MgdGhhdCBydW4gYXQgbWljcm90YXNrIHRpbWluZy5cbiAqXG4gKiBOb3RlIHRoYXQgbWljcm90YXNrIHRpbWluZyBpcyBhY2hpZXZlZCB2aWEgYSBzaW5nbGUgYE11dGF0aW9uT2JzZXJ2ZXJgLFxuICogYW5kIHRodXMgY2FsbGJhY2tzIGVucXVldWVkIHdpdGggdGhpcyBBUEkgd2lsbCBhbGwgcnVuIGluIGEgc2luZ2xlXG4gKiBiYXRjaCwgYW5kIG5vdCBpbnRlcmxlYXZlZCB3aXRoIG90aGVyIG1pY3JvdGFza3Mgc3VjaCBhcyBwcm9taXNlcy5cbiAqIFByb21pc2VzIGFyZSBhdm9pZGVkIGFzIGFuIGltcGxlbWVudGF0aW9uIGNob2ljZSBmb3IgdGhlIHRpbWUgYmVpbmdcbiAqIGR1ZSB0byBTYWZhcmkgYnVncyB0aGF0IGNhdXNlIFByb21pc2VzIHRvIGxhY2sgbWljcm90YXNrIGd1YXJhbnRlZXMuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIGZvciBlbnF1ZXVpbmcgY2FsbGJhY2tzIHRoYXQgcnVuIGF0IG1pY3JvdGFza1xuICogICB0aW1pbmcuXG4gKi9cbmNvbnN0IG1pY3JvVGFzayA9IHtcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgYXQgbWljcm90YXNrIHRpbWluZy5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1pY3JvVGFza1xuICAgKiBAcGFyYW0geyFGdW5jdGlvbj19IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGNhbGxiYWNrKSB7XG4gICAgbWljcm90YXNrTm9kZS50ZXh0Q29udGVudCA9IG1pY3JvdGFza05vZGVDb250ZW50Kys7XG4gICAgbWljcm90YXNrQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBtaWNyb3Rhc2tDdXJySGFuZGxlKys7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbmNlbHMgYSBwcmV2aW91c2x5IGVucXVldWVkIGBtaWNyb1Rhc2tgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbWljcm9UYXNrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gYHJ1bmAgb2YgY2FsbGJhY2sgdG8gY2FuY2VsXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgY29uc3QgaWR4ID0gaGFuZGxlIC0gbWljcm90YXNrTGFzdEhhbmRsZTtcbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGlmICghbWljcm90YXNrQ2FsbGJhY2tzW2lkeF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFzeW5jIGhhbmRsZTogJyArIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBtaWNyb3Rhc2tDYWxsYmFja3NbaWR4XSA9IG51bGw7XG4gICAgfVxuICB9XG5cbn07XG5leHBvcnQge21pY3JvVGFza307XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCB7IG1pY3JvVGFzayB9IGZyb20gJy4uL3V0aWxzL2FzeW5jLmpzJztcblxuLyoqIEBjb25zdCB7IUFzeW5jSW50ZXJmYWNlfSAqL1xuY29uc3QgbWljcm90YXNrID0gbWljcm9UYXNrO1xuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyBtZXRhLXByb2dyYW1taW5nIGZvciBjcmVhdGluZyBvbmVcbiAqIG9yIG1vcmUgcHJvcGVydHkgYWNjZXNzb3JzIChnZXR0ZXIvc2V0dGVyIHBhaXIpIHRoYXQgZW5xdWV1ZSBhbiBhc3luY1xuICogKGJhdGNoZWQpIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICpcbiAqIEZvciBiYXNpYyB1c2FnZSBvZiB0aGlzIG1peGluLCBjYWxsIGBNeUNsYXNzLmNyZWF0ZVByb3BlcnRpZXMocHJvcHMpYFxuICogb25jZSBhdCBjbGFzcyBkZWZpbml0aW9uIHRpbWUgdG8gY3JlYXRlIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgcHJvcGVydGllc1xuICogbmFtZWQgaW4gcHJvcHMsIGltcGxlbWVudCBgX3Byb3BlcnRpZXNDaGFuZ2VkYCB0byByZWFjdCBhcyBkZXNpcmVkIHRvXG4gKiBwcm9wZXJ0eSBjaGFuZ2VzLCBhbmQgaW1wbGVtZW50IGBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpYCBhbmRcbiAqIGluY2x1ZGUgbG93ZXJjYXNlIHZlcnNpb25zIG9mIGFueSBwcm9wZXJ0eSBuYW1lcyB0aGF0IHNob3VsZCBiZSBzZXQgZnJvbVxuICogYXR0cmlidXRlcy4gTGFzdCwgY2FsbCBgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpYCBpbiB0aGUgZWxlbWVudCdzXG4gKiBgY29ubmVjdGVkQ2FsbGJhY2tgIHRvIGVuYWJsZSB0aGUgYWNjZXNzb3JzLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiBmb3IgcmVhY3RpbmcgdG8gcHJvcGVydHkgY2hhbmdlcyBmcm9tXG4gKiAgIGdlbmVyYXRlZCBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9wZXJ0aWVzQ2hhbmdlZCA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBleHRlbmRzIHtzdXBlckNsYXNzfVxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgUHJvcGVydGllc0NoYW5nZWQgZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgcHJvcGVydHkgYWNjZXNzb3JzIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBwcm9wcyBPYmplY3Qgd2hvc2Uga2V5cyBhcmUgbmFtZXMgb2YgYWNjZXNzb3JzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBjb25zdCBwcm90byA9IHRoaXMucHJvdG90eXBlO1xuICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAvLyBkb24ndCBzdG9tcCBhbiBleGlzdGluZyBhY2Nlc3NvclxuICAgICAgICBpZiAoIShwcm9wIGluIHByb3RvKSkge1xuICAgICAgICAgIHByb3RvLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhdHRyaWJ1dGUgbmFtZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKiBUaGUgYXR0cmlidXRlIG5hbWUgaXMgdGhlIGxvd2VyY2FzZWQgcHJvcGVydHkgbmFtZS4gT3ZlcnJpZGUgdG9cbiAgICAgKiBjdXN0b21pemUgdGhpcyBtYXBwaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0byBjb252ZXJ0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBBdHRyaWJ1dGUgbmFtZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gcHJvcGVydHkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBwb2ludCB0byBwcm92aWRlIGEgdHlwZSB0byB3aGljaCB0byBkZXNlcmlhbGl6ZSBhIHZhbHVlIHRvXG4gICAgICogYSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHByb3BlcnR5XG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc3RhdGljIHR5cGVGb3JQcm9wZXJ0eShuYW1lKSB7IH0gLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0dGVyL2dldHRlciBwYWlyIGZvciB0aGUgbmFtZWQgcHJvcGVydHkgd2l0aCBpdHMgb3duXG4gICAgICogbG9jYWwgc3RvcmFnZS4gIFRoZSBnZXR0ZXIgcmV0dXJucyB0aGUgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UsXG4gICAgICogYW5kIHRoZSBzZXR0ZXIgY2FsbHMgYF9zZXRQcm9wZXJ0eWAsIHdoaWNoIHVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICAgKiBmb3IgdGhlIHByb3BlcnR5IGFuZCBlbnF1ZXVlcyBhIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBvbiBhIHByb3RvdHlwZSBvciBhbiBpbnN0YW5jZS4gIENhbGxpbmdcbiAgICAgKiB0aGlzIG1ldGhvZCBtYXkgb3ZlcndyaXRlIGEgcHJvcGVydHkgdmFsdWUgdGhhdCBhbHJlYWR5IGV4aXN0cyBvblxuICAgICAqIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgYnkgY3JlYXRpbmcgdGhlIGFjY2Vzc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVhZE9ubHkgV2hlbiB0cnVlLCBubyBzZXR0ZXIgaXMgY3JlYXRlZDsgdGhlXG4gICAgICogICBwcm90ZWN0ZWQgYF9zZXRQcm9wZXJ0eWAgZnVuY3Rpb24gbXVzdCBiZSB1c2VkIHRvIHNldCB0aGUgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgIHRoaXMuX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocHJvcGVydHkpO1xuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdfX2RhdGFIYXNBY2Nlc3NvcicpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhSGFzQWNjZXNzb3IgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0pIHtcbiAgICAgICAgdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0gPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gYHByb3BlcnR5YCB0byBhIG1hcCBtYXRjaGluZyBhdHRyaWJ1dGUgbmFtZXNcbiAgICAgKiB0byBwcm9wZXJ0eSBuYW1lcywgdXNpbmcgYGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eWAuIFRoaXMgbWFwIGlzXG4gICAgICogdXNlZCB3aGVuIGRlc2VyaWFsaXppbmcgYXR0cmlidXRlIHZhbHVlcyB0byBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICovXG4gICAgX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocHJvcGVydHkpIHtcbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgnX19kYXRhQXR0cmlidXRlcycpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhQXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX19kYXRhQXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuX19kYXRhQXR0cmlidXRlc1twcm9wZXJ0eV0pIHtcbiAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgICAgdGhpcy5fX2RhdGFBdHRyaWJ1dGVzW2F0dHJdID0gcHJvcGVydHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIHByb3BlcnR5IGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVhZE9ubHkgV2hlbiB0cnVlLCBubyBzZXR0ZXIgaXMgY3JlYXRlZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgIF9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BlcnR5LCB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG4gICAgICAgIC8qKiBAdGhpcyB7UHJvcGVydGllc0NoYW5nZWR9ICovXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHRoaXMge1Byb3BlcnRpZXNDaGFuZ2VkfSAqL1xuICAgICAgICBzZXQ6IHJlYWRPbmx5ID8gZnVuY3Rpb24gKCkge30gOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX19kYXRhRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGFSZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGFJbnZhbGlkID0gZmFsc2U7XG4gICAgICB0aGlzLl9fZGF0YSA9IHt9O1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhT2xkID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyA9IG51bGw7XG4gICAgICB0aGlzLl9fc2VyaWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlmZWN5Y2xlIGNhbGxiYWNrIGNhbGxlZCB3aGVuIHByb3BlcnRpZXMgYXJlIGVuYWJsZWQgdmlhXG4gICAgICogYF9lbmFibGVQcm9wZXJ0aWVzYC5cbiAgICAgKlxuICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIHRvIGltcGxlbWVudCBiZWhhdmlvciB0aGF0IGlzXG4gICAgICogZGVwZW5kZW50IG9uIHRoZSBlbGVtZW50IGhhdmluZyBpdHMgcHJvcGVydHkgZGF0YSBpbml0aWFsaXplZCwgZS5nLlxuICAgICAqIGZyb20gZGVmYXVsdHMgKGluaXRpYWxpemVkIGZyb20gYGNvbnN0cnVjdG9yYCwgYF9pbml0aWFsaXplUHJvcGVydGllc2ApLFxuICAgICAqIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLCBvciB2YWx1ZXMgcHJvcGFnYXRlZCBmcm9tIGhvc3QgZS5nLiB2aWFcbiAgICAgKiBiaW5kaW5ncy4gIGBzdXBlci5yZWFkeSgpYCBtdXN0IGJlIGNhbGxlZCB0byBlbnN1cmUgdGhlIGRhdGEgc3lzdGVtXG4gICAgICogYmVjb21lcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICB0aGlzLl9fZGF0YVJlYWR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICpcbiAgICAgKiBQcm92aWRlZCBhcyBhbiBvdmVycmlkZSBwb2ludCBmb3IgcGVyZm9ybWluZyBhbnkgc2V0dXAgd29yayBwcmlvclxuICAgICAqIHRvIGluaXRpYWxpemluZyB0aGUgcHJvcGVydHkgYWNjZXNzb3Igc3lzdGVtLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgLy8gQ2FwdHVyZSBpbnN0YW5jZSBwcm9wZXJ0aWVzOyB0aGVzZSB3aWxsIGJlIHNldCBpbnRvIGFjY2Vzc29yc1xuICAgICAgLy8gZHVyaW5nIGZpcnN0IGZsdXNoLiBEb24ndCBzZXQgdGhlbSBoZXJlLCBzaW5jZSB3ZSB3YW50XG4gICAgICAvLyB0aGVzZSB0byBvdmVyd3JpdGUgZGVmYXVsdHMvY29uc3RydWN0b3IgYXNzaWdubWVudHNcbiAgICAgIGZvciAobGV0IHAgaW4gdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcikge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyA9IHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyB8fCB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHNbcF0gPSB0aGlzW3BdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzW3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGF0IHJlYWR5IHRpbWUgd2l0aCBiYWcgb2YgaW5zdGFuY2UgcHJvcGVydGllcyB0aGF0IG92ZXJ3cm90ZVxuICAgICAqIGFjY2Vzc29ycyB3aGVuIHRoZSBlbGVtZW50IHVwZ3JhZGVkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2V0cyB0aGVzZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGVcbiAgICAgKiBzZXR0ZXIgYXQgcmVhZHkgdGltZS4gIFRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGFuIG92ZXJyaWRlXG4gICAgICogcG9pbnQgZm9yIGN1c3RvbWl6aW5nIG9yIHByb3ZpZGluZyBtb3JlIGVmZmljaWVudCBpbml0aWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgcHJvcGVydHkgdmFsdWVzIHRoYXQgd2VyZSBvdmVyd3JpdHRlblxuICAgICAqICAgd2hlbiBjcmVhdGluZyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2UgZm9yIGEgcHJvcGVydHkgKHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWApXG4gICAgICogYW5kIGVucXVldWVzIGEgYF9wcm9lcHJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9nZXRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2UgZm9yIGEgcHJvcGVydHksIHJlY29yZHMgdGhlIHByZXZpb3VzIHZhbHVlLFxuICAgICAqIGFuZCBhZGRzIGl0IHRvIHRoZSBzZXQgb2YgXCJwZW5kaW5nIGNoYW5nZXNcIiB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLiAgVGhpcyBtZXRob2QgZG9lcyBub3QgZW5xdWV1ZSB0aGVcbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZXh0IE5vdCB1c2VkIGhlcmU7IGFmZm9yZGFuY2UgZm9yIGNsb3N1cmVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIGV4dCkge1xuICAgICAgbGV0IG9sZCA9IHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICAgIGxldCBjaGFuZ2VkID0gdGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpO1xuICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBvbGQgaXMgY2FwdHVyZWQgZnJvbSB0aGUgbGFzdCB0dXJuXG4gICAgICAgIGlmICh0aGlzLl9fZGF0YU9sZCAmJiAhKHByb3BlcnR5IGluIHRoaXMuX19kYXRhT2xkKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkW3Byb3BlcnR5XSA9IG9sZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgKi9cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBwcm9wZXJ0aWVzIGFzIGludmFsaWQsIGFuZCBlbnF1ZXVlcyBhbiBhc3luY1xuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKCF0aGlzLl9fZGF0YUludmFsaWQgJiYgdGhpcy5fX2RhdGFSZWFkeSkge1xuICAgICAgICB0aGlzLl9fZGF0YUludmFsaWQgPSB0cnVlO1xuICAgICAgICBtaWNyb3Rhc2sucnVuKCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5fX2RhdGFJbnZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YUludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCB0byBlbmFibGUgcHJvcGVydHkgYWNjZXNzb3IgcHJvY2Vzc2luZy4gQmVmb3JlIHRoaXMgbWV0aG9kIGlzXG4gICAgICogY2FsbGVkIGFjY2Vzc29yIHZhbHVlcyB3aWxsIGJlIHNldCBidXQgc2lkZSBlZmZlY3RzIGFyZVxuICAgICAqIHF1ZXVlZC4gV2hlbiBjYWxsZWQsIGFueSBwZW5kaW5nIHNpZGUgZWZmZWN0cyBvY2N1ciBpbW1lZGlhdGVseS5cbiAgICAgKiBGb3IgZWxlbWVudHMsIGdlbmVyYWxseSBgY29ubmVjdGVkQ2FsbGJhY2tgIGlzIGEgbm9ybWFsIHNwb3QgdG8gZG8gc28uXG4gICAgICogSXQgaXMgc2FmZSB0byBjYWxsIHRoaXMgbWV0aG9kIG11bHRpcGxlIHRpbWVzIGFzIGl0IG9ubHkgdHVybnMgb25cbiAgICAgKiBwcm9wZXJ0eSBhY2Nlc3NvcnMgb25jZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9lbmFibGVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKCF0aGlzLl9fZGF0YUVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcykge1xuICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXModGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzKTtcbiAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVhZHkoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxscyB0aGUgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2sgd2l0aCB0aGUgY3VycmVudCBzZXQgb2ZcbiAgICAgKiBwZW5kaW5nIGNoYW5nZXMgKGFuZCBvbGQgdmFsdWVzIHJlY29yZGVkIHdoZW4gcGVuZGluZyBjaGFuZ2VzIHdlcmVcbiAgICAgKiBzZXQpLCBhbmQgcmVzZXRzIHRoZSBwZW5kaW5nIHNldCBvZiBjaGFuZ2VzLiBHZW5lcmFsbHksIHRoaXMgbWV0aG9kXG4gICAgICogc2hvdWxkIG5vdCBiZSBjYWxsZWQgaW4gdXNlciBjb2RlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2ZsdXNoUHJvcGVydGllcygpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5fX2RhdGE7XG4gICAgICBjb25zdCBjaGFuZ2VkUHJvcHMgPSB0aGlzLl9fZGF0YVBlbmRpbmc7XG4gICAgICBjb25zdCBvbGQgPSB0aGlzLl9fZGF0YU9sZDtcbiAgICAgIGlmICh0aGlzLl9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlKHByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZCkpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzQ2hhbmdlZChwcm9wcywgY2hhbmdlZFByb3BzLCBvbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBpbiBgX2ZsdXNoUHJvcGVydGllc2AgdG8gZGV0ZXJtaW5lIGlmIGBfcHJvcGVydGllc0NoYW5nZWRgXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcmV0dXJucyB0cnVlIGlmXG4gICAgICogcHJvcGVydGllcyBhcmUgcGVuZGluZy4gT3ZlcnJpZGUgdG8gY3VzdG9taXplIHdoZW5cbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBpcyBjYWxsZWQuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBwcm9wZXJ0aWVzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIGluIGBjaGFuZ2VkUHJvcHNgXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBjaGFuZ2VkUHJvcHMgaXMgdHJ1dGh5XG4gICAgICovXG4gICAgX3Nob3VsZFByb3BlcnRpZXNDaGFuZ2UoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBCb29sZWFuKGNoYW5nZWRQcm9wcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gYW55IHByb3BlcnRpZXMgd2l0aCBhY2Nlc3NvcnMgY3JlYXRlZCB2aWFcbiAgICAgKiBgX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3JgIGhhdmUgYmVlbiBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IGN1cnJlbnRQcm9wcyBCYWcgb2YgYWxsIGN1cnJlbnQgYWNjZXNzb3IgdmFsdWVzXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIHByb3BlcnRpZXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdFxuICAgICAqICAgY2FsbCB0byBgX3Byb3BlcnRpZXNDaGFuZ2VkYFxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAqICAgaW4gYGNoYW5nZWRQcm9wc2BcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcHJvcGVydGllc0NoYW5nZWQoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRob2QgY2FsbGVkIHRvIGRldGVybWluZSB3aGV0aGVyIGEgcHJvcGVydHkgdmFsdWUgc2hvdWxkIGJlXG4gICAgICogY29uc2lkZXJlZCBhcyBhIGNoYW5nZSBhbmQgY2F1c2UgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrXG4gICAgICogdG8gYmUgZW5xdWV1ZWQuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIGB0cnVlYCBpZiBhIHN0cmljdCBlcXVhbGl0eVxuICAgICAqIGNoZWNrIGZhaWxzLiBUaGUgbWV0aG9kIGFsd2F5cyByZXR1cm5zIGZhbHNlIGZvciBgTmFOYC5cbiAgICAgKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGUuZy4gcHJvdmlkZSBzdHJpY3RlciBjaGVja2luZyBmb3JcbiAgICAgKiBPYmplY3RzL0FycmF5cyB3aGVuIHVzaW5nIGltbXV0YWJsZSBwYXR0ZXJucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgY2hhbmdlXG4gICAgICogICBhbmQgZW5xdWV1ZSBhIGBfcHJvZXBydGllc0NoYW5nZWRgIGNhbGxiYWNrXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLy8gU3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAgICAgIChvbGQgIT09IHZhbHVlICYmXG4gICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgICAgICAgICAob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50cyBuYXRpdmUgQ3VzdG9tIEVsZW1lbnRzIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIHRvXG4gICAgICogc2V0IGFuIGF0dHJpYnV0ZSB2YWx1ZSB0byBhIHByb3BlcnR5IHZpYSBgX2F0dHJpYnV0ZVRvUHJvcGVydHlgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBhdHRyaWJ1dGUgdGhhdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgTmV3IGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZXNwYWNlIEF0dHJpYnV0ZSBuYW1lc3BhY2UuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBTdXBlciBtYXkgb3IgbWF5IG5vdCBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgICovXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUsIG5hbWVzcGFjZSkge1xuICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKSB7XG4gICAgICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplcyBhbiBhdHRyaWJ1dGUgdG8gaXRzIGFzc29jaWF0ZWQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjYWxscyB0aGUgYF9kZXNlcmlhbGl6ZVZhbHVlYCBtZXRob2QgdG8gY29udmVydCB0aGUgc3RyaW5nIHRvXG4gICAgICogYSB0eXBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgTmFtZSBvZiBhdHRyaWJ1dGUgdG8gZGVzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7Kj19IHR5cGUgdHlwZSB0byBkZXNlcmlhbGl6ZSB0bywgZGVmYXVsdHMgdG8gdGhlIHZhbHVlXG4gICAgICogcmV0dXJuZWQgZnJvbSBgdHlwZUZvclByb3BlcnR5YFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkoYXR0cmlidXRlLCB2YWx1ZSwgdHlwZSkge1xuICAgICAgaWYgKCF0aGlzLl9fc2VyaWFsaXppbmcpIHtcbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fX2RhdGFBdHRyaWJ1dGVzO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG1hcCAmJiBtYXBbYXR0cmlidXRlXSB8fCBhdHRyaWJ1dGU7XG4gICAgICAgIHRoaXNbcHJvcGVydHldID0gdGhpcy5fZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSB8fFxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IudHlwZUZvclByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyBhIHByb3BlcnR5IHRvIGl0cyBhc3NvY2lhdGVkIGF0dHJpYnV0ZS5cbiAgICAgKlxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBDbG9zdXJlIGNhbid0IGZpZ3VyZSBvdXQgYHRoaXNgIGlzIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZSB0byByZWZsZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYXR0cmlidXRlIEF0dHJpYnV0ZSBuYW1lIHRvIHJlZmxlY3QgdG8uXG4gICAgICogQHBhcmFtIHsqPX0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gcmVmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX3Byb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuX19zZXJpYWxpemluZyA9IHRydWU7XG4gICAgICB2YWx1ZSA9IChhcmd1bWVudHMubGVuZ3RoIDwgMykgPyB0aGlzW3Byb3BlcnR5XSA6IHZhbHVlO1xuICAgICAgdGhpcy5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpLCB2YWx1ZSxcbiAgICAgICAgYXR0cmlidXRlIHx8IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgICB0aGlzLl9fc2VyaWFsaXppbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdHlwZWQgdmFsdWUgdG8gYW4gSFRNTCBhdHRyaWJ1dGUgb24gYSBub2RlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FsbHMgdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCB0byBjb252ZXJ0IHRoZSB0eXBlZFxuICAgICAqIHZhbHVlIHRvIGEgc3RyaW5nLiAgSWYgdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIHRoZSBhdHRyaWJ1dGUgd2lsbCBiZSByZW1vdmVkICh0aGlzIGlzIHRoZSBkZWZhdWx0IGZvciBib29sZWFuXG4gICAgICogdHlwZSBgZmFsc2VgKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBFbGVtZW50IHRvIHNldCBhdHRyaWJ1dGUgdG8uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byBzZXJpYWxpemUgdG8uXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfdmFsdWVUb05vZGVBdHRyaWJ1dGUobm9kZSwgdmFsdWUsIGF0dHJpYnV0ZSkge1xuICAgICAgY29uc3Qgc3RyID0gdGhpcy5fc2VyaWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHN0cik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSB0eXBlZCBKYXZhU2NyaXB0IHZhbHVlIHRvIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gc2V0dGluZyBKUyBwcm9wZXJ0eSB2YWx1ZXMgdG9cbiAgICAgKiBIVE1MIGF0dHJpYnV0ZXMuICBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZVxuICAgICAqIHNlcmlhbGl6YXRpb24gZm9yIGN1c3RvbSB0eXBlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gc2VyaWFsaXplLlxuICAgICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gU3RyaW5nIHNlcmlhbGl6ZWQgZnJvbSB0aGUgcHJvdmlkZWRcbiAgICAgKiBwcm9wZXJ0eSAgdmFsdWUuXG4gICAgICovXG4gICAgX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmcgdG8gYSB0eXBlZCBKYXZhU2NyaXB0IHZhbHVlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gcmVhZGluZyBIVE1MIGF0dHJpYnV0ZSB2YWx1ZXMgdG9cbiAgICAgKiBKUyBwcm9wZXJ0aWVzLiAgVXNlcnMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHByb3ZpZGVcbiAgICAgKiBkZXNlcmlhbGl6YXRpb24gZm9yIGN1c3RvbSBgdHlwZWBzLiBUeXBlcyBmb3IgYEJvb2xlYW5gLCBgU3RyaW5nYCxcbiAgICAgKiBhbmQgYE51bWJlcmAgY29udmVydCBhdHRyaWJ1dGVzIHRvIHRoZSBleHBlY3RlZCB0eXBlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gZGVzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHsqPX0gdHlwZSBUeXBlIHRvIGRlc2VyaWFsaXplIHRoZSBzdHJpbmcgdG8uXG4gICAgICogQHJldHVybiB7Kn0gVHlwZWQgdmFsdWUgZGVzZXJpYWxpemVkIGZyb20gdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBfZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICByZXR1cm4gKHZhbHVlICE9PSBudWxsKTtcbiAgICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIFByb3BlcnRpZXNDaGFuZ2VkO1xufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCAqIGFzIGNhc2VNYXAkMCBmcm9tICcuLi91dGlscy9jYXNlLW1hcC5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzQ2hhbmdlZCB9IGZyb20gJy4vcHJvcGVydGllcy1jaGFuZ2VkLmpzJztcblxubGV0IGNhc2VNYXAgPSBjYXNlTWFwJDA7XG5cbi8vIFNhdmUgbWFwIG9mIG5hdGl2ZSBwcm9wZXJ0aWVzOyB0aGlzIGZvcm1zIGEgYmxhY2tsaXN0IG9yIHByb3BlcnRpZXNcbi8vIHRoYXQgd29uJ3QgaGF2ZSB0aGVpciB2YWx1ZXMgXCJzYXZlZFwiIGJ5IGBzYXZlQWNjZXNzb3JWYWx1ZWAsIHNpbmNlXG4vLyByZWFkaW5nIGZyb20gYW4gSFRNTEVsZW1lbnQgYWNjZXNzb3IgZnJvbSB0aGUgY29udGV4dCBvZiBhIHByb3RvdHlwZSB0aHJvd3NcbmNvbnN0IG5hdGl2ZVByb3BlcnRpZXMgPSB7fTtcbmxldCBwcm90byA9IEhUTUxFbGVtZW50LnByb3RvdHlwZTtcbndoaWxlIChwcm90bykge1xuICBsZXQgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90byk7XG4gIGZvciAobGV0IGk9MDsgaTxwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIG5hdGl2ZVByb3BlcnRpZXNbcHJvcHNbaV1dID0gdHJ1ZTtcbiAgfVxuICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG59XG5cbi8qKlxuICogVXNlZCB0byBzYXZlIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IHRoYXQgd2lsbCBiZSBvdmVycmlkZGVuIHdpdGhcbiAqIGFuIGFjY2Vzc29yLiBJZiB0aGUgYG1vZGVsYCBpcyBhIHByb3RvdHlwZSwgdGhlIHZhbHVlcyB3aWxsIGJlIHNhdmVkXG4gKiBpbiBgX19kYXRhUHJvdG9gLCBhbmQgaXQncyB1cCB0byB0aGUgdXNlciAob3IgZG93bnN0cmVhbSBtaXhpbikgdG9cbiAqIGRlY2lkZSBob3cvd2hlbiB0byBzZXQgdGhlc2UgdmFsdWVzIGJhY2sgaW50byB0aGUgYWNjZXNzb3JzLlxuICogSWYgYG1vZGVsYCBpcyBhbHJlYWR5IGFuIGluc3RhbmNlIChpdCBoYXMgYSBgX19kYXRhYCBwcm9wZXJ0eSksIHRoZW5cbiAqIHRoZSB2YWx1ZSB3aWxsIGJlIHNldCBhcyBhIHBlbmRpbmcgcHJvcGVydHksIG1lYW5pbmcgdGhlIHVzZXIgc2hvdWxkXG4gKiBjYWxsIGBfaW52YWxpZGF0ZVByb3BlcnRpZXNgIG9yIGBfZmx1c2hQcm9wZXJ0aWVzYCB0byB0YWtlIGVmZmVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZUFjY2Vzc29yVmFsdWUobW9kZWwsIHByb3BlcnR5KSB7XG4gIC8vIERvbid0IHJlYWQvc3RvcmUgdmFsdWUgZm9yIGFueSBuYXRpdmUgcHJvcGVydGllcyBzaW5jZSB0aGV5IGNvdWxkIHRocm93XG4gIGlmICghbmF0aXZlUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBsZXQgdmFsdWUgPSBtb2RlbFtwcm9wZXJ0eV07XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChtb2RlbC5fX2RhdGEpIHtcbiAgICAgICAgLy8gQWRkaW5nIGFjY2Vzc29yIHRvIGluc3RhbmNlOyB1cGRhdGUgdGhlIHByb3BlcnR5XG4gICAgICAgIC8vIEl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG8gY2FsbCBfZmx1c2hQcm9wZXJ0aWVzXG4gICAgICAgIG1vZGVsLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFkZGluZyBhY2Nlc3NvciB0byBwcm90bzsgc2F2ZSBwcm90bydzIHZhbHVlIGZvciBpbnN0YW5jZS10aW1lIHVzZVxuICAgICAgICBpZiAoIW1vZGVsLl9fZGF0YVByb3RvKSB7XG4gICAgICAgICAgbW9kZWwuX19kYXRhUHJvdG8gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICghbW9kZWwuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19kYXRhUHJvdG8nLCBtb2RlbCkpKSB7XG4gICAgICAgICAgbW9kZWwuX19kYXRhUHJvdG8gPSBPYmplY3QuY3JlYXRlKG1vZGVsLl9fZGF0YVByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbC5fX2RhdGFQcm90b1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgYmFzaWMgbWV0YS1wcm9ncmFtbWluZyBmb3IgY3JlYXRpbmcgb25lXG4gKiBvciBtb3JlIHByb3BlcnR5IGFjY2Vzc29ycyAoZ2V0dGVyL3NldHRlciBwYWlyKSB0aGF0IGVucXVldWUgYW4gYXN5bmNcbiAqIChiYXRjaGVkKSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAqXG4gKiBGb3IgYmFzaWMgdXNhZ2Ugb2YgdGhpcyBtaXhpbjpcbiAqXG4gKiAtICAgRGVjbGFyZSBhdHRyaWJ1dGVzIHRvIG9ic2VydmUgdmlhIHRoZSBzdGFuZGFyZCBgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKWAuIFVzZVxuICogICAgIGBkYXNoLWNhc2VgIGF0dHJpYnV0ZSBuYW1lcyB0byByZXByZXNlbnQgYGNhbWVsQ2FzZWAgcHJvcGVydHkgbmFtZXMuXG4gKiAtICAgSW1wbGVtZW50IHRoZSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjayBvbiB0aGUgY2xhc3MuXG4gKiAtICAgQ2FsbCBgTXlDbGFzcy5jcmVhdGVQcm9wZXJ0aWVzRm9yQXR0cmlidXRlcygpYCAqKm9uY2UqKiBvbiB0aGUgY2xhc3MgdG8gZ2VuZXJhdGVcbiAqICAgICBwcm9wZXJ0eSBhY2Nlc3NvcnMgZm9yIGVhY2ggb2JzZXJ2ZWQgYXR0cmlidXRlLiBUaGlzIG11c3QgYmUgY2FsbGVkIGJlZm9yZSB0aGUgZmlyc3RcbiAqICAgICBpbnN0YW5jZSBpcyBjcmVhdGVkLCBmb3IgZXhhbXBsZSwgYnkgY2FsbGluZyBpdCBiZWZvcmUgY2FsbGluZyBgY3VzdG9tRWxlbWVudHMuZGVmaW5lYC5cbiAqICAgICBJdCBjYW4gYWxzbyBiZSBjYWxsZWQgbGF6aWx5IGZyb20gdGhlIGVsZW1lbnQncyBgY29uc3RydWN0b3JgLCBhcyBsb25nIGFzIGl0J3MgZ3VhcmRlZCBzb1xuICogICAgIHRoYXQgdGhlIGNhbGwgaXMgb25seSBtYWRlIG9uY2UsIHdoZW4gdGhlIGZpcnN0IGluc3RhbmNlIGlzIGNyZWF0ZWQuXG4gKiAtICAgQ2FsbCBgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpYCBpbiB0aGUgZWxlbWVudCdzIGBjb25uZWN0ZWRDYWxsYmFja2AgdG8gZW5hYmxlXG4gKiAgICAgdGhlIGFjY2Vzc29ycy5cbiAqXG4gKiBBbnkgYG9ic2VydmVkQXR0cmlidXRlc2Agd2lsbCBhdXRvbWF0aWNhbGx5IGJlXG4gKiBkZXNlcmlhbGl6ZWQgdmlhIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIGFuZCBzZXQgdG8gdGhlIGFzc29jaWF0ZWRcbiAqIHByb3BlcnR5IHVzaW5nIGBkYXNoLWNhc2VgLXRvLWBjYW1lbENhc2VgIGNvbnZlbnRpb24uXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIFByb3BlcnRpZXNDaGFuZ2VkXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIGZvciByZWFjdGluZyB0byBwcm9wZXJ0eSBjaGFuZ2VzIGZyb21cbiAqICAgZ2VuZXJhdGVkIHByb3BlcnR5IGFjY2Vzc29ycy5cbiAqL1xuZXhwb3J0IGNvbnN0IFByb3BlcnR5QWNjZXNzb3JzID0gZGVkdXBpbmdNaXhpbihzdXBlckNsYXNzID0+IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHtzdXBlckNsYXNzfVxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgIGNvbnN0IGJhc2UgPSBQcm9wZXJ0aWVzQ2hhbmdlZChzdXBlckNsYXNzKTtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBleHRlbmRzIHtiYXNlfVxuICAgKiBAdW5yZXN0cmljdGVkXG4gICAqL1xuICBjbGFzcyBQcm9wZXJ0eUFjY2Vzc29ycyBleHRlbmRzIGJhc2Uge1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgYWxsIGF0dHJpYnV0ZXMgaW4gdGhlIHN0YW5kYXJkXG4gICAgICogc3RhdGljIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIGFycmF5LlxuICAgICAqXG4gICAgICogQXR0cmlidXRlIG5hbWVzIGFyZSBtYXBwZWQgdG8gcHJvcGVydHkgbmFtZXMgdXNpbmcgdGhlIGBkYXNoLWNhc2VgIHRvXG4gICAgICogYGNhbWVsQ2FzZWAgY29udmVudGlvblxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydGllc0ZvckF0dHJpYnV0ZXMoKSB7XG4gICAgICBsZXQgYSQgPSB0aGlzLm9ic2VydmVkQXR0cmlidXRlcztcbiAgICAgIGZvciAobGV0IGk9MDsgaSA8IGEkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKGNhc2VNYXAuZGFzaFRvQ2FtZWxDYXNlKGEkW2ldKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhdHRyaWJ1dGUgbmFtZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKiBCeSBkZWZhdWx0LCBjb252ZXJ0cyBjYW1lbCB0byBkYXNoIGNhc2UsIGUuZy4gYGZvb0JhcmAgdG8gYGZvby1iYXJgLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0byBjb252ZXJ0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBBdHRyaWJ1dGUgbmFtZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gY2FzZU1hcC5jYW1lbFRvRGFzaENhc2UocHJvcGVydHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBQcm9wZXJ0aWVzQ2hhbmdlZCBpbXBsZW1lbnRhdGlvbiB0byBpbml0aWFsaXplIHZhbHVlcyBmb3JcbiAgICAgKiBhY2Nlc3NvcnMgY3JlYXRlZCBmb3IgdmFsdWVzIHRoYXQgYWxyZWFkeSBleGlzdGVkIG9uIHRoZSBlbGVtZW50XG4gICAgICogcHJvdG90eXBlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKHRoaXMuX19kYXRhUHJvdG8pIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVByb3RvUHJvcGVydGllcyh0aGlzLl9fZGF0YVByb3RvKTtcbiAgICAgICAgdGhpcy5fX2RhdGFQcm90byA9IG51bGw7XG4gICAgICB9XG4gICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYXQgaW5zdGFuY2UgdGltZSB3aXRoIGJhZyBvZiBwcm9wZXJ0aWVzIHRoYXQgd2VyZSBvdmVyd3JpdHRlblxuICAgICAqIGJ5IGFjY2Vzc29ycyBvbiB0aGUgcHJvdG90eXBlIHdoZW4gYWNjZXNzb3JzIHdlcmUgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNldHMgdGhlc2UgcHJvcGVydGllcyBiYWNrIGludG8gdGhlXG4gICAgICogc2V0dGVyIGF0IGluc3RhbmNlIHRpbWUuICBUaGlzIG1ldGhvZCBpcyBwcm92aWRlZCBhcyBhbiBvdmVycmlkZVxuICAgICAqIHBvaW50IGZvciBjdXN0b21pemluZyBvciBwcm92aWRpbmcgbW9yZSBlZmZpY2llbnQgaW5pdGlhbGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIHByb3BlcnR5IHZhbHVlcyB0aGF0IHdlcmUgb3ZlcndyaXR0ZW5cbiAgICAgKiAgIHdoZW4gY3JlYXRpbmcgcHJvcGVydHkgYWNjZXNzb3JzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBmb3IgKGxldCBwIGluIHByb3BzKSB7XG4gICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHAsIHByb3BzW3BdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoZSBlbGVtZW50IGhhcyB0aGUgZ2l2ZW4gYXR0cmlidXRlLiBJZiBpdCBkb2VzIG5vdCxcbiAgICAgKiBhc3NpZ25zIHRoZSBnaXZlbiB2YWx1ZSB0byB0aGUgYXR0cmlidXRlLlxuICAgICAqXG4gICAgICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9IENsb3N1cmUgY2FuJ3QgZmlndXJlIG91dCBgdGhpc2AgaXMgaW5mYWN0IGFuIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgTmFtZSBvZiBhdHRyaWJ1dGUgdG8gZW5zdXJlIGlzIHNldC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9lbnN1cmVBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgY29uc3QgZWwgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi8odGhpcyk7XG4gICAgICBpZiAoIWVsLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlVG9Ob2RlQXR0cmlidXRlKGVsLCB2YWx1ZSwgYXR0cmlidXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgUHJvcGVydGllc0NoYW5nZWQgaW1wbGVtZW50aW9uIHRvIHNlcmlhbGl6ZSBvYmplY3RzIGFzIEpTT04uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFByb3BlcnR5IHZhbHVlIHRvIHNlcmlhbGl6ZS5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmcgfCB1bmRlZmluZWR9IFN0cmluZyBzZXJpYWxpemVkIGZyb20gdGhlIHByb3ZpZGVkIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIF9zZXJpYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZmFsbHRocm91Z2ggKi9cbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2goeCkge1xuICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHN1cGVyLl9zZXJpYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmcgdG8gYSB0eXBlZCBKYXZhU2NyaXB0IHZhbHVlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IFBvbHltZXIgd2hlbiByZWFkaW5nIEhUTUwgYXR0cmlidXRlIHZhbHVlcyB0b1xuICAgICAqIEpTIHByb3BlcnRpZXMuICBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgb24gUG9seW1lciBlbGVtZW50XG4gICAgICogcHJvdG90eXBlcyB0byBwcm92aWRlIGRlc2VyaWFsaXphdGlvbiBmb3IgY3VzdG9tIGB0eXBlYHMuICBOb3RlLFxuICAgICAqIHRoZSBgdHlwZWAgYXJndW1lbnQgaXMgdGhlIHZhbHVlIG9mIHRoZSBgdHlwZWAgZmllbGQgcHJvdmlkZWQgaW4gdGhlXG4gICAgICogYHByb3BlcnRpZXNgIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBhIGdpdmVuIHByb3BlcnR5LCBhbmQgaXNcbiAgICAgKiBieSBjb252ZW50aW9uIHRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIHR5cGUgdG8gZGVzZXJpYWxpemUuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlIHRvIGRlc2VyaWFsaXplLlxuICAgICAqIEBwYXJhbSB7Kj19IHR5cGUgVHlwZSB0byBkZXNlcmlhbGl6ZSB0aGUgc3RyaW5nIHRvLlxuICAgICAqIEByZXR1cm4geyp9IFR5cGVkIHZhbHVlIGRlc2VyaWFsaXplZCBmcm9tIHRoZSBwcm92aWRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUgeyp9XG4gICAgICAgKi9cbiAgICAgIGxldCBvdXRWYWx1ZTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIE9iamVjdDpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0VmFsdWUgPSBKU09OLnBhcnNlKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyh2YWx1ZSkpO1xuICAgICAgICAgIH0gY2F0Y2goeCkge1xuICAgICAgICAgICAgLy8gYWxsb3cgbm9uLUpTT04gbGl0ZXJhbHMgbGlrZSBTdHJpbmdzIGFuZCBOdW1iZXJzXG4gICAgICAgICAgICBvdXRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0VmFsdWUgPSBKU09OLnBhcnNlKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyh2YWx1ZSkpO1xuICAgICAgICAgIH0gY2F0Y2goeCkge1xuICAgICAgICAgICAgb3V0VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBQb2x5bWVyOjpBdHRyaWJ1dGVzOiBjb3VsZG4ndCBkZWNvZGUgQXJyYXkgYXMgSlNPTjogJHt2YWx1ZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRGF0ZTpcbiAgICAgICAgICBvdXRWYWx1ZSA9IGlzTmFOKHZhbHVlKSA/IFN0cmluZyh2YWx1ZSkgOiBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG91dFZhbHVlID0gbmV3IERhdGUob3V0VmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG91dFZhbHVlID0gc3VwZXIuX2Rlc2VyaWFsaXplVmFsdWUodmFsdWUsIHR5cGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dFZhbHVlO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgUHJvcGVydGllc0NoYW5nZWQgaW1wbGVtZW50YXRpb24gdG8gc2F2ZSBleGlzdGluZyBwcm90b3R5cGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBzbyB0aGF0IGl0IGNhbiBiZSByZXNldC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZWFkT25seSBXaGVuIHRydWUsIG5vIHNldHRlciBpcyBjcmVhdGVkXG4gICAgICpcbiAgICAgKiBXaGVuIGNhbGxpbmcgb24gYSBwcm90b3R5cGUsIGFueSBvdmVyd3JpdHRlbiB2YWx1ZXMgYXJlIHNhdmVkIGluXG4gICAgICogYF9fZGF0YVByb3RvYCwgYW5kIGl0IGlzIHVwIHRvIHRoZSBzdWJjbGFzc2VyIHRvIGRlY2lkZSBob3cvd2hlblxuICAgICAqIHRvIHNldCB0aG9zZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGUgYWNjZXNzb3IuICBXaGVuIGNhbGxpbmcgb24gYW5cbiAgICAgKiBpbnN0YW5jZSwgdGhlIG92ZXJ3cml0dGVuIHZhbHVlIGlzIHNldCB2aWEgYF9zZXRQZW5kaW5nUHJvcGVydHlgLFxuICAgICAqIGFuZCB0aGUgdXNlciBzaG91bGQgY2FsbCBgX2ludmFsaWRhdGVQcm9wZXJ0aWVzYCBvciBgX2ZsdXNoUHJvcGVydGllc2BcbiAgICAgKiBmb3IgdGhlIHZhbHVlcyB0byB0YWtlIGVmZmVjdC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfZGVmaW5lUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgIHNhdmVBY2Nlc3NvclZhbHVlKHRoaXMsIHByb3BlcnR5KTtcbiAgICAgIHN1cGVyLl9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgbGlicmFyeSBjcmVhdGVkIGFuIGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gYWNjZXNzb3Igd2FzIGNyZWF0ZWRcbiAgICAgKi9cbiAgICBfaGFzQWNjZXNzb3IocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yICYmIHRoaXMuX19kYXRhSGFzQWNjZXNzb3JbcHJvcGVydHldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IGhhcyBhIHBlbmRpbmcgY2hhbmdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgcHJvcGVydHkgaGFzIGEgcGVuZGluZyBjaGFuZ2VcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2lzUHJvcGVydHlQZW5kaW5nKHByb3ApIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuX19kYXRhUGVuZGluZyAmJiAocHJvcCBpbiB0aGlzLl9fZGF0YVBlbmRpbmcpKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBQcm9wZXJ0eUFjY2Vzc29ycztcblxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcblxuLy8gMS54IGJhY2t3YXJkcy1jb21wYXRpYmxlIGF1dG8td3JhcHBlciBmb3IgdGVtcGxhdGUgdHlwZSBleHRlbnNpb25zXG4vLyBUaGlzIGlzIGEgY2xlYXIgbGF5ZXJpbmcgdmlvbGF0aW9uIGFuZCBnaXZlcyBmYXZvcmVkLW5hdGlvbiBzdGF0dXMgdG9cbi8vIGRvbS1pZiBhbmQgZG9tLXJlcGVhdCB0ZW1wbGF0ZXMuICBUaGlzIGlzIGEgY29uY2VpdCB3ZSdyZSBjaG9vc2luZyB0byBrZWVwXG4vLyBhLikgdG8gZWFzZSAxLnggYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZHVlIHRvIGxvc3Mgb2YgYGlzYCwgYW5kXG4vLyBiLikgdG8gbWFpbnRhaW4gaWYvcmVwZWF0IGNhcGFiaWxpdHkgaW4gcGFyc2VyLWNvbnN0cmFpbmVkIGVsZW1lbnRzXG4vLyAgICAgKGUuZy4gdGFibGUsIHNlbGVjdCkgaW4gbGlldSBvZiBuYXRpdmUgQ0UgdHlwZSBleHRlbnNpb25zIHdpdGhvdXRcbi8vICAgICBtYXNzaXZlIG5ldyBpbnZlbnRpb24gaW4gdGhpcyBzcGFjZSAoZS5nLiBkaXJlY3RpdmUgc3lzdGVtKVxuY29uc3QgdGVtcGxhdGVFeHRlbnNpb25zID0ge1xuICAnZG9tLWlmJzogdHJ1ZSxcbiAgJ2RvbS1yZXBlYXQnOiB0cnVlXG59O1xuZnVuY3Rpb24gd3JhcFRlbXBsYXRlRXh0ZW5zaW9uKG5vZGUpIHtcbiAgbGV0IGlzID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2lzJyk7XG4gIGlmIChpcyAmJiB0ZW1wbGF0ZUV4dGVuc2lvbnNbaXNdKSB7XG4gICAgbGV0IHQgPSBub2RlO1xuICAgIHQucmVtb3ZlQXR0cmlidXRlKCdpcycpO1xuICAgIG5vZGUgPSB0Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChpcyk7XG4gICAgdC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChub2RlLCB0KTtcbiAgICBub2RlLmFwcGVuZENoaWxkKHQpO1xuICAgIHdoaWxlKHQuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKHQuYXR0cmlidXRlc1swXS5uYW1lLCB0LmF0dHJpYnV0ZXNbMF0udmFsdWUpO1xuICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUodC5hdHRyaWJ1dGVzWzBdLm5hbWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gZmluZFRlbXBsYXRlTm9kZShyb290LCBub2RlSW5mbykge1xuICAvLyByZWN1cnNpdmVseSBhc2NlbmQgdHJlZSB1bnRpbCB3ZSBoaXQgcm9vdFxuICBsZXQgcGFyZW50ID0gbm9kZUluZm8ucGFyZW50SW5mbyAmJiBmaW5kVGVtcGxhdGVOb2RlKHJvb3QsIG5vZGVJbmZvLnBhcmVudEluZm8pO1xuICAvLyB1bndpbmQgdGhlIHN0YWNrLCByZXR1cm5pbmcgdGhlIGluZGV4ZWQgbm9kZSBhdCBlYWNoIGxldmVsXG4gIGlmIChwYXJlbnQpIHtcbiAgICAvLyBub3RlOiBtYXJnaW5hbGx5IGZhc3RlciB0aGFuIGluZGV4aW5nIHZpYSBjaGlsZE5vZGVzXG4gICAgLy8gKGh0dHA6Ly9qc3BlcmYuY29tL2NoaWxkbm9kZXMtbG9va3VwKVxuICAgIGZvciAobGV0IG49cGFyZW50LmZpcnN0Q2hpbGQsIGk9MDsgbjsgbj1uLm5leHRTaWJsaW5nKSB7XG4gICAgICBpZiAobm9kZUluZm8ucGFyZW50SW5kZXggPT09IGkrKykge1xuICAgICAgICByZXR1cm4gbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cbn1cblxuLy8gY29uc3RydWN0IGAkYCBtYXAgKGZyb20gaWQgYW5ub3RhdGlvbnMpXG5mdW5jdGlvbiBhcHBseUlkVG9NYXAoaW5zdCwgbWFwLCBub2RlLCBub2RlSW5mbykge1xuICBpZiAobm9kZUluZm8uaWQpIHtcbiAgICBtYXBbbm9kZUluZm8uaWRdID0gbm9kZTtcbiAgfVxufVxuXG4vLyBpbnN0YWxsIGV2ZW50IGxpc3RlbmVycyAoZnJvbSBldmVudCBhbm5vdGF0aW9ucylcbmZ1bmN0aW9uIGFwcGx5RXZlbnRMaXN0ZW5lcihpbnN0LCBub2RlLCBub2RlSW5mbykge1xuICBpZiAobm9kZUluZm8uZXZlbnRzICYmIG5vZGVJbmZvLmV2ZW50cy5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBqPTAsIGUkPW5vZGVJbmZvLmV2ZW50cywgZTsgKGo8ZSQubGVuZ3RoKSAmJiAoZT1lJFtqXSk7IGorKykge1xuICAgICAgaW5zdC5fYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBlLm5hbWUsIGUudmFsdWUsIGluc3QpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBwdXNoIGNvbmZpZ3VyYXRpb24gcmVmZXJlbmNlcyBhdCBjb25maWd1cmUgdGltZVxuZnVuY3Rpb24gYXBwbHlUZW1wbGF0ZUNvbnRlbnQoaW5zdCwgbm9kZSwgbm9kZUluZm8pIHtcbiAgaWYgKG5vZGVJbmZvLnRlbXBsYXRlSW5mbykge1xuICAgIG5vZGUuX3RlbXBsYXRlSW5mbyA9IG5vZGVJbmZvLnRlbXBsYXRlSW5mbztcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlRXZlbnRIYW5kbGVyKGNvbnRleHQsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSkge1xuICAvLyBJbnN0YW5jZXMgY2FuIG9wdGlvbmFsbHkgaGF2ZSBhIF9tZXRob2RIb3N0IHdoaWNoIGFsbG93cyByZWRpcmVjdGluZyB3aGVyZVxuICAvLyB0byBmaW5kIG1ldGhvZHMuIEN1cnJlbnRseSB1c2VkIGJ5IGB0ZW1wbGF0aXplYC5cbiAgY29udGV4dCA9IGNvbnRleHQuX21ldGhvZEhvc3QgfHwgY29udGV4dDtcbiAgbGV0IGhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGNvbnRleHRbbWV0aG9kTmFtZV0pIHtcbiAgICAgIGNvbnRleHRbbWV0aG9kTmFtZV0oZSwgZS5kZXRhaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2xpc3RlbmVyIG1ldGhvZCBgJyArIG1ldGhvZE5hbWUgKyAnYCBub3QgZGVmaW5lZCcpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhhbmRsZXI7XG59XG5cbi8qKlxuICogRWxlbWVudCBtaXhpbiB0aGF0IHByb3ZpZGVzIGJhc2ljIHRlbXBsYXRlIHBhcnNpbmcgYW5kIHN0YW1waW5nLCBpbmNsdWRpbmdcbiAqIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUtcmVsYXRlZCBmZWF0dXJlcyBmb3Igc3RhbXBlZCB0ZW1wbGF0ZXM6XG4gKlxuICogLSBEZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMgKGBvbi1ldmVudG5hbWU9XCJsaXN0ZW5lclwiYClcbiAqIC0gTWFwIG9mIG5vZGUgaWQncyB0byBzdGFtcGVkIG5vZGUgaW5zdGFuY2VzIChgdGhpcy4kLmlkYClcbiAqIC0gTmVzdGVkIHRlbXBsYXRlIGNvbnRlbnQgY2FjaGluZy9yZW1vdmFsIGFuZCByZS1pbnN0YWxsYXRpb24gKHBlcmZvcm1hbmNlXG4gKiAgIG9wdGltaXphdGlvbilcbiAqXG4gKiBAbWl4aW5GdW5jdGlvblxuICogQHBvbHltZXJcbiAqIEBzdW1tYXJ5IEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyB0ZW1wbGF0ZSBwYXJzaW5nIGFuZCBzdGFtcGluZ1xuICovXG5leHBvcnQgY29uc3QgVGVtcGxhdGVTdGFtcCA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1RlbXBsYXRlU3RhbXB9XG4gICAqL1xuICBjbGFzcyBUZW1wbGF0ZVN0YW1wIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG5cbiAgICAvKipcbiAgICAgKiBTY2FucyBhIHRlbXBsYXRlIHRvIHByb2R1Y2UgdGVtcGxhdGUgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBUZW1wbGF0ZS1zcGVjaWZpYyBtZXRhZGF0YSBhcmUgc3RvcmVkIGluIHRoZSBvYmplY3QgcmV0dXJuZWQsIGFuZCBub2RlLVxuICAgICAqIHNwZWNpZmljIG1ldGFkYXRhIGFyZSBzdG9yZWQgaW4gb2JqZWN0cyBpbiBpdHMgZmxhdHRlbmVkIGBub2RlSW5mb0xpc3RgXG4gICAgICogYXJyYXkuICBPbmx5IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSB0aGF0IHdlcmUgcGFyc2VkIGFzIG5vZGVzIG9mXG4gICAgICogaW50ZXJlc3QgY29udGFpbiBhbiBvYmplY3QgaW4gYG5vZGVJbmZvTGlzdGAuICBFYWNoIGBub2RlSW5mb2Agb2JqZWN0XG4gICAgICogY29udGFpbnMgYW4gYGluZGV4YCAoYGNoaWxkTm9kZXNgIGluZGV4IGluIHBhcmVudCkgYW5kIG9wdGlvbmFsbHlcbiAgICAgKiBgcGFyZW50YCwgd2hpY2ggcG9pbnRzIHRvIG5vZGUgaW5mbyBvZiBpdHMgcGFyZW50IChpbmNsdWRpbmcgaXRzIGluZGV4KS5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGlzIG1ldGhvZCBoYXMgdGhlIGZvbGxvd2luZ1xuICAgICAqIHN0cnVjdHVyZSAobWFueSBmaWVsZHMgb3B0aW9uYWwpOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHtcbiAgICAgKiAgICAgLy8gRmxhdHRlbmVkIGxpc3Qgb2Ygbm9kZSBtZXRhZGF0YSAoZm9yIG5vZGVzIHRoYXQgZ2VuZXJhdGVkIG1ldGFkYXRhKVxuICAgICAqICAgICBub2RlSW5mb0xpc3Q6IFtcbiAgICAgKiAgICAgICB7XG4gICAgICogICAgICAgICAvLyBgaWRgIGF0dHJpYnV0ZSBmb3IgYW55IG5vZGVzIHdpdGggaWQncyBmb3IgZ2VuZXJhdGluZyBgJGAgbWFwXG4gICAgICogICAgICAgICBpZDoge3N0cmluZ30sXG4gICAgICogICAgICAgICAvLyBgb24tZXZlbnQ9XCJoYW5kbGVyXCJgIG1ldGFkYXRhXG4gICAgICogICAgICAgICBldmVudHM6IFtcbiAgICAgKiAgICAgICAgICAge1xuICAgICAqICAgICAgICAgICAgIG5hbWU6IHtzdHJpbmd9LCAgIC8vIGV2ZW50IG5hbWVcbiAgICAgKiAgICAgICAgICAgICB2YWx1ZToge3N0cmluZ30sICAvLyBoYW5kbGVyIG1ldGhvZCBuYW1lXG4gICAgICogICAgICAgICAgIH0sIC4uLlxuICAgICAqICAgICAgICAgXSxcbiAgICAgKiAgICAgICAgIC8vIE5vdGVzIHdoZW4gdGhlIHRlbXBsYXRlIGNvbnRhaW5lZCBhIGA8c2xvdD5gIGZvciBzaGFkeSBET01cbiAgICAgKiAgICAgICAgIC8vIG9wdGltaXphdGlvbiBwdXJwb3Nlc1xuICAgICAqICAgICAgICAgaGFzSW5zZXJ0aW9uUG9pbnQ6IHtib29sZWFufSxcbiAgICAgKiAgICAgICAgIC8vIEZvciBuZXN0ZWQgYDx0ZW1wbGF0ZT5gYCBub2RlcywgbmVzdGVkIHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICogICAgICAgICB0ZW1wbGF0ZUluZm86IHtvYmplY3R9LCAvLyBuZXN0ZWQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgKiAgICAgICAgIC8vIE1ldGFkYXRhIHRvIGFsbG93IGVmZmljaWVudCByZXRyaWV2YWwgb2YgaW5zdGFuY2VkIG5vZGVcbiAgICAgKiAgICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBtZXRhZGF0YVxuICAgICAqICAgICAgICAgcGFyZW50SW5mbzoge251bWJlcn0sICAgLy8gcmVmZXJlbmNlIHRvIHBhcmVudCBub2RlSW5mbz5cbiAgICAgKiAgICAgICAgIHBhcmVudEluZGV4OiB7bnVtYmVyfSwgIC8vIGluZGV4IGluIHBhcmVudCdzIGBjaGlsZE5vZGVzYCBjb2xsZWN0aW9uXG4gICAgICogICAgICAgICBpbmZvSW5kZXg6IHtudW1iZXJ9LCAgICAvLyBpbmRleCBvZiB0aGlzIGBub2RlSW5mb2AgaW4gYHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3RgXG4gICAgICogICAgICAgfSxcbiAgICAgKiAgICAgICAuLi5cbiAgICAgKiAgICAgXSxcbiAgICAgKiAgICAgLy8gV2hlbiB0cnVlLCB0aGUgdGVtcGxhdGUgaGFkIHRoZSBgc3RyaXAtd2hpdGVzcGFjZWAgYXR0cmlidXRlXG4gICAgICogICAgIC8vIG9yIHdhcyBuZXN0ZWQgaW4gYSB0ZW1wbGF0ZSB3aXRoIHRoYXQgc2V0dGluZ1xuICAgICAqICAgICBzdHJpcFdoaXRlc3BhY2U6IHtib29sZWFufSxcbiAgICAgKiAgICAgLy8gRm9yIG5lc3RlZCB0ZW1wbGF0ZXMsIG5lc3RlZCB0ZW1wbGF0ZSBjb250ZW50IGlzIG1vdmVkIGludG9cbiAgICAgKiAgICAgLy8gYSBkb2N1bWVudCBmcmFnbWVudCBzdG9yZWQgaGVyZTsgdGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gdG9cbiAgICAgKiAgICAgLy8gYXZvaWQgdGhlIGNvc3Qgb2YgbmVzdGVkIHRlbXBsYXRlIGNsb25pbmdcbiAgICAgKiAgICAgY29udGVudDoge0RvY3VtZW50RnJhZ21lbnR9XG4gICAgICogICB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBraWNrcyBvZmYgYSByZWN1cnNpdmUgdHJlZXdhbGsgYXMgZm9sbG93czpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICAgIF9wYXJzZVRlbXBsYXRlIDwtLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gICAgICogICAgICBfcGFyc2VUZW1wbGF0ZUNvbnRlbnQgICAgICAgICAgICAgIHxcbiAgICAgKiAgICAgICAgX3BhcnNlVGVtcGxhdGVOb2RlICA8LS0tLS0tLS0tLS0tfC0tK1xuICAgICAqICAgICAgICAgIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUgLS0rICB8XG4gICAgICogICAgICAgICAgX3BhcnNlVGVtcGxhdGVDaGlsZE5vZGVzIC0tLS0tLS0tLStcbiAgICAgKiAgICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzXG4gICAgICogICAgICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgb3ZlcnJpZGRlbiB0byBhZGQgY3VzdG9tIG1ldGFkYXRhIGFib3V0IHRlbXBsYXRlc1xuICAgICAqIHRvIGVpdGhlciBgdGVtcGxhdGVJbmZvYCBvciBgbm9kZUluZm9gLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIG1heSBiZSBkZXN0cnVjdGl2ZSB0byB0aGUgdGVtcGxhdGUsIGluIHRoYXRcbiAgICAgKiBlLmcuIGV2ZW50IGFubm90YXRpb25zIG1heSBiZSByZW1vdmVkIGFmdGVyIGJlaW5nIG5vdGVkIGluIHRoZVxuICAgICAqIHRlbXBsYXRlIG1ldGFkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mbz19IG91dGVyVGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZyb20gdGhlIG91dGVyXG4gICAgICogICB0ZW1wbGF0ZSwgZm9yIHBhcnNpbmcgbmVzdGVkIHRlbXBsYXRlc1xuICAgICAqIEByZXR1cm4geyFUZW1wbGF0ZUluZm99IFBhcnNlZCB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgb3V0ZXJUZW1wbGF0ZUluZm8pIHtcbiAgICAgIC8vIHNpbmNlIGEgdGVtcGxhdGUgbWF5IGJlIHJlLXVzZWQsIG1lbW8taXplIG1ldGFkYXRhXG4gICAgICBpZiAoIXRlbXBsYXRlLl90ZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlLl90ZW1wbGF0ZUluZm8gPSB7fTtcbiAgICAgICAgdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdCA9IFtdO1xuICAgICAgICB0ZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZVNwYWNlID1cbiAgICAgICAgICAob3V0ZXJUZW1wbGF0ZUluZm8gJiYgb3V0ZXJUZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZVNwYWNlKSB8fFxuICAgICAgICAgIHRlbXBsYXRlLmhhc0F0dHJpYnV0ZSgnc3RyaXAtd2hpdGVzcGFjZScpO1xuICAgICAgICB0aGlzLl9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCB7cGFyZW50OiBudWxsfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVtcGxhdGUuX3RlbXBsYXRlSW5mbztcbiAgICB9XG5cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVDb250ZW50KHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGUodGVtcGxhdGUuY29udGVudCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRlbXBsYXRlIG5vZGUgYW5kIGFkZHMgdGVtcGxhdGUgYW5kIG5vZGUgbWV0YWRhdGEgYmFzZWQgb25cbiAgICAgKiB0aGUgY3VycmVudCBub2RlLCBhbmQgaXRzIGBjaGlsZE5vZGVzYCBhbmQgYGF0dHJpYnV0ZXNgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIG92ZXJyaWRkZW4gdG8gYWRkIGN1c3RvbSBub2RlIG9yIHRlbXBsYXRlIHNwZWNpZmljXG4gICAgICogbWV0YWRhdGEgYmFzZWQgb24gdGhpcyBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOb2RlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIGxldCBub3RlZDtcbiAgICAgIGxldCBlbGVtZW50ID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyhub2RlKTtcbiAgICAgIGlmIChlbGVtZW50LmxvY2FsTmFtZSA9PSAndGVtcGxhdGUnICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgncHJlc2VydmUtY29udGVudCcpKSB7XG4gICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5lc3RlZFRlbXBsYXRlKGVsZW1lbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHx8IG5vdGVkO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ3Nsb3QnKSB7XG4gICAgICAgIC8vIEZvciBTaGFkeURvbSBvcHRpbWl6YXRpb24sIGluZGljYXRpbmcgdGhlcmUgaXMgYW4gaW5zZXJ0aW9uIHBvaW50XG4gICAgICAgIHRlbXBsYXRlSW5mby5oYXNJbnNlcnRpb25Qb2ludCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMoZWxlbWVudCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykgfHwgbm90ZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGVzICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzKGVsZW1lbnQsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHx8IG5vdGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0ZW1wbGF0ZSBjaGlsZCBub2RlcyBmb3IgdGhlIGdpdmVuIHJvb3Qgbm9kZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGFsc28gd3JhcHMgd2hpdGVsaXN0ZWQgbGVnYWN5IHRlbXBsYXRlIGV4dGVuc2lvbnNcbiAgICAgKiAoYGlzPVwiZG9tLWlmXCJgIGFuZCBgaXM9XCJkb20tcmVwZWF0XCJgKSB3aXRoIHRoZWlyIGVxdWl2YWxlbnQgZWxlbWVudFxuICAgICAqIHdyYXBwZXJzLCBjb2xsYXBzZXMgdGV4dCBub2RlcywgYW5kIHN0cmlwcyB3aGl0ZXNwYWNlIGZyb20gdGhlIHRlbXBsYXRlXG4gICAgICogaWYgdGhlIGB0ZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZXNwYWNlYCBzZXR0aW5nIHdhcyBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcm9vdCBSb290IG5vZGUgd2hvc2UgYGNoaWxkTm9kZXNgIHdpbGwgYmUgcGFyc2VkXG4gICAgICogQHBhcmFtIHshVGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMocm9vdCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgaWYgKHJvb3QubG9jYWxOYW1lID09PSAnc2NyaXB0JyB8fCByb290LmxvY2FsTmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBub2RlPXJvb3QuZmlyc3RDaGlsZCwgcGFyZW50SW5kZXg9MCwgbmV4dDsgbm9kZTsgbm9kZT1uZXh0KSB7XG4gICAgICAgIC8vIFdyYXAgdGVtcGxhdGVzXG4gICAgICAgIGlmIChub2RlLmxvY2FsTmFtZSA9PSAndGVtcGxhdGUnKSB7XG4gICAgICAgICAgbm9kZSA9IHdyYXBUZW1wbGF0ZUV4dGVuc2lvbihub2RlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb2xsYXBzZSBhZGphY2VudCB0ZXh0Tm9kZXM6IGZpeGVzIGFuIElFIGlzc3VlIHRoYXQgY2FuIGNhdXNlXG4gICAgICAgIC8vIHRleHQgbm9kZXMgdG8gYmUgaW5leHBsaWNhYmx5IHNwbGl0ID0oXG4gICAgICAgIC8vIG5vdGUgdGhhdCByb290Lm5vcm1hbGl6ZSgpIHNob3VsZCB3b3JrIGJ1dCBkb2VzIG5vdCBzbyB3ZSBkbyB0aGlzXG4gICAgICAgIC8vIG1hbnVhbGx5LlxuICAgICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgbGV0IC8qKiBOb2RlICovIG4gPSBuZXh0O1xuICAgICAgICAgIHdoaWxlIChuICYmIChuLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkpIHtcbiAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgKz0gbi50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIG5leHQgPSBuLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgcm9vdC5yZW1vdmVDaGlsZChuKTtcbiAgICAgICAgICAgIG4gPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBvcHRpb25hbGx5IHN0cmlwIHdoaXRlc3BhY2VcbiAgICAgICAgICBpZiAodGVtcGxhdGVJbmZvLnN0cmlwV2hpdGVTcGFjZSAmJiAhbm9kZS50ZXh0Q29udGVudC50cmltKCkpIHtcbiAgICAgICAgICAgIHJvb3QucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoaWxkSW5mbyA9IHsgcGFyZW50SW5kZXgsIHBhcmVudEluZm86IG5vZGVJbmZvIH07XG4gICAgICAgIGlmICh0aGlzLl9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIGNoaWxkSW5mbykpIHtcbiAgICAgICAgICBjaGlsZEluZm8uaW5mb0luZGV4ID0gdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdC5wdXNoKC8qKiBAdHlwZSB7IU5vZGVJbmZvfSAqLyhjaGlsZEluZm8pKSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5jcmVtZW50IGlmIG5vdCByZW1vdmVkXG4gICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBwYXJlbnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRlbXBsYXRlIGNvbnRlbnQgZm9yIHRoZSBnaXZlbiBuZXN0ZWQgYDx0ZW1wbGF0ZT5gLlxuICAgICAqXG4gICAgICogTmVzdGVkIHRlbXBsYXRlIGluZm8gaXMgc3RvcmVkIGFzIGB0ZW1wbGF0ZUluZm9gIGluIHRoZSBjdXJyZW50IG5vZGUnc1xuICAgICAqIGBub2RlSW5mb2AuIGB0ZW1wbGF0ZS5jb250ZW50YCBpcyByZW1vdmVkIGFuZCBzdG9yZWQgaW4gYHRlbXBsYXRlSW5mb2AuXG4gICAgICogSXQgd2lsbCB0aGVuIGJlIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgaG9zdCB0byBzZXQgaXQgYmFjayB0byB0aGVcbiAgICAgKiB0ZW1wbGF0ZSBhbmQgZm9yIHVzZXJzIHN0YW1waW5nIG5lc3RlZCB0ZW1wbGF0ZXMgdG8gdXNlIHRoZVxuICAgICAqIGBfY29udGVudEZvclRlbXBsYXRlYCBtZXRob2QgdG8gcmV0cmlldmUgdGhlIGNvbnRlbnQgZm9yIHRoaXMgdGVtcGxhdGVcbiAgICAgKiAoYW4gb3B0aW1pemF0aW9uIHRvIGF2b2lkIHRoZSBjb3N0IG9mIGNsb25pbmcgbmVzdGVkIHRlbXBsYXRlIGNvbnRlbnQpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSBub2RlIE5vZGUgdG8gcGFyc2UgKGEgPHRlbXBsYXRlPilcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gb3V0ZXJUZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiAgIHRoYXQgaW5jbHVkZXMgdGhlIHRlbXBsYXRlIGBub2RlYFxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZShub2RlLCBvdXRlclRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSB0aGlzLl9wYXJzZVRlbXBsYXRlKG5vZGUsIG91dGVyVGVtcGxhdGVJbmZvKTtcbiAgICAgIGxldCBjb250ZW50ID0gdGVtcGxhdGVJbmZvLmNvbnRlbnQgPVxuICAgICAgICBub2RlLmNvbnRlbnQub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBjb250ZW50LmFwcGVuZENoaWxkKG5vZGUuY29udGVudCk7XG4gICAgICBub2RlSW5mby50ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGVtcGxhdGUgbm9kZSBhdHRyaWJ1dGVzIGFuZCBhZGRzIG5vZGUgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIGZvciBub2RlcyBvZiBpbnRlcmVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIC8vIE1ha2UgY29weSBvZiBvcmlnaW5hbCBhdHRyaWJ1dGUgbGlzdCwgc2luY2UgdGhlIG9yZGVyIG1heSBjaGFuZ2VcbiAgICAgIC8vIGFzIGF0dHJpYnV0ZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkXG4gICAgICBsZXQgbm90ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBhdHRycyA9IEFycmF5LmZyb20obm9kZS5hdHRyaWJ1dGVzKTtcbiAgICAgIGZvciAobGV0IGk9YXR0cnMubGVuZ3RoLTEsIGE7IChhPWF0dHJzW2ldKTsgaS0tKSB7XG4gICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgYS5uYW1lLCBhLnZhbHVlKSB8fCBub3RlZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzaW5nbGUgdGVtcGxhdGUgbm9kZSBhdHRyaWJ1dGUgYW5kIGFkZHMgbm9kZSBtZXRhZGF0YSB0b1xuICAgICAqIGBub2RlSW5mb2AgZm9yIGF0dHJpYnV0ZXMgb2YgaW50ZXJlc3QuXG4gICAgICpcbiAgICAgKiBUaGlzIGltcGxlbWVudGF0aW9uIGFkZHMgbWV0YWRhdGEgZm9yIGBvbi1ldmVudD1cImhhbmRsZXJcImAgYXR0cmlidXRlc1xuICAgICAqIGFuZCBgaWRgIGF0dHJpYnV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgbmFtZSwgdmFsdWUpIHtcbiAgICAgIC8vIGV2ZW50cyAob24tKilcbiAgICAgIGlmIChuYW1lLnNsaWNlKDAsIDMpID09PSAnb24tJykge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgbm9kZUluZm8uZXZlbnRzID0gbm9kZUluZm8uZXZlbnRzIHx8IFtdO1xuICAgICAgICBub2RlSW5mby5ldmVudHMucHVzaCh7XG4gICAgICAgICAgbmFtZTogbmFtZS5zbGljZSgzKSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICAvLyBzdGF0aWMgaWRcbiAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdpZCcpIHtcbiAgICAgICAgbm9kZUluZm8uaWQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYGNvbnRlbnRgIGRvY3VtZW50IGZyYWdtZW50IGZvciBhIGdpdmVuIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogRm9yIG5lc3RlZCB0ZW1wbGF0ZXMsIFBvbHltZXIgcGVyZm9ybXMgYW4gb3B0aW1pemF0aW9uIHRvIGNhY2hlIG5lc3RlZFxuICAgICAqIHRlbXBsYXRlIGNvbnRlbnQgdG8gYXZvaWQgdGhlIGNvc3Qgb2YgY2xvbmluZyBkZWVwbHkgbmVzdGVkIHRlbXBsYXRlcy5cbiAgICAgKiBUaGlzIG1ldGhvZCByZXRyaWV2ZXMgdGhlIGNhY2hlZCBjb250ZW50IGZvciBhIGdpdmVuIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byByZXRyaWV2ZSBgY29udGVudGAgZm9yXG4gICAgICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH0gQ29udGVudCBmcmFnbWVudFxuICAgICAqL1xuICAgIHN0YXRpYyBfY29udGVudEZvclRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50V2l0aEluZm99ICovICh0ZW1wbGF0ZSkuX3RlbXBsYXRlSW5mbztcbiAgICAgIHJldHVybiAodGVtcGxhdGVJbmZvICYmIHRlbXBsYXRlSW5mby5jb250ZW50KSB8fCB0ZW1wbGF0ZS5jb250ZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb25lcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgY29udGVudCBhbmQgcmV0dXJucyBhIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICogY29udGFpbmluZyB0aGUgY2xvbmVkIGRvbS5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBwYXJzZWQgKG9uY2UgYW5kIG1lbW9pemVkKSB1c2luZyB0aGlzIGxpYnJhcnknc1xuICAgICAqIHRlbXBsYXRlIHBhcnNpbmcgZmVhdHVyZXMsIGFuZCBwcm92aWRlcyB0aGUgZm9sbG93aW5nIHZhbHVlLWFkZGVkXG4gICAgICogZmVhdHVyZXM6XG4gICAgICogKiBBZGRzIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyBmb3IgYG9uLWV2ZW50PVwiaGFuZGxlclwiYCBhdHRyaWJ1dGVzXG4gICAgICogKiBHZW5lcmF0ZXMgYW4gXCJpZCBtYXBcIiBmb3IgYWxsIG5vZGVzIHdpdGggaWQncyB1bmRlciBgJGAgb24gcmV0dXJuZWRcbiAgICAgKiAgIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICogKiBQYXNzZXMgdGVtcGxhdGUgaW5mbyBpbmNsdWRpbmcgYGNvbnRlbnRgIGJhY2sgdG8gdGVtcGxhdGVzIGFzXG4gICAgICogICBgX3RlbXBsYXRlSW5mb2AgKGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHRvIGF2b2lkIGRlZXAgdGVtcGxhdGVcbiAgICAgKiAgIGNsb25pbmcpXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlIG1lbW9pemVkIHRlbXBsYXRlIHBhcnNpbmcgcHJvY2VzcyBpcyBkZXN0cnVjdGl2ZSB0byB0aGVcbiAgICAgKiB0ZW1wbGF0ZTogYXR0cmlidXRlcyBmb3IgYmluZGluZ3MgYW5kIGRlY2xhcmF0aXZlIGV2ZW50IGxpc3RlbmVycyBhcmVcbiAgICAgKiByZW1vdmVkIGFmdGVyIGJlaW5nIG5vdGVkIGluIG5vdGVzLCBhbmQgYW55IG5lc3RlZCBgPHRlbXBsYXRlPi5jb250ZW50YFxuICAgICAqIGlzIHJlbW92ZWQgYW5kIHN0b3JlZCBpbiBub3RlcyBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgdG8gc3RhbXBcbiAgICAgKiBAcmV0dXJuIHshU3RhbXBlZFRlbXBsYXRlfSBDbG9uZWQgdGVtcGxhdGUgY29udGVudFxuICAgICAqL1xuICAgIF9zdGFtcFRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAvLyBQb2x5ZmlsbCBzdXBwb3J0OiBib290c3RyYXAgdGhlIHRlbXBsYXRlIGlmIGl0IGhhcyBub3QgYWxyZWFkeSBiZWVuXG4gICAgICBpZiAodGVtcGxhdGUgJiYgIXRlbXBsYXRlLmNvbnRlbnQgJiZcbiAgICAgICAgICB3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudCAmJiBIVE1MVGVtcGxhdGVFbGVtZW50LmRlY29yYXRlKSB7XG4gICAgICAgIEhUTUxUZW1wbGF0ZUVsZW1lbnQuZGVjb3JhdGUodGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRoaXMuY29uc3RydWN0b3IuX3BhcnNlVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgbGV0IG5vZGVJbmZvID0gdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdDtcbiAgICAgIGxldCBjb250ZW50ID0gdGVtcGxhdGVJbmZvLmNvbnRlbnQgfHwgdGVtcGxhdGUuY29udGVudDtcbiAgICAgIGxldCBkb20gPSAvKiogQHR5cGUge0RvY3VtZW50RnJhZ21lbnR9ICovIChkb2N1bWVudC5pbXBvcnROb2RlKGNvbnRlbnQsIHRydWUpKTtcbiAgICAgIC8vIE5PVEU6IFNoYWR5RG9tIG9wdGltaXphdGlvbiBpbmRpY2F0aW5nIHRoZXJlIGlzIGFuIGluc2VydGlvbiBwb2ludFxuICAgICAgZG9tLl9fbm9JbnNlcnRpb25Qb2ludCA9ICF0ZW1wbGF0ZUluZm8uaGFzSW5zZXJ0aW9uUG9pbnQ7XG4gICAgICBsZXQgbm9kZXMgPSBkb20ubm9kZUxpc3QgPSBuZXcgQXJyYXkobm9kZUluZm8ubGVuZ3RoKTtcbiAgICAgIGRvbS4kID0ge307XG4gICAgICBmb3IgKGxldCBpPTAsIGw9bm9kZUluZm8ubGVuZ3RoLCBpbmZvOyAoaTxsKSAmJiAoaW5mbz1ub2RlSW5mb1tpXSk7IGkrKykge1xuICAgICAgICBsZXQgbm9kZSA9IG5vZGVzW2ldID0gZmluZFRlbXBsYXRlTm9kZShkb20sIGluZm8pO1xuICAgICAgICBhcHBseUlkVG9NYXAodGhpcywgZG9tLiQsIG5vZGUsIGluZm8pO1xuICAgICAgICBhcHBseVRlbXBsYXRlQ29udGVudCh0aGlzLCBub2RlLCBpbmZvKTtcbiAgICAgICAgYXBwbHlFdmVudExpc3RlbmVyKHRoaXMsIG5vZGUsIGluZm8pO1xuICAgICAgfVxuICAgICAgZG9tID0gLyoqIEB0eXBlIHshU3RhbXBlZFRlbXBsYXRlfSAqLyhkb20pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gICAgICByZXR1cm4gZG9tO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgYnkgbWV0aG9kIG5hbWUgZm9yIHRoZSBldmVudCBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGdlbmVyYXRlcyBhIGhhbmRsZXIgZnVuY3Rpb24gdGhhdCBsb29rcyB1cCB0aGUgbWV0aG9kXG4gICAgICogbmFtZSBhdCBoYW5kbGluZyB0aW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBOb2RlIHRvIGFkZCBsaXN0ZW5lciBvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiBldmVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIE5hbWUgb2YgbWV0aG9kXG4gICAgICogQHBhcmFtIHsqPX0gY29udGV4dCBDb250ZXh0IHRoZSBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgb24gKGRlZmF1bHRzXG4gICAgICogICB0byBgbm9kZWApXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IEdlbmVyYXRlZCBoYW5kbGVyIGZ1bmN0aW9uXG4gICAgICovXG4gICAgX2FkZE1ldGhvZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBtZXRob2ROYW1lLCBjb250ZXh0KSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCBub2RlO1xuICAgICAgbGV0IGhhbmRsZXIgPSBjcmVhdGVOb2RlRXZlbnRIYW5kbGVyKGNvbnRleHQsIGV2ZW50TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVyVG9Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICByZXR1cm4gaGFuZGxlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBwb2ludCBmb3IgYWRkaW5nIGN1c3RvbSBvciBzaW11bGF0ZWQgZXZlbnQgaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlIE5vZGUgdG8gYWRkIGV2ZW50IGxpc3RlbmVyIHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHBvaW50IGZvciBhZGRpbmcgY3VzdG9tIG9yIHNpbXVsYXRlZCBldmVudCBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lciBmcm9tXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gcmVtb3ZlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcmVtb3ZlRXZlbnRMaXN0ZW5lckZyb21Ob2RlKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gVGVtcGxhdGVTdGFtcDtcblxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgcm9vdCBhcyByb290JDAsIGlzQW5jZXN0b3IsIGlzRGVzY2VuZGFudCwgZ2V0IGFzIGdldCQwLCB0cmFuc2xhdGUsIGlzUGF0aCBhcyBpc1BhdGgkMCwgc2V0IGFzIHNldCQwLCBub3JtYWxpemUgfSBmcm9tICcuLi91dGlscy9wYXRoLmpzJztcbi8qIGZvciBub3RpZnksIHJlZmxlY3QgKi9cbmltcG9ydCAqIGFzIGNhc2VNYXAgZnJvbSAnLi4vdXRpbHMvY2FzZS1tYXAuanMnO1xuaW1wb3J0IHsgY2FtZWxUb0Rhc2hDYXNlIGFzIGNhbWVsVG9EYXNoQ2FzZSQwLCBkYXNoVG9DYW1lbENhc2UgfSBmcm9tICcuLi91dGlscy9jYXNlLW1hcC5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0eUFjY2Vzc29ycyB9IGZyb20gJy4vcHJvcGVydHktYWNjZXNzb3JzLmpzJztcbi8qIGZvciBhbm5vdGF0ZWQgZWZmZWN0cyAqL1xuaW1wb3J0IHsgVGVtcGxhdGVTdGFtcCB9IGZyb20gJy4vdGVtcGxhdGUtc3RhbXAuanMnO1xuaW1wb3J0IHsgc2FuaXRpemVET01WYWx1ZSB9IGZyb20gJy4uL3V0aWxzL3NldHRpbmdzLmpzJztcblxuLyoqIEBjb25zdCB7T2JqZWN0fSAqL1xuY29uc3QgQ2FzZU1hcCA9IGNhc2VNYXA7XG5cbi8vIE1vbm90b25pY2FsbHkgaW5jcmVhc2luZyB1bmlxdWUgSUQgdXNlZCBmb3IgZGUtZHVwaW5nIGVmZmVjdHMgdHJpZ2dlcmVkXG4vLyBmcm9tIG11bHRpcGxlIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgdHVyblxubGV0IGRlZHVwZUlkID0gMDtcblxuLyoqXG4gKiBQcm9wZXJ0eSBlZmZlY3QgdHlwZXM7IGVmZmVjdHMgYXJlIHN0b3JlZCBvbiB0aGUgcHJvdG90eXBlIHVzaW5nIHRoZXNlIGtleXNcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFRZUEVTID0ge1xuICBDT01QVVRFOiAnX19jb21wdXRlRWZmZWN0cycsXG4gIFJFRkxFQ1Q6ICdfX3JlZmxlY3RFZmZlY3RzJyxcbiAgTk9USUZZOiAnX19ub3RpZnlFZmZlY3RzJyxcbiAgUFJPUEFHQVRFOiAnX19wcm9wYWdhdGVFZmZlY3RzJyxcbiAgT0JTRVJWRTogJ19fb2JzZXJ2ZUVmZmVjdHMnLFxuICBSRUFEX09OTFk6ICdfX3JlYWRPbmx5J1xufTtcblxuLyoqIEBjb25zdCB7UmVnRXhwfSAqL1xuY29uc3QgY2FwaXRhbEF0dHJpYnV0ZVJlZ2V4ID0gL1tBLVpdLztcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogbmFtZTogKHN0cmluZyB8IHVuZGVmaW5lZCksXG4gKiBzdHJ1Y3R1cmVkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZCksXG4gKiB3aWxkY2FyZDogKGJvb2xlYW4gfCB1bmRlZmluZWQpXG4gKiB9fVxuICovXG5sZXQgRGF0YVRyaWdnZXI7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiBpbmZvOiA/LFxuICogdHJpZ2dlcjogKCFEYXRhVHJpZ2dlciB8IHVuZGVmaW5lZCksXG4gKiBmbjogKCFGdW5jdGlvbiB8IHVuZGVmaW5lZClcbiAqIH19XG4gKi9cbmxldCBEYXRhRWZmZWN0OyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxubGV0IFByb3BlcnR5RWZmZWN0c1R5cGU7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCB0aGUgbW9kZWwgaGFzIGFuIG93bi1wcm9wZXJ0eSBtYXAgb2YgZWZmZWN0cyBmb3IgdGhlIGdpdmVuIHR5cGUuXG4gKiBUaGUgbW9kZWwgbWF5IGJlIGEgcHJvdG90eXBlIG9yIGFuIGluc3RhbmNlLlxuICpcbiAqIFByb3BlcnR5IGVmZmVjdHMgYXJlIHN0b3JlZCBhcyBhcnJheXMgb2YgZWZmZWN0cyBieSBwcm9wZXJ0eSBpbiBhIG1hcCxcbiAqIGJ5IG5hbWVkIHR5cGUgb24gdGhlIG1vZGVsLiBlLmcuXG4gKlxuICogICBfX2NvbXB1dGVFZmZlY3RzOiB7XG4gKiAgICAgZm9vOiBbIC4uLiBdLFxuICogICAgIGJhcjogWyAuLi4gXVxuICogICB9XG4gKlxuICogSWYgdGhlIG1vZGVsIGRvZXMgbm90IHlldCBoYXZlIGFuIGVmZmVjdCBtYXAgZm9yIHRoZSB0eXBlLCBvbmUgaXMgY3JlYXRlZFxuICogYW5kIHJldHVybmVkLiAgSWYgaXQgZG9lcywgYnV0IGl0IGlzIG5vdCBhbiBvd24gcHJvcGVydHkgKGkuZS4gdGhlXG4gKiBwcm90b3R5cGUgaGFkIGVmZmVjdHMpLCB0aGUgdGhlIG1hcCBpcyBkZWVwbHkgY2xvbmVkIGFuZCB0aGUgY29weSBpc1xuICogc2V0IG9uIHRoZSBtb2RlbCBhbmQgcmV0dXJuZWQsIHJlYWR5IGZvciBuZXcgZWZmZWN0cyB0byBiZSBhZGRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kZWwgUHJvdG90eXBlIG9yIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBQcm9wZXJ0eSBlZmZlY3QgdHlwZVxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgb3duLXByb3BlcnR5IG1hcCBvZiBlZmZlY3RzIGZvciB0aGUgZ2l2ZW4gdHlwZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5zdXJlT3duRWZmZWN0TWFwKG1vZGVsLCB0eXBlKSB7XG4gIGxldCBlZmZlY3RzID0gbW9kZWxbdHlwZV07XG4gIGlmICghZWZmZWN0cykge1xuICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IHt9O1xuICB9IGVsc2UgaWYgKCFtb2RlbC5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkge1xuICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IE9iamVjdC5jcmVhdGUobW9kZWxbdHlwZV0pO1xuICAgIGZvciAobGV0IHAgaW4gZWZmZWN0cykge1xuICAgICAgbGV0IHByb3RvRnggPSBlZmZlY3RzW3BdO1xuICAgICAgbGV0IGluc3RGeCA9IGVmZmVjdHNbcF0gPSBBcnJheShwcm90b0Z4Lmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpPTA7IGk8cHJvdG9GeC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnN0RnhbaV0gPSBwcm90b0Z4W2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZWZmZWN0cztcbn1cblxuLy8gLS0gZWZmZWN0cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogUnVucyBhbGwgZWZmZWN0cyBvZiBhIGdpdmVuIHR5cGUgZm9yIHRoZSBnaXZlbiBzZXQgb2YgcHJvcGVydHkgY2hhbmdlc1xuICogb24gYW4gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBUaGUgaW5zdGFuY2Ugd2l0aCBlZmZlY3RzIHRvIHJ1blxuICogQHBhcmFtIHtPYmplY3R9IGVmZmVjdHMgT2JqZWN0IG1hcCBvZiBwcm9wZXJ0eS10by1BcnJheSBvZiBlZmZlY3RzXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3Q9fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcGFyYW0geyo9fSBleHRyYUFyZ3MgQWRkaXRpb25hbCBtZXRhZGF0YSB0byBwYXNzIHRvIGVmZmVjdCBmdW5jdGlvblxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlZmZlY3QgcmFuIGZvciB0aGlzIHByb3BlcnR5XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5FZmZlY3RzKGluc3QsIGVmZmVjdHMsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMsIGV4dHJhQXJncykge1xuICBpZiAoZWZmZWN0cykge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICBsZXQgaWQgPSBkZWR1cGVJZCsrO1xuICAgIGZvciAobGV0IHByb3AgaW4gcHJvcHMpIHtcbiAgICAgIGlmIChydW5FZmZlY3RzRm9yUHJvcGVydHkoaW5zdCwgZWZmZWN0cywgaWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMsIGV4dHJhQXJncykpIHtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhbjtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUnVucyBhIGxpc3Qgb2YgZWZmZWN0cyBmb3IgYSBnaXZlbiBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB3aXRoIGVmZmVjdHMgdG8gcnVuXG4gKiBAcGFyYW0ge09iamVjdH0gZWZmZWN0cyBPYmplY3QgbWFwIG9mIHByb3BlcnR5LXRvLUFycmF5IG9mIGVmZmVjdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWR1cGVJZCBDb3VudGVyIHVzZWQgZm9yIGRlLWR1cGluZyBlZmZlY3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBOYW1lIG9mIGNoYW5nZWQgcHJvcGVydHlcbiAqIEBwYXJhbSB7Kn0gcHJvcHMgQ2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0geyp9IG9sZFByb3BzIE9sZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHBhcmFtIHsqPX0gZXh0cmFBcmdzIEFkZGl0aW9uYWwgbWV0YWRhdGEgdG8gcGFzcyB0byBlZmZlY3QgZnVuY3Rpb25cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWZmZWN0IHJhbiBmb3IgdGhpcyBwcm9wZXJ0eVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGVmZmVjdHMsIGRlZHVwZUlkLCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzLCBleHRyYUFyZ3MpIHtcbiAgbGV0IHJhbiA9IGZhbHNlO1xuICBsZXQgcm9vdFByb3BlcnR5ID0gaGFzUGF0aHMgPyByb290JDAocHJvcCkgOiBwcm9wO1xuICBsZXQgZnhzID0gZWZmZWN0c1tyb290UHJvcGVydHldO1xuICBpZiAoZnhzKSB7XG4gICAgZm9yIChsZXQgaT0wLCBsPWZ4cy5sZW5ndGgsIGZ4OyAoaTxsKSAmJiAoZng9ZnhzW2ldKTsgaSsrKSB7XG4gICAgICBpZiAoKCFmeC5pbmZvIHx8IGZ4LmluZm8ubGFzdFJ1biAhPT0gZGVkdXBlSWQpICYmXG4gICAgICAgICAgKCFoYXNQYXRocyB8fCBwYXRoTWF0Y2hlc1RyaWdnZXIocHJvcCwgZngudHJpZ2dlcikpKSB7XG4gICAgICAgIGlmIChmeC5pbmZvKSB7XG4gICAgICAgICAgZnguaW5mby5sYXN0UnVuID0gZGVkdXBlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnguZm4oaW5zdCwgcHJvcCwgcHJvcHMsIG9sZFByb3BzLCBmeC5pbmZvLCBoYXNQYXRocywgZXh0cmFBcmdzKTtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJhbjtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBwcm9wZXJ0eS9wYXRoIHRoYXQgaGFzIGNoYW5nZWQgbWF0Y2hlcyB0aGUgdHJpZ2dlclxuICogY3JpdGVyaWEgZm9yIGFuIGVmZmVjdC4gIEEgdHJpZ2dlciBpcyBhIGRlc2NyaXB0b3Igd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBzdHJ1Y3R1cmUsIHdoaWNoIG1hdGNoZXMgdGhlIGRlc2NyaXB0b3JzIHJldHVybmVkIGZyb20gYHBhcnNlQXJnYC5cbiAqIGUuZy4gZm9yIGBmb28uYmFyLipgOlxuICogYGBgXG4gKiB0cmlnZ2VyOiB7XG4gKiAgIG5hbWU6ICdhLmInLFxuICogICBzdHJ1Y3R1cmVkOiB0cnVlLFxuICogICB3aWxkY2FyZDogdHJ1ZVxuICogfVxuICogYGBgXG4gKiBJZiBubyB0cmlnZ2VyIGlzIGdpdmVuLCB0aGUgcGF0aCBpcyBkZWVtZWQgdG8gbWF0Y2guXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBvciBwcm9wZXJ0eSB0aGF0IGNoYW5nZWRcbiAqIEBwYXJhbSB7RGF0YVRyaWdnZXJ9IHRyaWdnZXIgRGVzY3JpcHRvclxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcGF0aCBtYXRjaGVkIHRoZSB0cmlnZ2VyXG4gKi9cbmZ1bmN0aW9uIHBhdGhNYXRjaGVzVHJpZ2dlcihwYXRoLCB0cmlnZ2VyKSB7XG4gIGlmICh0cmlnZ2VyKSB7XG4gICAgbGV0IHRyaWdnZXJQYXRoID0gdHJpZ2dlci5uYW1lO1xuICAgIHJldHVybiAodHJpZ2dlclBhdGggPT0gcGF0aCkgfHxcbiAgICAgICh0cmlnZ2VyLnN0cnVjdHVyZWQgJiYgaXNBbmNlc3Rvcih0cmlnZ2VyUGF0aCwgcGF0aCkpIHx8XG4gICAgICAodHJpZ2dlci53aWxkY2FyZCAmJiBpc0Rlc2NlbmRhbnQodHJpZ2dlclBhdGgsIHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwib2JzZXJ2ZXJcIiBlZmZlY3QuXG4gKlxuICogQ2FsbHMgdGhlIG1ldGhvZCB3aXRoIGBpbmZvLm1ldGhvZE5hbWVgIG9uIHRoZSBpbnN0YW5jZSwgcGFzc2luZyB0aGVcbiAqIG5ldyBhbmQgb2xkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5PYnNlcnZlckVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gIGxldCBmbiA9IHR5cGVvZiBpbmZvLm1ldGhvZCA9PT0gXCJzdHJpbmdcIiA/IGluc3RbaW5mby5tZXRob2RdIDogaW5mby5tZXRob2Q7XG4gIGxldCBjaGFuZ2VkUHJvcCA9IGluZm8ucHJvcGVydHk7XG4gIGlmIChmbikge1xuICAgIGZuLmNhbGwoaW5zdCwgaW5zdC5fX2RhdGFbY2hhbmdlZFByb3BdLCBvbGRQcm9wc1tjaGFuZ2VkUHJvcF0pO1xuICB9IGVsc2UgaWYgKCFpbmZvLmR5bmFtaWNGbikge1xuICAgIGNvbnNvbGUud2Fybignb2JzZXJ2ZXIgbWV0aG9kIGAnICsgaW5mby5tZXRob2QgKyAnYCBub3QgZGVmaW5lZCcpO1xuICB9XG59XG5cbi8qKlxuICogUnVucyBcIm5vdGlmeVwiIGVmZmVjdHMgZm9yIGEgc2V0IG9mIGNoYW5nZWQgcHJvcGVydGllcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gdGhlIGdlbmVyaWMgYHJ1bkVmZmVjdHNgIG1ldGhvZCBpbiB0aGF0IGl0XG4gKiB3aWxsIGRpc3BhdGNoIHBhdGggbm90aWZpY2F0aW9uIGV2ZW50cyBpbiB0aGUgY2FzZSB0aGF0IHRoZSBwcm9wZXJ0eVxuICogY2hhbmdlZCB3YXMgYSBwYXRoIGFuZCB0aGUgcm9vdCBwcm9wZXJ0eSBmb3IgdGhhdCBwYXRoIGRpZG4ndCBoYXZlIGFcbiAqIFwibm90aWZ5XCIgZWZmZWN0LiAgVGhpcyBpcyB0byBtYWludGFpbiAxLjAgYmVoYXZpb3IgdGhhdCBkaWQgbm90IHJlcXVpcmVcbiAqIGBub3RpZnk6IHRydWVgIHRvIGVuc3VyZSBvYmplY3Qgc3ViLXByb3BlcnR5IG5vdGlmaWNhdGlvbnMgd2VyZVxuICogc2VudC5cbiAqXG4gKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB3aXRoIGVmZmVjdHMgdG8gcnVuXG4gKiBAcGFyYW0ge09iamVjdH0gbm90aWZ5UHJvcHMgQmFnIG9mIHByb3BlcnRpZXMgdG8gbm90aWZ5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bk5vdGlmeUVmZmVjdHMoaW5zdCwgbm90aWZ5UHJvcHMsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpIHtcbiAgLy8gTm90aWZ5XG4gIGxldCBmeHMgPSBpbnN0W1RZUEVTLk5PVElGWV07XG4gIGxldCBub3RpZmllZDtcbiAgbGV0IGlkID0gZGVkdXBlSWQrKztcbiAgLy8gVHJ5IG5vcm1hbCBub3RpZnkgZWZmZWN0czsgaWYgbm9uZSwgZmFsbCBiYWNrIHRvIHRyeSBwYXRoIG5vdGlmaWNhdGlvblxuICBmb3IgKGxldCBwcm9wIGluIG5vdGlmeVByb3BzKSB7XG4gICAgaWYgKG5vdGlmeVByb3BzW3Byb3BdKSB7XG4gICAgICBpZiAoZnhzICYmIHJ1bkVmZmVjdHNGb3JQcm9wZXJ0eShpbnN0LCBmeHMsIGlkLCBwcm9wLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSkge1xuICAgICAgICBub3RpZmllZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGhhc1BhdGhzICYmIG5vdGlmeVBhdGgoaW5zdCwgcHJvcCwgcHJvcHMpKSB7XG4gICAgICAgIG5vdGlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRmx1c2ggaG9zdCBpZiB3ZSBhY3R1YWxseSBub3RpZmllZCBhbmQgaG9zdCB3YXMgYmF0Y2hpbmdcbiAgLy8gQW5kIHRoZSBob3N0IGhhcyBhbHJlYWR5IGluaXRpYWxpemVkIGNsaWVudHM7IHRoaXMgcHJldmVudHNcbiAgLy8gYW4gaXNzdWUgd2l0aCBhIGhvc3Qgb2JzZXJ2aW5nIGRhdGEgY2hhbmdlcyBiZWZvcmUgY2xpZW50cyBhcmUgcmVhZHkuXG4gIGxldCBob3N0O1xuICBpZiAobm90aWZpZWQgJiYgKGhvc3QgPSBpbnN0Ll9fZGF0YUhvc3QpICYmIGhvc3QuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKSB7XG4gICAgaG9zdC5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoZXMge3Byb3BlcnR5fS1jaGFuZ2VkIGV2ZW50cyB3aXRoIHBhdGggaW5mb3JtYXRpb24gaW4gdGhlIGRldGFpbFxuICogb2JqZWN0IHRvIGluZGljYXRlIGEgc3ViLXBhdGggb2YgdGhlIHByb3BlcnR5IHdhcyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGVsZW1lbnQgZnJvbSB3aGljaCB0byBmaXJlIHRoZSBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdGhhdCB3YXMgY2hhbmdlZFxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcGF0aCB3YXMgbm90aWZpZWRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeVBhdGgoaW5zdCwgcGF0aCwgcHJvcHMpIHtcbiAgbGV0IHJvb3RQcm9wZXJ0eSA9IHJvb3QkMChwYXRoKTtcbiAgaWYgKHJvb3RQcm9wZXJ0eSAhPT0gcGF0aCkge1xuICAgIGxldCBldmVudE5hbWUgPSBjYW1lbFRvRGFzaENhc2UkMChyb290UHJvcGVydHkpICsgJy1jaGFuZ2VkJztcbiAgICBkaXNwYXRjaE5vdGlmeUV2ZW50KGluc3QsIGV2ZW50TmFtZSwgcHJvcHNbcGF0aF0sIHBhdGgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaGVzIHtwcm9wZXJ0eX0tY2hhbmdlZCBldmVudHMgdG8gaW5kaWNhdGUgYSBwcm9wZXJ0eSAob3IgcGF0aClcbiAqIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBUaGUgZWxlbWVudCBmcm9tIHdoaWNoIHRvIGZpcmUgdGhlIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBzZW5kICgne3Byb3BlcnR5fS1jaGFuZ2VkJylcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBjaGFuZ2VkIHByb3BlcnR5XG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IHBhdGggSWYgYSBzdWItcGF0aCBvZiB0aGlzIHByb3BlcnR5IGNoYW5nZWQsIHRoZSBwYXRoXG4gKiAgIHRoYXQgY2hhbmdlZCAob3B0aW9uYWwpLlxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2hOb3RpZnlFdmVudChpbnN0LCBldmVudE5hbWUsIHZhbHVlLCBwYXRoKSB7XG4gIGxldCBkZXRhaWwgPSB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIHF1ZXVlUHJvcGVydHk6IHRydWVcbiAgfTtcbiAgaWYgKHBhdGgpIHtcbiAgICBkZXRhaWwucGF0aCA9IHBhdGg7XG4gIH1cbiAgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKGluc3QpLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgeyBkZXRhaWwgfSkpO1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwibm90aWZ5XCIgZWZmZWN0LlxuICpcbiAqIERpc3BhdGNoZXMgYSBub24tYnViYmxpbmcgZXZlbnQgbmFtZWQgYGluZm8uZXZlbnROYW1lYCBvbiB0aGUgaW5zdGFuY2VcbiAqIHdpdGggYSBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5ldyBgdmFsdWVgLlxuICpcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bk5vdGlmeUVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvLCBoYXNQYXRocykge1xuICBsZXQgcm9vdFByb3BlcnR5ID0gaGFzUGF0aHMgPyByb290JDAocHJvcGVydHkpIDogcHJvcGVydHk7XG4gIGxldCBwYXRoID0gcm9vdFByb3BlcnR5ICE9IHByb3BlcnR5ID8gcHJvcGVydHkgOiBudWxsO1xuICBsZXQgdmFsdWUgPSBwYXRoID8gZ2V0JDAoaW5zdCwgcGF0aCkgOiBpbnN0Ll9fZGF0YVtwcm9wZXJ0eV07XG4gIGlmIChwYXRoICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IHByb3BzW3Byb3BlcnR5XTsgIC8vIHNwZWNpZmljYWxseSBmb3IgLnNwbGljZXNcbiAgfVxuICBkaXNwYXRjaE5vdGlmeUV2ZW50KGluc3QsIGluZm8uZXZlbnROYW1lLCB2YWx1ZSwgcGF0aCk7XG59XG5cbi8qKlxuICogSGFuZGxlciBmdW5jdGlvbiBmb3IgMi13YXkgbm90aWZpY2F0aW9uIGV2ZW50cy4gUmVjZWl2ZXMgY29udGV4dFxuICogaW5mb3JtYXRpb24gY2FwdHVyZWQgaW4gdGhlIGBhZGROb3RpZnlMaXN0ZW5lcmAgY2xvc3VyZSBmcm9tIHRoZVxuICogYF9fbm90aWZ5TGlzdGVuZXJzYCBtZXRhZGF0YS5cbiAqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgbm90aWZpZWQgcHJvcGVydHkgdG8gdGhlIGhvc3QgcHJvcGVydHkgb3IgcGF0aC4gIElmXG4gKiB0aGUgZXZlbnQgY29udGFpbmVkIHBhdGggaW5mb3JtYXRpb24sIHRyYW5zbGF0ZSB0aGF0IHBhdGggdG8gdGhlIGhvc3RcbiAqIHNjb3BlJ3MgbmFtZSBmb3IgdGhhdCBwYXRoIGZpcnN0LlxuICpcbiAqIEBwYXJhbSB7Q3VzdG9tRXZlbnR9IGV2ZW50IE5vdGlmaWNhdGlvbiBldmVudCAoZS5nLiAnPHByb3BlcnR5Pi1jaGFuZ2VkJylcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSG9zdCBlbGVtZW50IGluc3RhbmNlIGhhbmRsaW5nIHRoZSBub3RpZmljYXRpb24gZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBmcm9tUHJvcCBDaGlsZCBlbGVtZW50IHByb3BlcnR5IHRoYXQgd2FzIGJvdW5kXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9QYXRoIEhvc3QgcHJvcGVydHkvcGF0aCB0aGF0IHdhcyBib3VuZFxuICogQHBhcmFtIHtib29sZWFufSBuZWdhdGUgV2hldGhlciB0aGUgYmluZGluZyB3YXMgbmVnYXRlZFxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZU5vdGlmaWNhdGlvbihldmVudCwgaW5zdCwgZnJvbVByb3AsIHRvUGF0aCwgbmVnYXRlKSB7XG4gIGxldCB2YWx1ZTtcbiAgbGV0IGRldGFpbCA9IC8qKiBAdHlwZSB7T2JqZWN0fSAqLyhldmVudC5kZXRhaWwpO1xuICBsZXQgZnJvbVBhdGggPSBkZXRhaWwgJiYgZGV0YWlsLnBhdGg7XG4gIGlmIChmcm9tUGF0aCkge1xuICAgIHRvUGF0aCA9IHRyYW5zbGF0ZShmcm9tUHJvcCwgdG9QYXRoLCBmcm9tUGF0aCk7XG4gICAgdmFsdWUgPSBkZXRhaWwgJiYgZGV0YWlsLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZXZlbnQudGFyZ2V0W2Zyb21Qcm9wXTtcbiAgfVxuICB2YWx1ZSA9IG5lZ2F0ZSA/ICF2YWx1ZSA6IHZhbHVlO1xuICBpZiAoIWluc3RbVFlQRVMuUkVBRF9PTkxZXSB8fCAhaW5zdFtUWVBFUy5SRUFEX09OTFldW3RvUGF0aF0pIHtcbiAgICBpZiAoaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHRvUGF0aCwgdmFsdWUsIHRydWUsIEJvb2xlYW4oZnJvbVBhdGgpKVxuICAgICAgJiYgKCFkZXRhaWwgfHwgIWRldGFpbC5xdWV1ZVByb3BlcnR5KSkge1xuICAgICAgaW5zdC5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcInJlZmxlY3RcIiBlZmZlY3QuXG4gKlxuICogU2V0cyB0aGUgYXR0cmlidXRlIG5hbWVkIGBpbmZvLmF0dHJOYW1lYCB0byB0aGUgZ2l2ZW4gcHJvcGVydHkgdmFsdWUuXG4gKlxuICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuUmVmbGVjdEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gIGxldCB2YWx1ZSA9IGluc3QuX19kYXRhW3Byb3BlcnR5XTtcbiAgaWYgKHNhbml0aXplRE9NVmFsdWUpIHtcbiAgICB2YWx1ZSA9IHNhbml0aXplRE9NVmFsdWUodmFsdWUsIGluZm8uYXR0ck5hbWUsICdhdHRyaWJ1dGUnLCAvKiogQHR5cGUge05vZGV9ICovKGluc3QpKTtcbiAgfVxuICBpbnN0Ll9wcm9wZXJ0eVRvQXR0cmlidXRlKHByb3BlcnR5LCBpbmZvLmF0dHJOYW1lLCB2YWx1ZSk7XG59XG5cbi8qKlxuICogUnVucyBcImNvbXB1dGVkXCIgZWZmZWN0cyBmb3IgYSBzZXQgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSB0aGUgZ2VuZXJpYyBgcnVuRWZmZWN0c2AgbWV0aG9kIGluIHRoYXQgaXRcbiAqIGNvbnRpbnVlcyB0byBydW4gY29tcHV0ZWQgZWZmZWN0cyBiYXNlZCBvbiB0aGUgb3V0cHV0IG9mIGVhY2ggcGFzcyB1bnRpbFxuICogdGhlcmUgYXJlIG5vIG1vcmUgbmV3bHkgY29tcHV0ZWQgcHJvcGVydGllcy4gIFRoaXMgZW5zdXJlcyB0aGF0IGFsbFxuICogcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgY29tcHV0ZWQgYnkgdGhlIGluaXRpYWwgc2V0IG9mIGNoYW5nZXMgYXJlXG4gKiBjb21wdXRlZCBiZWZvcmUgb3RoZXIgZWZmZWN0cyAoYmluZGluZyBwcm9wYWdhdGlvbiwgb2JzZXJ2ZXJzLCBhbmQgbm90aWZ5KVxuICogcnVuLlxuICpcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7IU9iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7IU9iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuQ29tcHV0ZWRFZmZlY3RzKGluc3QsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gIGxldCBjb21wdXRlRWZmZWN0cyA9IGluc3RbVFlQRVMuQ09NUFVURV07XG4gIGlmIChjb21wdXRlRWZmZWN0cykge1xuICAgIGxldCBpbnB1dFByb3BzID0gY2hhbmdlZFByb3BzO1xuICAgIHdoaWxlIChydW5FZmZlY3RzKGluc3QsIGNvbXB1dGVFZmZlY3RzLCBpbnB1dFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKG9sZFByb3BzLCBpbnN0Ll9fZGF0YU9sZCk7XG4gICAgICBPYmplY3QuYXNzaWduKGNoYW5nZWRQcm9wcywgaW5zdC5fX2RhdGFQZW5kaW5nKTtcbiAgICAgIGlucHV0UHJvcHMgPSBpbnN0Ll9fZGF0YVBlbmRpbmc7XG4gICAgICBpbnN0Ll9fZGF0YVBlbmRpbmcgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiY29tcHV0ZWQgcHJvcGVydHlcIiBlZmZlY3QgYnkgcnVubmluZyB0aGUgbWV0aG9kIHdpdGggdGhlXG4gKiB2YWx1ZXMgb2YgdGhlIGFyZ3VtZW50cyBzcGVjaWZpZWQgaW4gdGhlIGBpbmZvYCBvYmplY3QgYW5kIHNldHRpbmcgdGhlXG4gKiByZXR1cm4gdmFsdWUgdG8gdGhlIGNvbXB1dGVkIHByb3BlcnR5IHNwZWNpZmllZC5cbiAqXG4gKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSB0aGUgZWZmZWN0IHdpbGwgYmUgcnVuIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5Db21wdXRlZEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gIGxldCByZXN1bHQgPSBydW5NZXRob2RFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbyk7XG4gIGxldCBjb21wdXRlZFByb3AgPSBpbmZvLm1ldGhvZEluZm87XG4gIGlmIChpbnN0Ll9fZGF0YUhhc0FjY2Vzc29yICYmIGluc3QuX19kYXRhSGFzQWNjZXNzb3JbY29tcHV0ZWRQcm9wXSkge1xuICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eShjb21wdXRlZFByb3AsIHJlc3VsdCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaW5zdFtjb21wdXRlZFByb3BdID0gcmVzdWx0O1xuICB9XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgcGF0aCBjaGFuZ2VzIGJhc2VkIG9uIHBhdGggbGlua3Mgc2V0IHVwIHVzaW5nIHRoZSBgbGlua1BhdGhzYFxuICogQVBJLlxuICpcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHdob3NlIHByb3BzIGFyZSBjaGFuZ2luZ1xuICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8KHN0cmluZ3xudW1iZXIpPn0gcGF0aCBQYXRoIHRoYXQgaGFzIGNoYW5nZWRcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb2YgY2hhbmdlZCBwYXRoXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUxpbmtlZFBhdGhzKGluc3QsIHBhdGgsIHZhbHVlKSB7XG4gIGxldCBsaW5rcyA9IGluc3QuX19kYXRhTGlua2VkUGF0aHM7XG4gIGlmIChsaW5rcykge1xuICAgIGxldCBsaW5rO1xuICAgIGZvciAobGV0IGEgaW4gbGlua3MpIHtcbiAgICAgIGxldCBiID0gbGlua3NbYV07XG4gICAgICBpZiAoaXNEZXNjZW5kYW50KGEsIHBhdGgpKSB7XG4gICAgICAgIGxpbmsgPSB0cmFuc2xhdGUoYSwgYiwgcGF0aCk7XG4gICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChsaW5rLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVzY2VuZGFudChiLCBwYXRoKSkge1xuICAgICAgICBsaW5rID0gdHJhbnNsYXRlKGIsIGEsIHBhdGgpO1xuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgobGluaywgdmFsdWUsIHRydWUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyAtLSBiaW5kaW5ncyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQWRkcyBiaW5kaW5nIG1ldGFkYXRhIHRvIHRoZSBjdXJyZW50IGBub2RlSW5mb2AsIGFuZCBiaW5kaW5nIGVmZmVjdHNcbiAqIGZvciBhbGwgcGFydCBkZXBlbmRlbmNpZXMgdG8gYHRlbXBsYXRlSW5mb2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ2xhc3MgdGhhdCBgX3BhcnNlVGVtcGxhdGVgIGlzIGN1cnJlbnRseVxuICogICBydW5uaW5nIG9uXG4gKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBraW5kIEJpbmRpbmcga2luZCwgZWl0aGVyICdwcm9wZXJ0eScsICdhdHRyaWJ1dGUnLCBvciAndGV4dCdcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgVGFyZ2V0IHByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB7IUFycmF5PCFCaW5kaW5nUGFydD59IHBhcnRzIEFycmF5IG9mIGJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHBhcmFtIHtzdHJpbmc9fSBsaXRlcmFsIExpdGVyYWwgdGV4dCBzdXJyb3VuZGluZyBiaW5kaW5nIHBhcnRzIChzcGVjaWZpZWRcbiAqICAgb25seSBmb3IgJ3Byb3BlcnR5JyBiaW5kaW5ncywgc2luY2UgdGhlc2UgbXVzdCBiZSBpbml0aWFsaXplZCBhcyBwYXJ0XG4gKiAgIG9mIGJvb3QtdXApXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkQmluZGluZyhjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywga2luZCwgdGFyZ2V0LCBwYXJ0cywgbGl0ZXJhbCkge1xuICAvLyBDcmVhdGUgYmluZGluZyBtZXRhZGF0YSBhbmQgYWRkIHRvIG5vZGVJbmZvXG4gIG5vZGVJbmZvLmJpbmRpbmdzID0gbm9kZUluZm8uYmluZGluZ3MgfHwgW107XG4gIGxldCAvKiogQmluZGluZyAqLyBiaW5kaW5nID0geyBraW5kLCB0YXJnZXQsIHBhcnRzLCBsaXRlcmFsLCBpc0NvbXBvdW5kOiAocGFydHMubGVuZ3RoICE9PSAxKSB9O1xuICBub2RlSW5mby5iaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAvLyBBZGQgbGlzdGVuZXIgaW5mbyB0byBiaW5kaW5nIG1ldGFkYXRhXG4gIGlmIChzaG91bGRBZGRMaXN0ZW5lcihiaW5kaW5nKSkge1xuICAgIGxldCB7ZXZlbnQsIG5lZ2F0ZX0gPSBiaW5kaW5nLnBhcnRzWzBdO1xuICAgIGJpbmRpbmcubGlzdGVuZXJFdmVudCA9IGV2ZW50IHx8IChDYXNlTWFwLmNhbWVsVG9EYXNoQ2FzZSh0YXJnZXQpICsgJy1jaGFuZ2VkJyk7XG4gICAgYmluZGluZy5saXN0ZW5lck5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgfVxuICAvLyBBZGQgXCJwcm9wYWdhdGVcIiBwcm9wZXJ0eSBlZmZlY3RzIHRvIHRlbXBsYXRlSW5mb1xuICBsZXQgaW5kZXggPSB0ZW1wbGF0ZUluZm8ubm9kZUluZm9MaXN0Lmxlbmd0aDtcbiAgZm9yIChsZXQgaT0wOyBpPGJpbmRpbmcucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcGFydCA9IGJpbmRpbmcucGFydHNbaV07XG4gICAgcGFydC5jb21wb3VuZEluZGV4ID0gaTtcbiAgICBhZGRFZmZlY3RGb3JCaW5kaW5nUGFydChjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBiaW5kaW5nLCBwYXJ0LCBpbmRleCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIHByb3BlcnR5IGVmZmVjdHMgdG8gdGhlIGdpdmVuIGB0ZW1wbGF0ZUluZm9gIGZvciB0aGUgZ2l2ZW4gYmluZGluZ1xuICogcGFydC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBDbGFzcyB0aGF0IGBfcGFyc2VUZW1wbGF0ZWAgaXMgY3VycmVudGx5XG4gKiAgIHJ1bm5pbmcgb25cbiAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAqIEBwYXJhbSB7IUJpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHBhcmFtIHshQmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggaW50byBgbm9kZUluZm9MaXN0YCBmb3IgdGhpcyBub2RlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBhZGRFZmZlY3RGb3JCaW5kaW5nUGFydChjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBiaW5kaW5nLCBwYXJ0LCBpbmRleCkge1xuICBpZiAoIXBhcnQubGl0ZXJhbCkge1xuICAgIGlmIChiaW5kaW5nLmtpbmQgPT09ICdhdHRyaWJ1dGUnICYmIGJpbmRpbmcudGFyZ2V0WzBdID09PSAnLScpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IHNldCBhdHRyaWJ1dGUgJyArIGJpbmRpbmcudGFyZ2V0ICtcbiAgICAgICAgJyBiZWNhdXNlIFwiLVwiIGlzIG5vdCBhIHZhbGlkIGF0dHJpYnV0ZSBzdGFydGluZyBjaGFyYWN0ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRlcGVuZGVuY2llcyA9IHBhcnQuZGVwZW5kZW5jaWVzO1xuICAgICAgbGV0IGluZm8gPSB7IGluZGV4LCBiaW5kaW5nLCBwYXJ0LCBldmFsdWF0b3I6IGNvbnN0cnVjdG9yIH07XG4gICAgICBmb3IgKGxldCBqPTA7IGo8ZGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCB0cmlnZ2VyID0gZGVwZW5kZW5jaWVzW2pdO1xuICAgICAgICBpZiAodHlwZW9mIHRyaWdnZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0cmlnZ2VyID0gcGFyc2VBcmcodHJpZ2dlcik7XG4gICAgICAgICAgdHJpZ2dlci53aWxkY2FyZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IuX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QodGVtcGxhdGVJbmZvLCB0cmlnZ2VyLnJvb3RQcm9wZXJ0eSwge1xuICAgICAgICAgIGZuOiBydW5CaW5kaW5nRWZmZWN0LFxuICAgICAgICAgIGluZm8sIHRyaWdnZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJiaW5kaW5nXCIgKHByb3BlcnR5L3BhdGggYmluZGluZykgZWZmZWN0LlxuICpcbiAqIE5vdGUgdGhhdCBiaW5kaW5nIHN5bnRheCBpcyBvdmVycmlkYWJsZSB2aWEgYF9wYXJzZUJpbmRpbmdzYCBhbmRcbiAqIGBfZXZhbHVhdGVCaW5kaW5nYC4gIFRoaXMgbWV0aG9kIHdpbGwgY2FsbCBgX2V2YWx1YXRlQmluZGluZ2AgZm9yIGFueVxuICogbm9uLWxpdGVyYWwgcGFydHMgcmV0dXJuZWQgZnJvbSBgX3BhcnNlQmluZGluZ3NgLiAgSG93ZXZlcixcbiAqIHRoZXJlIGlzIG5vIHN1cHBvcnQgZm9yIF9wYXRoXyBiaW5kaW5ncyB2aWEgY3VzdG9tIGJpbmRpbmcgcGFydHMsXG4gKiBhcyB0aGlzIGlzIHNwZWNpZmljIHRvIFBvbHltZXIncyBwYXRoIGJpbmRpbmcgc3ludGF4LlxuICpcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcGFyYW0ge0FycmF5fSBub2RlTGlzdCBMaXN0IG9mIG5vZGVzIGFzc29jaWF0ZWQgd2l0aCBgbm9kZUluZm9MaXN0YCB0ZW1wbGF0ZVxuICogICBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bkJpbmRpbmdFZmZlY3QoaW5zdCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBpbmZvLCBoYXNQYXRocywgbm9kZUxpc3QpIHtcbiAgbGV0IG5vZGUgPSBub2RlTGlzdFtpbmZvLmluZGV4XTtcbiAgbGV0IGJpbmRpbmcgPSBpbmZvLmJpbmRpbmc7XG4gIGxldCBwYXJ0ID0gaW5mby5wYXJ0O1xuICAvLyBTdWJwYXRoIG5vdGlmaWNhdGlvbjogdHJhbnNmb3JtIHBhdGggYW5kIHNldCB0byBjbGllbnRcbiAgLy8gZS5nLjogZm9vPVwie3tvYmouc3VifX1cIiwgcGF0aDogJ29iai5zdWIucHJvcCcsIHNldCAnZm9vLnByb3AnPW9iai5zdWIucHJvcFxuICBpZiAoaGFzUGF0aHMgJiYgcGFydC5zb3VyY2UgJiYgKHBhdGgubGVuZ3RoID4gcGFydC5zb3VyY2UubGVuZ3RoKSAmJlxuICAgICAgKGJpbmRpbmcua2luZCA9PSAncHJvcGVydHknKSAmJiAhYmluZGluZy5pc0NvbXBvdW5kICYmXG4gICAgICBub2RlLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgJiZcbiAgICAgIG5vZGUuX19kYXRhSGFzQWNjZXNzb3IgJiYgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvcltiaW5kaW5nLnRhcmdldF0pIHtcbiAgICBsZXQgdmFsdWUgPSBwcm9wc1twYXRoXTtcbiAgICBwYXRoID0gdHJhbnNsYXRlKHBhcnQuc291cmNlLCBiaW5kaW5nLnRhcmdldCwgcGF0aCk7XG4gICAgaWYgKG5vZGUuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwYXRoLCB2YWx1ZSwgZmFsc2UsIHRydWUpKSB7XG4gICAgICBpbnN0Ll9lbnF1ZXVlQ2xpZW50KG5vZGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgdmFsdWUgPSBpbmZvLmV2YWx1YXRvci5fZXZhbHVhdGVCaW5kaW5nKGluc3QsIHBhcnQsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgIC8vIFByb3BhZ2F0ZSB2YWx1ZSB0byBjaGlsZFxuICAgIGFwcGx5QmluZGluZ1ZhbHVlKGluc3QsIG5vZGUsIGJpbmRpbmcsIHBhcnQsIHZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGZvciBhbiBcImJpbmRpbmdcIiAoYmluZGluZykgZWZmZWN0IHRvIGEgbm9kZSxcbiAqIGVpdGhlciBhcyBhIHByb3BlcnR5IG9yIGF0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IFRoZSBpbnN0YW5jZSBvd25pbmcgdGhlIGJpbmRpbmcgZWZmZWN0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGFyZ2V0IG5vZGUgZm9yIGJpbmRpbmdcbiAqIEBwYXJhbSB7IUJpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHBhcmFtIHshQmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFwcGx5QmluZGluZ1ZhbHVlKGluc3QsIG5vZGUsIGJpbmRpbmcsIHBhcnQsIHZhbHVlKSB7XG4gIHZhbHVlID0gY29tcHV0ZUJpbmRpbmdWYWx1ZShub2RlLCB2YWx1ZSwgYmluZGluZywgcGFydCk7XG4gIGlmIChzYW5pdGl6ZURPTVZhbHVlKSB7XG4gICAgdmFsdWUgPSBzYW5pdGl6ZURPTVZhbHVlKHZhbHVlLCBiaW5kaW5nLnRhcmdldCwgYmluZGluZy5raW5kLCBub2RlKTtcbiAgfVxuICBpZiAoYmluZGluZy5raW5kID09ICdhdHRyaWJ1dGUnKSB7XG4gICAgLy8gQXR0cmlidXRlIGJpbmRpbmdcbiAgICBpbnN0Ll92YWx1ZVRvTm9kZUF0dHJpYnV0ZSgvKiogQHR5cGUge0VsZW1lbnR9ICovKG5vZGUpLCB2YWx1ZSwgYmluZGluZy50YXJnZXQpO1xuICB9IGVsc2Uge1xuICAgIC8vIFByb3BlcnR5IGJpbmRpbmdcbiAgICBsZXQgcHJvcCA9IGJpbmRpbmcudGFyZ2V0O1xuICAgIGlmIChub2RlLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgJiZcbiAgICAgICAgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvciAmJiBub2RlLl9fZGF0YUhhc0FjY2Vzc29yW3Byb3BdKSB7XG4gICAgICBpZiAoIW5vZGVbVFlQRVMuUkVBRF9PTkxZXSB8fCAhbm9kZVtUWVBFUy5SRUFEX09OTFldW3Byb3BdKSB7XG4gICAgICAgIGlmIChub2RlLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcCwgdmFsdWUpKSB7XG4gICAgICAgICAgaW5zdC5fZW5xdWV1ZUNsaWVudChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSAge1xuICAgICAgaW5zdC5fc2V0VW5tYW5hZ2VkUHJvcGVydHlUb05vZGUobm9kZSwgcHJvcCwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgYW4gXCJiaW5kaW5nXCIgZWZmZWN0IHZhbHVlIGJhc2VkIG9uIGNvbXBvdW5kICYgbmVnYXRpb25cbiAqIGVmZmVjdCBtZXRhZGF0YSwgYXMgd2VsbCBhcyBoYW5kbGluZyBmb3Igc3BlY2lhbC1jYXNlIHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0aGUgdmFsdWUgd2lsbCBiZSBzZXQgdG9cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHJldHVybiB7Kn0gVHJhbnNmb3JtZWQgdmFsdWUgdG8gc2V0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjb21wdXRlQmluZGluZ1ZhbHVlKG5vZGUsIHZhbHVlLCBiaW5kaW5nLCBwYXJ0KSB7XG4gIGlmIChiaW5kaW5nLmlzQ29tcG91bmQpIHtcbiAgICBsZXQgc3RvcmFnZSA9IG5vZGUuX19kYXRhQ29tcG91bmRTdG9yYWdlW2JpbmRpbmcudGFyZ2V0XTtcbiAgICBzdG9yYWdlW3BhcnQuY29tcG91bmRJbmRleF0gPSB2YWx1ZTtcbiAgICB2YWx1ZSA9IHN0b3JhZ2Uuam9pbignJyk7XG4gIH1cbiAgaWYgKGJpbmRpbmcua2luZCAhPT0gJ2F0dHJpYnV0ZScpIHtcbiAgICAvLyBTb21lIGJyb3dzZXJzIHNlcmlhbGl6ZSBgdW5kZWZpbmVkYCB0byBgXCJ1bmRlZmluZWRcImBcbiAgICBpZiAoYmluZGluZy50YXJnZXQgPT09ICd0ZXh0Q29udGVudCcgfHxcbiAgICAgICAgKGJpbmRpbmcudGFyZ2V0ID09PSAndmFsdWUnICYmXG4gICAgICAgICAgKG5vZGUubG9jYWxOYW1lID09PSAnaW5wdXQnIHx8IG5vZGUubG9jYWxOYW1lID09PSAndGV4dGFyZWEnKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgPT0gdW5kZWZpbmVkID8gJycgOiB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGJpbmRpbmcncyBtZXRhZGF0YSBtZWV0cyBhbGwgdGhlIHJlcXVpcmVtZW50cyB0byBhbGxvd1xuICogMi13YXkgYmluZGluZywgYW5kIHRoZXJlZm9yZSBhIGA8cHJvcGVydHk+LWNoYW5nZWRgIGV2ZW50IGxpc3RlbmVyIHNob3VsZCBiZVxuICogYWRkZWQ6XG4gKiAtIHVzZWQgY3VybHkgYnJhY2VzXG4gKiAtIGlzIGEgcHJvcGVydHkgKG5vdCBhdHRyaWJ1dGUpIGJpbmRpbmdcbiAqIC0gaXMgbm90IGEgdGV4dENvbnRlbnQgYmluZGluZ1xuICogLSBpcyBub3QgY29tcG91bmRcbiAqXG4gKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgMi13YXkgbGlzdGVuZXIgc2hvdWxkIGJlIGFkZGVkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzaG91bGRBZGRMaXN0ZW5lcihiaW5kaW5nKSB7XG4gIHJldHVybiBCb29sZWFuKGJpbmRpbmcudGFyZ2V0KSAmJlxuICAgICAgICAgYmluZGluZy5raW5kICE9ICdhdHRyaWJ1dGUnICYmXG4gICAgICAgICBiaW5kaW5nLmtpbmQgIT0gJ3RleHQnICYmXG4gICAgICAgICAhYmluZGluZy5pc0NvbXBvdW5kICYmXG4gICAgICAgICBiaW5kaW5nLnBhcnRzWzBdLm1vZGUgPT09ICd7Jztcbn1cblxuLyoqXG4gKiBTZXR1cCBjb21wb3VuZCBiaW5kaW5nIHN0b3JhZ2Ugc3RydWN0dXJlcywgbm90aWZ5IGxpc3RlbmVycywgYW5kIGRhdGFIb3N0XG4gKiByZWZlcmVuY2VzIG9udG8gdGhlIGJvdW5kIG5vZGVMaXN0LlxuICpcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSW5zdGFuY2UgdGhhdCBiYXMgYmVlbiBwcmV2aW91c2x5IGJvdW5kXG4gKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBCaW5kaW5ncyhpbnN0LCB0ZW1wbGF0ZUluZm8pIHtcbiAgLy8gU2V0dXAgY29tcG91bmQgc3RvcmFnZSwgZGF0YUhvc3QsIGFuZCBub3RpZnkgbGlzdGVuZXJzXG4gIGxldCB7bm9kZUxpc3QsIG5vZGVJbmZvTGlzdH0gPSB0ZW1wbGF0ZUluZm87XG4gIGlmIChub2RlSW5mb0xpc3QubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUluZm9MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgaW5mbyA9IG5vZGVJbmZvTGlzdFtpXTtcbiAgICAgIGxldCBub2RlID0gbm9kZUxpc3RbaV07XG4gICAgICBsZXQgYmluZGluZ3MgPSBpbmZvLmJpbmRpbmdzO1xuICAgICAgaWYgKGJpbmRpbmdzKSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgICAgICAgc2V0dXBDb21wb3VuZFN0b3JhZ2Uobm9kZSwgYmluZGluZyk7XG4gICAgICAgICAgYWRkTm90aWZ5TGlzdGVuZXIobm9kZSwgaW5zdCwgYmluZGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUuX19kYXRhSG9zdCA9IGluc3Q7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYF9fZGF0YUNvbXBvdW5kU3RvcmFnZWAgbG9jYWwgc3RvcmFnZSBvbiBhIGJvdW5kIG5vZGUgd2l0aFxuICogaW5pdGlhbCBsaXRlcmFsIGRhdGEgZm9yIGNvbXBvdW5kIGJpbmRpbmdzLCBhbmQgc2V0cyB0aGUgam9pbmVkXG4gKiBsaXRlcmFsIHBhcnRzIHRvIHRoZSBib3VuZCBwcm9wZXJ0eS5cbiAqXG4gKiBXaGVuIGNoYW5nZXMgdG8gY29tcG91bmQgcGFydHMgb2NjdXIsIHRoZXkgYXJlIGZpcnN0IHNldCBpbnRvIHRoZSBjb21wb3VuZFxuICogc3RvcmFnZSBhcnJheSBmb3IgdGhhdCBwcm9wZXJ0eSwgYW5kIHRoZW4gdGhlIGFycmF5IGlzIGpvaW5lZCB0byByZXN1bHQgaW5cbiAqIHRoZSBmaW5hbCB2YWx1ZSBzZXQgdG8gdGhlIHByb3BlcnR5L2F0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgQm91bmQgbm9kZSB0byBpbml0aWFsaXplXG4gKiBAcGFyYW0ge0JpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwQ29tcG91bmRTdG9yYWdlKG5vZGUsIGJpbmRpbmcpIHtcbiAgaWYgKGJpbmRpbmcuaXNDb21wb3VuZCkge1xuICAgIC8vIENyZWF0ZSBjb21wb3VuZCBzdG9yYWdlIG1hcFxuICAgIGxldCBzdG9yYWdlID0gbm9kZS5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgfHxcbiAgICAgIChub2RlLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSA9IHt9KTtcbiAgICBsZXQgcGFydHMgPSBiaW5kaW5nLnBhcnRzO1xuICAgIC8vIENvcHkgbGl0ZXJhbHMgZnJvbSBwYXJ0cyBpbnRvIHN0b3JhZ2UgZm9yIHRoaXMgYmluZGluZ1xuICAgIGxldCBsaXRlcmFscyA9IG5ldyBBcnJheShwYXJ0cy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGo9MDsgajxwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgbGl0ZXJhbHNbal0gPSBwYXJ0c1tqXS5saXRlcmFsO1xuICAgIH1cbiAgICBsZXQgdGFyZ2V0ID0gYmluZGluZy50YXJnZXQ7XG4gICAgc3RvcmFnZVt0YXJnZXRdID0gbGl0ZXJhbHM7XG4gICAgLy8gQ29uZmlndXJlIHByb3BlcnRpZXMgd2l0aCB0aGVpciBsaXRlcmFsIHBhcnRzXG4gICAgaWYgKGJpbmRpbmcubGl0ZXJhbCAmJiBiaW5kaW5nLmtpbmQgPT0gJ3Byb3BlcnR5Jykge1xuICAgICAgbm9kZVt0YXJnZXRdID0gYmluZGluZy5saXRlcmFsO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYSAyLXdheSBiaW5kaW5nIG5vdGlmaWNhdGlvbiBldmVudCBsaXN0ZW5lciB0byB0aGUgbm9kZSBzcGVjaWZpZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBDaGlsZCBlbGVtZW50IHRvIGFkZCBsaXN0ZW5lciB0b1xuICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBIb3N0IGVsZW1lbnQgaW5zdGFuY2UgdG8gaGFuZGxlIG5vdGlmaWNhdGlvbiBldmVudFxuICogQHBhcmFtIHtCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGROb3RpZnlMaXN0ZW5lcihub2RlLCBpbnN0LCBiaW5kaW5nKSB7XG4gIGlmIChiaW5kaW5nLmxpc3RlbmVyRXZlbnQpIHtcbiAgICBsZXQgcGFydCA9IGJpbmRpbmcucGFydHNbMF07XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGJpbmRpbmcubGlzdGVuZXJFdmVudCwgZnVuY3Rpb24oZSkge1xuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKGUsIGluc3QsIGJpbmRpbmcudGFyZ2V0LCBwYXJ0LnNvdXJjZSwgcGFydC5uZWdhdGUpO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIC0tIGZvciBtZXRob2QtYmFzZWQgZWZmZWN0cyAoY29tcGxleE9ic2VydmVyICYgY29tcHV0ZWQpIC0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQWRkcyBwcm9wZXJ0eSBlZmZlY3RzIGZvciBlYWNoIGFyZ3VtZW50IGluIHRoZSBtZXRob2Qgc2lnbmF0dXJlIChhbmRcbiAqIG9wdGlvbmFsbHksIGZvciB0aGUgbWV0aG9kIG5hbWUgaWYgYGR5bmFtaWNgIGlzIHRydWUpIHRoYXQgY2FsbHMgdGhlXG4gKiBwcm92aWRlZCBlZmZlY3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtFbGVtZW50IHwgT2JqZWN0fSBtb2RlbCBQcm90b3R5cGUgb3IgaW5zdGFuY2VcbiAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgcHJvcGVydHkgZWZmZWN0IHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWZmZWN0Rm4gRnVuY3Rpb24gdG8gcnVuIHdoZW4gYXJndW1lbnRzIGNoYW5nZVxuICogQHBhcmFtIHsqPX0gbWV0aG9kSW5mbyBFZmZlY3Qtc3BlY2lmaWMgaW5mb3JtYXRpb24gdG8gYmUgaW5jbHVkZWQgaW5cbiAqICAgbWV0aG9kIGVmZmVjdCBtZXRhZGF0YVxuICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZyB3aGV0aGVyXG4gKiAgIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuIE5vdGUsXG4gKiAgIGRlZmF1bHRzIHRvIHRydWUgaWYgdGhlIHNpZ25hdHVyZSBpcyBzdGF0aWMgKHNpZy5zdGF0aWMgaXMgdHJ1ZSkuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWV0aG9kRWZmZWN0KG1vZGVsLCBzaWcsIHR5cGUsIGVmZmVjdEZuLCBtZXRob2RJbmZvLCBkeW5hbWljRm4pIHtcbiAgZHluYW1pY0ZuID0gc2lnLnN0YXRpYyB8fCAoZHluYW1pY0ZuICYmXG4gICAgKHR5cGVvZiBkeW5hbWljRm4gIT09ICdvYmplY3QnIHx8IGR5bmFtaWNGbltzaWcubWV0aG9kTmFtZV0pKTtcbiAgbGV0IGluZm8gPSB7XG4gICAgbWV0aG9kTmFtZTogc2lnLm1ldGhvZE5hbWUsXG4gICAgYXJnczogc2lnLmFyZ3MsXG4gICAgbWV0aG9kSW5mbyxcbiAgICBkeW5hbWljRm5cbiAgfTtcbiAgZm9yIChsZXQgaT0wLCBhcmc7IChpPHNpZy5hcmdzLmxlbmd0aCkgJiYgKGFyZz1zaWcuYXJnc1tpXSk7IGkrKykge1xuICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChhcmcucm9vdFByb3BlcnR5LCB0eXBlLCB7XG4gICAgICAgIGZuOiBlZmZlY3RGbiwgaW5mbzogaW5mbywgdHJpZ2dlcjogYXJnXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKGR5bmFtaWNGbikge1xuICAgIG1vZGVsLl9hZGRQcm9wZXJ0eUVmZmVjdChzaWcubWV0aG9kTmFtZSwgdHlwZSwge1xuICAgICAgZm46IGVmZmVjdEZuLCBpbmZvOiBpbmZvXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBDYWxscyBhIG1ldGhvZCB3aXRoIGFyZ3VtZW50cyBtYXJzaGFsZWQgZnJvbSBwcm9wZXJ0aWVzIG9uIHRoZSBpbnN0YW5jZVxuICogYmFzZWQgb24gdGhlIG1ldGhvZCBzaWduYXR1cmUgY29udGFpbmVkIGluIHRoZSBlZmZlY3QgbWV0YWRhdGEuXG4gKlxuICogTXVsdGktcHJvcGVydHkgb2JzZXJ2ZXJzLCBjb21wdXRlZCBwcm9wZXJ0aWVzLCBhbmQgaW5saW5lIGNvbXB1dGluZ1xuICogZnVuY3Rpb25zIGNhbGwgdGhpcyBmdW5jdGlvbiB0byBpbnZva2UgdGhlIG1ldGhvZCwgdGhlbiB1c2UgdGhlIHJldHVyblxuICogdmFsdWUgYWNjb3JkaW5nbHkuXG4gKlxuICogQHBhcmFtIHshUHJvcGVydHlFZmZlY3RzVHlwZX0gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHsqfSBSZXR1cm5zIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgbWV0aG9kIGludm9jYXRpb25cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bk1ldGhvZEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gIC8vIEluc3RhbmNlcyBjYW4gb3B0aW9uYWxseSBoYXZlIGEgX21ldGhvZEhvc3Qgd2hpY2ggYWxsb3dzIHJlZGlyZWN0aW5nIHdoZXJlXG4gIC8vIHRvIGZpbmQgbWV0aG9kcy4gQ3VycmVudGx5IHVzZWQgYnkgYHRlbXBsYXRpemVgLlxuICBsZXQgY29udGV4dCA9IGluc3QuX21ldGhvZEhvc3QgfHwgaW5zdDtcbiAgbGV0IGZuID0gY29udGV4dFtpbmZvLm1ldGhvZE5hbWVdO1xuICBpZiAoZm4pIHtcbiAgICBsZXQgYXJncyA9IG1hcnNoYWxBcmdzKGluc3QuX19kYXRhLCBpbmZvLmFyZ3MsIHByb3BlcnR5LCBwcm9wcyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2UgaWYgKCFpbmZvLmR5bmFtaWNGbikge1xuICAgIGNvbnNvbGUud2FybignbWV0aG9kIGAnICsgaW5mby5tZXRob2ROYW1lICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgfVxufVxuXG5jb25zdCBlbXB0eUFycmF5ID0gW107XG5cbi8vIFJlZ3VsYXIgZXhwcmVzc2lvbnMgdXNlZCBmb3IgYmluZGluZ1xuY29uc3QgSURFTlQgID0gJyg/OicgKyAnW2EtekEtWl8kXVtcXFxcdy46JFxcXFwtKl0qJyArICcpJztcbmNvbnN0IE5VTUJFUiA9ICcoPzonICsgJ1stK10/WzAtOV0qXFxcXC4/WzAtOV0rKD86W2VFXVstK10/WzAtOV0rKT8nICsgJyknO1xuY29uc3QgU1FVT1RFX1NUUklORyA9ICcoPzonICsgJ1xcJyg/OlteXFwnXFxcXFxcXFxdfFxcXFxcXFxcLikqXFwnJyArICcpJztcbmNvbnN0IERRVU9URV9TVFJJTkcgPSAnKD86JyArICdcIig/OlteXCJcXFxcXFxcXF18XFxcXFxcXFwuKSpcIicgKyAnKSc7XG5jb25zdCBTVFJJTkcgPSAnKD86JyArIFNRVU9URV9TVFJJTkcgKyAnfCcgKyBEUVVPVEVfU1RSSU5HICsgJyknO1xuY29uc3QgQVJHVU1FTlQgPSAnKD86KCcgKyBJREVOVCArICd8JyArIE5VTUJFUiArICd8JyArICBTVFJJTkcgKyAnKVxcXFxzKicgKyAnKSc7XG5jb25zdCBBUkdVTUVOVFMgPSAnKD86JyArIEFSR1VNRU5UICsgJyg/OixcXFxccyonICsgQVJHVU1FTlQgKyAnKSonICsgJyknO1xuY29uc3QgQVJHVU1FTlRfTElTVCA9ICcoPzonICsgJ1xcXFwoXFxcXHMqJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKD86JyArIEFSR1VNRU5UUyArICc/JyArICcpJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcXFwpXFxcXHMqJyArICcpJztcbmNvbnN0IEJJTkRJTkcgPSAnKCcgKyBJREVOVCArICdcXFxccyonICsgQVJHVU1FTlRfTElTVCArICc/JyArICcpJzsgLy8gR3JvdXAgM1xuY29uc3QgT1BFTl9CUkFDS0VUID0gJyhcXFxcW1xcXFxbfHt7KScgKyAnXFxcXHMqJztcbmNvbnN0IENMT1NFX0JSQUNLRVQgPSAnKD86XV18fX0pJztcbmNvbnN0IE5FR0FURSA9ICcoPzooISlcXFxccyopPyc7IC8vIEdyb3VwIDJcbmNvbnN0IEVYUFJFU1NJT04gPSBPUEVOX0JSQUNLRVQgKyBORUdBVEUgKyBCSU5ESU5HICsgQ0xPU0VfQlJBQ0tFVDtcbmNvbnN0IGJpbmRpbmdSZWdleCA9IG5ldyBSZWdFeHAoRVhQUkVTU0lPTiwgXCJnXCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHN0cmluZyBmcm9tIGJpbmRpbmcgcGFydHMgb2YgYWxsIHRoZSBsaXRlcmFsIHBhcnRzXG4gKlxuICogQHBhcmFtIHshQXJyYXk8QmluZGluZ1BhcnQ+fSBwYXJ0cyBBbGwgcGFydHMgdG8gc3RyaW5naWZ5XG4gKiBAcmV0dXJuIHtzdHJpbmd9IFN0cmluZyBtYWRlIGZyb20gdGhlIGxpdGVyYWwgcGFydHNcbiAqL1xuZnVuY3Rpb24gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykge1xuICBsZXQgcyA9ICcnO1xuICBmb3IgKGxldCBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbGl0ZXJhbCA9IHBhcnRzW2ldLmxpdGVyYWw7XG4gICAgcyArPSBsaXRlcmFsIHx8ICcnO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbiBleHByZXNzaW9uIHN0cmluZyBmb3IgYSBtZXRob2Qgc2lnbmF0dXJlLCBhbmQgcmV0dXJucyBhIG1ldGFkYXRhXG4gKiBkZXNjcmliaW5nIHRoZSBtZXRob2QgaW4gdGVybXMgb2YgYG1ldGhvZE5hbWVgLCBgc3RhdGljYCAod2hldGhlciBhbGwgdGhlXG4gKiBhcmd1bWVudHMgYXJlIGxpdGVyYWxzKSwgYW5kIGFuIGFycmF5IG9mIGBhcmdzYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBleHByZXNzaW9uIHRvIHBhcnNlXG4gKiBAcmV0dXJuIHs/TWV0aG9kU2lnbmF0dXJlfSBUaGUgbWV0aG9kIG1ldGFkYXRhIG9iamVjdCBpZiBhIG1ldGhvZCBleHByZXNzaW9uIHdhc1xuICogICBmb3VuZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZU1ldGhvZChleHByZXNzaW9uKSB7XG4gIC8vIHRyaWVzIHRvIG1hdGNoIHZhbGlkIGphdmFzY3JpcHQgcHJvcGVydHkgbmFtZXNcbiAgbGV0IG0gPSBleHByZXNzaW9uLm1hdGNoKC8oW15cXHNdKz8pXFwoKFtcXHNcXFNdKilcXCkvKTtcbiAgaWYgKG0pIHtcbiAgICBsZXQgbWV0aG9kTmFtZSA9IG1bMV07XG4gICAgbGV0IHNpZyA9IHsgbWV0aG9kTmFtZSwgc3RhdGljOiB0cnVlLCBhcmdzOiBlbXB0eUFycmF5IH07XG4gICAgaWYgKG1bMl0udHJpbSgpKSB7XG4gICAgICAvLyByZXBsYWNlIGVzY2FwZWQgY29tbWFzIHdpdGggY29tbWEgZW50aXR5LCBzcGxpdCBvbiB1bi1lc2NhcGVkIGNvbW1hc1xuICAgICAgbGV0IGFyZ3MgPSBtWzJdLnJlcGxhY2UoL1xcXFwsL2csICcmY29tbWE7Jykuc3BsaXQoJywnKTtcbiAgICAgIHJldHVybiBwYXJzZUFyZ3MoYXJncywgc2lnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNpZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUGFyc2VzIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBhbmQgc2V0cyB0aGUgYGFyZ3NgIHByb3BlcnR5IG9mIHRoZSBzdXBwbGllZFxuICogc2lnbmF0dXJlIG1ldGFkYXRhIG9iamVjdC4gU2V0cyB0aGUgYHN0YXRpY2AgcHJvcGVydHkgdG8gZmFsc2UgaWYgYW55XG4gKiBhcmd1bWVudCBpcyBhIG5vbi1saXRlcmFsLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IGFyZ0xpc3QgQXJyYXkgb2YgYXJndW1lbnQgbmFtZXNcbiAqIEBwYXJhbSB7IU1ldGhvZFNpZ25hdHVyZX0gc2lnIE1ldGhvZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcmV0dXJuIHshTWV0aG9kU2lnbmF0dXJlfSBUaGUgdXBkYXRlZCBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZUFyZ3MoYXJnTGlzdCwgc2lnKSB7XG4gIHNpZy5hcmdzID0gYXJnTGlzdC5tYXAoZnVuY3Rpb24ocmF3QXJnKSB7XG4gICAgbGV0IGFyZyA9IHBhcnNlQXJnKHJhd0FyZyk7XG4gICAgaWYgKCFhcmcubGl0ZXJhbCkge1xuICAgICAgc2lnLnN0YXRpYyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYXJnO1xuICB9LCB0aGlzKTtcbiAgcmV0dXJuIHNpZztcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gaW5kaXZpZHVhbCBhcmd1bWVudCwgYW5kIHJldHVybnMgYW4gYXJndW1lbnQgbWV0YWRhdGEgb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICpcbiAqICAge1xuICogICAgIHZhbHVlOiAncHJvcCcsICAgICAgICAvLyBwcm9wZXJ0eS9wYXRoIG9yIGxpdGVyYWwgdmFsdWVcbiAqICAgICBsaXRlcmFsOiBmYWxzZSwgICAgICAgLy8gd2hldGhlciBhcmd1bWVudCBpcyBhIGxpdGVyYWxcbiAqICAgICBzdHJ1Y3R1cmVkOiBmYWxzZSwgICAgLy8gd2hldGhlciB0aGUgcHJvcGVydHkgaXMgYSBwYXRoXG4gKiAgICAgcm9vdFByb3BlcnR5OiAncHJvcCcsIC8vIHRoZSByb290IHByb3BlcnR5IG9mIHRoZSBwYXRoXG4gKiAgICAgd2lsZGNhcmQ6IGZhbHNlICAgICAgIC8vIHdoZXRoZXIgdGhlIGFyZ3VtZW50IHdhcyBhIHdpbGRjYXJkICcuKicgcGF0aFxuICogICB9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhd0FyZyBUaGUgc3RyaW5nIHZhbHVlIG9mIHRoZSBhcmd1bWVudFxuICogQHJldHVybiB7IU1ldGhvZEFyZ30gQXJndW1lbnQgbWV0YWRhdGEgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwYXJzZUFyZyhyYXdBcmcpIHtcbiAgLy8gY2xlYW4gdXAgd2hpdGVzcGFjZVxuICBsZXQgYXJnID0gcmF3QXJnLnRyaW0oKVxuICAgIC8vIHJlcGxhY2UgY29tbWEgZW50aXR5IHdpdGggY29tbWFcbiAgICAucmVwbGFjZSgvJmNvbW1hOy9nLCAnLCcpXG4gICAgLy8gcmVwYWlyIGV4dHJhIGVzY2FwZSBzZXF1ZW5jZXM7IG5vdGUgb25seSBjb21tYXMgc3RyaWN0bHkgbmVlZFxuICAgIC8vIGVzY2FwaW5nLCBidXQgd2UgYWxsb3cgYW55IG90aGVyIGNoYXIgdG8gYmUgZXNjYXBlZCBzaW5jZSBpdHNcbiAgICAvLyBsaWtlbHkgdXNlcnMgd2lsbCBkbyB0aGlzXG4gICAgLnJlcGxhY2UoL1xcXFwoLikvZywgJ1xcJDEnKVxuICAgIDtcbiAgLy8gYmFzaWMgYXJndW1lbnQgZGVzY3JpcHRvclxuICBsZXQgYSA9IHtcbiAgICBuYW1lOiBhcmcsXG4gICAgdmFsdWU6ICcnLFxuICAgIGxpdGVyYWw6IGZhbHNlXG4gIH07XG4gIC8vIGRldGVjdCBsaXRlcmFsIHZhbHVlIChtdXN0IGJlIFN0cmluZyBvciBOdW1iZXIpXG4gIGxldCBmYyA9IGFyZ1swXTtcbiAgaWYgKGZjID09PSAnLScpIHtcbiAgICBmYyA9IGFyZ1sxXTtcbiAgfVxuICBpZiAoZmMgPj0gJzAnICYmIGZjIDw9ICc5Jykge1xuICAgIGZjID0gJyMnO1xuICB9XG4gIHN3aXRjaChmYykge1xuICAgIGNhc2UgXCInXCI6XG4gICAgY2FzZSAnXCInOlxuICAgICAgYS52YWx1ZSA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICBhLmxpdGVyYWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnIyc6XG4gICAgICBhLnZhbHVlID0gTnVtYmVyKGFyZyk7XG4gICAgICBhLmxpdGVyYWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgLy8gaWYgbm90IGxpdGVyYWwsIGxvb2sgZm9yIHN0cnVjdHVyZWQgcGF0aFxuICBpZiAoIWEubGl0ZXJhbCkge1xuICAgIGEucm9vdFByb3BlcnR5ID0gcm9vdCQwKGFyZyk7XG4gICAgLy8gZGV0ZWN0IHN0cnVjdHVyZWQgcGF0aCAoaGFzIGRvdHMpXG4gICAgYS5zdHJ1Y3R1cmVkID0gaXNQYXRoJDAoYXJnKTtcbiAgICBpZiAoYS5zdHJ1Y3R1cmVkKSB7XG4gICAgICBhLndpbGRjYXJkID0gKGFyZy5zbGljZSgtMikgPT0gJy4qJyk7XG4gICAgICBpZiAoYS53aWxkY2FyZCkge1xuICAgICAgICBhLm5hbWUgPSBhcmcuc2xpY2UoMCwgLTIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBHYXRoZXIgdGhlIGFyZ3VtZW50IHZhbHVlcyBmb3IgYSBtZXRob2Qgc3BlY2lmaWVkIGluIHRoZSBwcm92aWRlZCBhcnJheVxuICogb2YgYXJndW1lbnQgbWV0YWRhdGEuXG4gKlxuICogVGhlIGBwYXRoYCBhbmQgYHZhbHVlYCBhcmd1bWVudHMgYXJlIHVzZWQgdG8gZmlsbCBpbiB3aWxkY2FyZCBkZXNjcmlwdG9yXG4gKiB3aGVuIHRoZSBtZXRob2QgaXMgYmVpbmcgY2FsbGVkIGFzIGEgcmVzdWx0IG9mIGEgcGF0aCBub3RpZmljYXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgSW5zdGFuY2UgZGF0YSBzdG9yYWdlIG9iamVjdCB0byByZWFkIHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHshQXJyYXk8IU1ldGhvZEFyZz59IGFyZ3MgQXJyYXkgb2YgYXJndW1lbnQgbWV0YWRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFByb3BlcnR5L3BhdGggbmFtZSB0aGF0IHRyaWdnZXJlZCB0aGUgbWV0aG9kIGVmZmVjdFxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEByZXR1cm4ge0FycmF5PCo+fSBBcnJheSBvZiBhcmd1bWVudCB2YWx1ZXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1hcnNoYWxBcmdzKGRhdGEsIGFyZ3MsIHBhdGgsIHByb3BzKSB7XG4gIGxldCB2YWx1ZXMgPSBbXTtcbiAgZm9yIChsZXQgaT0wLCBsPWFyZ3MubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgIGxldCBhcmcgPSBhcmdzW2ldO1xuICAgIGxldCBuYW1lID0gYXJnLm5hbWU7XG4gICAgbGV0IHY7XG4gICAgaWYgKGFyZy5saXRlcmFsKSB7XG4gICAgICB2ID0gYXJnLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJnLnN0cnVjdHVyZWQpIHtcbiAgICAgICAgdiA9IGdldCQwKGRhdGEsIG5hbWUpO1xuICAgICAgICAvLyB3aGVuIGRhdGEgaXMgbm90IHN0b3JlZCBlLmcuIGBzcGxpY2VzYFxuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdiA9IHByb3BzW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ID0gZGF0YVtuYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFyZy53aWxkY2FyZCkge1xuICAgICAgLy8gT25seSBzZW5kIHRoZSBhY3R1YWwgcGF0aCBjaGFuZ2VkIGluZm8gaWYgdGhlIGNoYW5nZSB0aGF0XG4gICAgICAvLyBjYXVzZWQgdGhlIG9ic2VydmVyIHRvIHJ1biBtYXRjaGVkIHRoZSB3aWxkY2FyZFxuICAgICAgbGV0IGJhc2VDaGFuZ2VkID0gKG5hbWUuaW5kZXhPZihwYXRoICsgJy4nKSA9PT0gMCk7XG4gICAgICBsZXQgbWF0Y2hlcyA9IChwYXRoLmluZGV4T2YobmFtZSkgPT09IDAgJiYgIWJhc2VDaGFuZ2VkKTtcbiAgICAgIHZhbHVlc1tpXSA9IHtcbiAgICAgICAgcGF0aDogbWF0Y2hlcyA/IHBhdGggOiBuYW1lLFxuICAgICAgICB2YWx1ZTogbWF0Y2hlcyA/IHByb3BzW3BhdGhdIDogdixcbiAgICAgICAgYmFzZTogdlxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWVzW2ldID0gdjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuLy8gZGF0YSBhcGlcblxuLyoqXG4gKiBTZW5kcyBhcnJheSBzcGxpY2Ugbm90aWZpY2F0aW9ucyAoYC5zcGxpY2VzYCBhbmQgYC5sZW5ndGhgKVxuICpcbiAqIE5vdGU6IHRoaXMgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG5vcm1hbGl6ZWQgcGF0aHNcbiAqXG4gKiBAcGFyYW0geyFQcm9wZXJ0eUVmZmVjdHNUeXBlfSBpbnN0IEluc3RhbmNlIHRvIHNlbmQgbm90aWZpY2F0aW9ucyB0b1xuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRoZSBtdXRhdGlvbnMgb2NjdXJyZWQgb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBhcnJheSB0aGF0IHdhcyBtdXRhdGVkXG4gKiBAcGFyYW0ge0FycmF5fSBzcGxpY2VzIEFycmF5IG9mIHNwbGljZSByZWNvcmRzXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm90aWZ5U3BsaWNlcyhpbnN0LCBhcnJheSwgcGF0aCwgc3BsaWNlcykge1xuICBsZXQgc3BsaWNlc1BhdGggPSBwYXRoICsgJy5zcGxpY2VzJztcbiAgaW5zdC5ub3RpZnlQYXRoKHNwbGljZXNQYXRoLCB7IGluZGV4U3BsaWNlczogc3BsaWNlcyB9KTtcbiAgaW5zdC5ub3RpZnlQYXRoKHBhdGggKyAnLmxlbmd0aCcsIGFycmF5Lmxlbmd0aCk7XG4gIC8vIE51bGwgaGVyZSB0byBhbGxvdyBwb3RlbnRpYWxseSBsYXJnZSBzcGxpY2UgcmVjb3JkcyB0byBiZSBHQydlZC5cbiAgaW5zdC5fX2RhdGFbc3BsaWNlc1BhdGhdID0ge2luZGV4U3BsaWNlczogbnVsbH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNwbGljZSByZWNvcmQgYW5kIHNlbmRzIGFuIGFycmF5IHNwbGljZSBub3RpZmljYXRpb24gZm9yXG4gKiB0aGUgZGVzY3JpYmVkIG11dGF0aW9uXG4gKlxuICogTm90ZTogdGhpcyBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgbm9ybWFsaXplZCBwYXRoc1xuICpcbiAqIEBwYXJhbSB7IVByb3BlcnR5RWZmZWN0c1R5cGV9IGluc3QgSW5zdGFuY2UgdG8gc2VuZCBub3RpZmljYXRpb25zIHRvXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdGhlIG11dGF0aW9ucyBvY2N1cnJlZCBvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gdGhlIGFycmF5IHRoYXQgd2FzIG11dGF0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0aGUgYXJyYXkgbXV0YXRpb24gb2NjdXJyZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlZENvdW50IE51bWJlciBvZiBhZGRlZCBpdGVtc1xuICogQHBhcmFtIHtBcnJheX0gcmVtb3ZlZCBBcnJheSBvZiByZW1vdmVkIGl0ZW1zXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm90aWZ5U3BsaWNlKGluc3QsIGFycmF5LCBwYXRoLCBpbmRleCwgYWRkZWRDb3VudCwgcmVtb3ZlZCkge1xuICBub3RpZnlTcGxpY2VzKGluc3QsIGFycmF5LCBwYXRoLCBbe1xuICAgIGluZGV4OiBpbmRleCxcbiAgICBhZGRlZENvdW50OiBhZGRlZENvdW50LFxuICAgIHJlbW92ZWQ6IHJlbW92ZWQsXG4gICAgb2JqZWN0OiBhcnJheSxcbiAgICB0eXBlOiAnc3BsaWNlJ1xuICB9XSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiB1cHBlci1jYXNlZCB2ZXJzaW9uIG9mIHRoZSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU3RyaW5nIHRvIHVwcGVyY2FzZVxuICogQHJldHVybiB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZ1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXBwZXIobmFtZSkge1xuICByZXR1cm4gbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIG1ldGEtcHJvZ3JhbW1pbmcgZm9yIFBvbHltZXIncyB0ZW1wbGF0ZVxuICogYmluZGluZyBhbmQgZGF0YSBvYnNlcnZhdGlvbiAoY29sbGVjdGl2ZWx5LCBcInByb3BlcnR5IGVmZmVjdHNcIikgc3lzdGVtLlxuICpcbiAqIFRoaXMgbWl4aW4gdXNlcyBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGtleSBzdGF0aWMgbWV0aG9kcyBmb3IgYWRkaW5nXG4gKiBwcm9wZXJ0eSBlZmZlY3RzIHRvIGFuIGVsZW1lbnQgY2xhc3M6XG4gKiAtIGBhZGRQcm9wZXJ0eUVmZmVjdGBcbiAqIC0gYGNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXJgXG4gKiAtIGBjcmVhdGVNZXRob2RPYnNlcnZlcmBcbiAqIC0gYGNyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5YFxuICogLSBgY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eWBcbiAqIC0gYGNyZWF0ZVJlZmxlY3RlZFByb3BlcnR5YFxuICogLSBgY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eWBcbiAqIC0gYGJpbmRUZW1wbGF0ZWBcbiAqXG4gKiBFYWNoIG1ldGhvZCBjcmVhdGVzIG9uZSBvciBtb3JlIHByb3BlcnR5IGFjY2Vzc29ycywgYWxvbmcgd2l0aCBtZXRhZGF0YVxuICogdXNlZCBieSB0aGlzIG1peGluJ3MgaW1wbGVtZW50YXRpb24gb2YgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgdG8gcGVyZm9ybVxuICogdGhlIHByb3BlcnR5IGVmZmVjdHMuXG4gKlxuICogVW5kZXJzY29yZWQgdmVyc2lvbnMgb2YgdGhlIGFib3ZlIG1ldGhvZHMgYWxzbyBleGlzdCBvbiB0aGUgZWxlbWVudFxuICogcHJvdG90eXBlIGZvciBhZGRpbmcgcHJvcGVydHkgZWZmZWN0cyBvbiBpbnN0YW5jZXMgYXQgcnVudGltZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBtaXhpbiBvdmVycmlkZXMgc2V2ZXJhbCBgUHJvcGVydHlBY2Nlc3NvcnNgIG1ldGhvZHMsIGluXG4gKiBtYW55IGNhc2VzIHRvIG1haW50YWluIGd1YXJhbnRlZXMgcHJvdmlkZWQgYnkgdGhlIFBvbHltZXIgMS54IGZlYXR1cmVzO1xuICogbm90YWJseSBpdCBjaGFuZ2VzIHByb3BlcnR5IGFjY2Vzc29ycyB0byBiZSBzeW5jaHJvbm91cyBieSBkZWZhdWx0XG4gKiB3aGVyZWFzIHRoZSBkZWZhdWx0IHdoZW4gdXNpbmcgYFByb3BlcnR5QWNjZXNzb3JzYCBzdGFuZGFsb25lIGlzIHRvIGJlXG4gKiBhc3luYyBieSBkZWZhdWx0LlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQGFwcGxpZXNNaXhpbiBUZW1wbGF0ZVN0YW1wXG4gKiBAYXBwbGllc01peGluIFByb3BlcnR5QWNjZXNzb3JzXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgbWV0YS1wcm9ncmFtbWluZyBmb3IgUG9seW1lcidzXG4gKiB0ZW1wbGF0ZSBiaW5kaW5nIGFuZCBkYXRhIG9ic2VydmF0aW9uIHN5c3RlbS5cbiAqL1xuZXhwb3J0IGNvbnN0IFByb3BlcnR5RWZmZWN0cyA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7c3VwZXJDbGFzc31cbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1RlbXBsYXRlU3RhbXB9XG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICovXG4gIGNvbnN0IHByb3BlcnR5RWZmZWN0c0Jhc2UgPSBUZW1wbGF0ZVN0YW1wKFByb3BlcnR5QWNjZXNzb3JzKHN1cGVyQ2xhc3MpKTtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICAgKiBAZXh0ZW5kcyB7cHJvcGVydHlFZmZlY3RzQmFzZX1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgUHJvcGVydHlFZmZlY3RzIGV4dGVuZHMgcHJvcGVydHlFZmZlY3RzQmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAvLyBVc2VkIHRvIGlkZW50aWZ5IHVzZXJzIG9mIHRoaXMgbWl4aW4sIGFsYSBpbnN0YW5jZW9mXG4gICAgICB0aGlzLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgPSB0cnVlO1xuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICAvLyBOT1RFOiB1c2VkIHRvIHRyYWNrIHJlLWVudHJhbnQgY2FsbHMgdG8gYF9mbHVzaFByb3BlcnRpZXNgXG4gICAgICAvLyBwYXRoIGNoYW5nZXMgZGlydHkgY2hlY2sgYWdhaW5zdCBgX19kYXRhVGVtcGAgb25seSBkdXJpbmcgb25lIFwidHVyblwiXG4gICAgICAvLyBhbmQgYXJlIGNsZWFyZWQgd2hlbiBgX19kYXRhQ291bnRlcmAgcmV0dXJucyB0byAwLlxuICAgICAgdGhpcy5fX2RhdGFDb3VudGVyID0gMDtcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5O1xuICAgICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnk7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHM7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fZGF0YUhhc1BhdGhzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZTtcbiAgICAgIC8qKiBAdHlwZSB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9ICovXG4gICAgICB0aGlzLl9fZGF0YUhvc3Q7XG4gICAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YVRlbXA7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fZGF0YUNsaWVudHNJbml0aWFsaXplZDtcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhO1xuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nO1xuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2RhdGFPbGQ7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19jb21wdXRlRWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3JlZmxlY3RFZmZlY3RzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fbm90aWZ5RWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3Byb3BhZ2F0ZUVmZmVjdHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19vYnNlcnZlRWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX3JlYWRPbmx5O1xuICAgICAgLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqL1xuICAgICAgdGhpcy5fX3RlbXBsYXRlSW5mbztcbiAgICB9XG5cbiAgICBnZXQgUFJPUEVSVFlfRUZGRUNUX1RZUEVTKCkge1xuICAgICAgcmV0dXJuIFRZUEVTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgc3VwZXIuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgICBob3N0U3RhY2sucmVnaXN0ZXJIb3N0KHRoaXMpO1xuICAgICAgdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSBudWxsO1xuICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSBmYWxzZTtcbiAgICAgIC8vIE1heSBiZSBzZXQgb24gaW5zdGFuY2UgcHJpb3IgdG8gdXBncmFkZVxuICAgICAgdGhpcy5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgPSB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSB8fCBudWxsO1xuICAgICAgdGhpcy5fX2RhdGFIb3N0ID0gdGhpcy5fX2RhdGFIb3N0IHx8IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YVRlbXAgPSB7fTtcbiAgICAgIHRoaXMuX19kYXRhQ2xpZW50c0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUFjY2Vzc29yc2AgaW1wbGVtZW50YXRpb24gdG8gcHJvdmlkZSBhXG4gICAgICogbW9yZSBlZmZpY2llbnQgaW1wbGVtZW50YXRpb24gb2YgaW5pdGlhbGl6aW5nIHByb3BlcnRpZXMgZnJvbVxuICAgICAqIHRoZSBwcm90b3R5cGUgb24gdGhlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BlcnRpZXMgdG8gaW5pdGlhbGl6ZSBvbiB0aGUgcHJvdG90eXBlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3RvUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgdGhpcy5fX2RhdGEgPSBPYmplY3QuY3JlYXRlKHByb3BzKTtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IE9iamVjdC5jcmVhdGUocHJvcHMpO1xuICAgICAgdGhpcy5fX2RhdGFPbGQgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBpbXBsZW1lbnRhdGlvbiB0byBhdm9pZCBzZXR0aW5nXG4gICAgICogYF9zZXRQcm9wZXJ0eWAncyBgc2hvdWxkTm90aWZ5OiB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBQcm9wZXJ0aWVzIHRvIGluaXRpYWxpemUgb24gdGhlIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZUluc3RhbmNlUHJvcGVydGllcyhwcm9wcykge1xuICAgICAgbGV0IHJlYWRPbmx5ID0gdGhpc1tUWVBFUy5SRUFEX09OTFldO1xuICAgICAgZm9yIChsZXQgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICBpZiAoIXJlYWRPbmx5IHx8ICFyZWFkT25seVtwcm9wXSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IHRoaXMuX19kYXRhUGVuZGluZyB8fCB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHRoaXMuX19kYXRhT2xkIHx8IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhW3Byb3BdID0gdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQcm90b3R5cGUgc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGFkZFByb3BlcnR5RWZmZWN0YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZWZmZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHR5cGUgPT0gVFlQRVMuUkVBRF9PTkxZKTtcbiAgICAgIC8vIGVmZmVjdHMgYXJlIGFjY3VtdWxhdGVkIGludG8gYXJyYXlzIHBlciBwcm9wZXJ0eSBiYXNlZCBvbiB0eXBlXG4gICAgICBsZXQgZWZmZWN0cyA9IGVuc3VyZU93bkVmZmVjdE1hcCh0aGlzLCB0eXBlKVtwcm9wZXJ0eV07XG4gICAgICBpZiAoIWVmZmVjdHMpIHtcbiAgICAgICAgZWZmZWN0cyA9IHRoaXNbdHlwZV1bcHJvcGVydHldID0gW107XG4gICAgICB9XG4gICAgICBlZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBwcm9wZXJ0eSBlZmZlY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdGhlIGVmZmVjdCB3YXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0IHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX3JlbW92ZVByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgIGxldCBlZmZlY3RzID0gZW5zdXJlT3duRWZmZWN0TWFwKHRoaXMsIHR5cGUpW3Byb3BlcnR5XTtcbiAgICAgIGxldCBpZHggPSBlZmZlY3RzLmluZGV4T2YoZWZmZWN0KTtcbiAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICBlZmZlY3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgcHJvcGVydHkgZWZmZWN0XG4gICAgICogb2YgYSBjZXJ0YWluIHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHlwZSBFZmZlY3QgdHlwZSwgZnJvbSB0aGlzLlBST1BFUlRZX0VGRkVDVF9UWVBFU1xuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXMgdHlwZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUpIHtcbiAgICAgIGxldCBlZmZlY3RzID0gdGhpc1t0eXBlXTtcbiAgICAgIHJldHVybiBCb29sZWFuKGVmZmVjdHMgJiYgZWZmZWN0c1twcm9wZXJ0eV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJyZWFkIG9ubHlcIlxuICAgICAqIGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXMgdHlwZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaGFzUmVhZE9ubHlFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVBRF9PTkxZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwibm90aWZ5XCJcbiAgICAgKiBwcm9wZXJ0eSBlZmZlY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpcyB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNOb3RpZnlFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuTk9USUZZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwicmVmbGVjdCB0byBhdHRyaWJ1dGVcIlxuICAgICAqIHByb3BlcnR5IGVmZmVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGFuIGVmZmVjdCBvZiB0aGlzIHR5cGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2hhc1JlZmxlY3RFZmZlY3QocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVGTEVDVCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBcImNvbXB1dGVkXCJcbiAgICAgKiBwcm9wZXJ0eSBlZmZlY3QgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpcyB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNDb21wdXRlZEVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5DT01QVVRFKTtcbiAgICB9XG5cbiAgICAvLyBSdW50aW1lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBwZW5kaW5nIHByb3BlcnR5IG9yIHBhdGguICBJZiB0aGUgcm9vdCBwcm9wZXJ0eSBvZiB0aGUgcGF0aCBpblxuICAgICAqIHF1ZXN0aW9uIGhhZCBubyBhY2Nlc3NvciwgdGhlIHBhdGggaXMgc2V0LCBvdGhlcndpc2UgaXQgaXMgZW5xdWV1ZWRcbiAgICAgKiB2aWEgYF9zZXRQZW5kaW5nUHJvcGVydHlgLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpc29sYXRlcyByZWxhdGl2ZWx5IGV4cGVuc2l2ZSBmdW5jdGlvbmFsaXR5IG5lY2Vzc2FyeVxuICAgICAqIGZvciB0aGUgcHVibGljIEFQSSAoYHNldGAsIGBzZXRQcm9wZXJ0aWVzYCwgYG5vdGlmeVBhdGhgLCBhbmQgcHJvcGVydHlcbiAgICAgKiBjaGFuZ2UgbGlzdGVuZXJzIHZpYSB7ey4uLn19IGJpbmRpbmdzKSwgc3VjaCB0aGF0IGl0IGlzIG9ubHkgZG9uZVxuICAgICAqIHdoZW4gcGF0aHMgZW50ZXIgdGhlIHN5c3RlbSwgYW5kIG5vdCBhdCBldmVyeSBwcm9wYWdhdGlvbiBzdGVwLiAgSXRcbiAgICAgKiBhbHNvIHNldHMgYSBgX19kYXRhSGFzUGF0aHNgIGZsYWcgb24gdGhlIGluc3RhbmNlIHdoaWNoIGlzIHVzZWQgdG9cbiAgICAgKiBmYXN0LXBhdGggc2xvd2VyIHBhdGgtbWF0Y2hpbmcgY29kZSBpbiB0aGUgcHJvcGVydHkgZWZmZWN0cyBob3N0IHBhdGhzLlxuICAgICAqXG4gICAgICogYHBhdGhgIGNhbiBiZSBhIHBhdGggc3RyaW5nIG9yIGFycmF5IG9mIHBhdGggcGFydHMgYXMgYWNjZXB0ZWQgYnkgdGhlXG4gICAgICogcHVibGljIEFQSS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PG51bWJlcnxzdHJpbmc+fSBwYXRoIFBhdGggdG8gc2V0XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG91bGROb3RpZnkgU2V0IHRvIHRydWUgaWYgdGhpcyBjaGFuZ2Ugc2hvdWxkXG4gICAgICogIGNhdXNlIGEgcHJvcGVydHkgbm90aWZpY2F0aW9uIGV2ZW50IGRpc3BhdGNoXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gaXNQYXRoTm90aWZpY2F0aW9uIElmIHRoZSBwYXRoIGJlaW5nIHNldCBpcyBhIHBhdGhcbiAgICAgKiAgIG5vdGlmaWNhdGlvbiBvZiBhbiBhbHJlYWR5IGNoYW5nZWQgdmFsdWUsIGFzIG9wcG9zZWQgdG8gYSByZXF1ZXN0XG4gICAgICogICB0byBzZXQgYW5kIG5vdGlmeSB0aGUgY2hhbmdlLiAgSW4gdGhlIGxhdHRlciBgZmFsc2VgIGNhc2UsIGEgZGlydHlcbiAgICAgKiAgIGNoZWNrIGlzIHBlcmZvcm1lZCBhbmQgdGhlbiB0aGUgdmFsdWUgaXMgc2V0IHRvIHRoZSBwYXRoIGJlZm9yZVxuICAgICAqICAgZW5xdWV1aW5nIHRoZSBwZW5kaW5nIHByb3BlcnR5IGNoYW5nZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5L3BhdGggd2FzIGVucXVldWVkIGluXG4gICAgICogICB0aGUgcGVuZGluZyBjaGFuZ2VzIGJhZy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwYXRoLCB2YWx1ZSwgc2hvdWxkTm90aWZ5LCBpc1BhdGhOb3RpZmljYXRpb24pIHtcbiAgICAgIGlmIChpc1BhdGhOb3RpZmljYXRpb24gfHxcbiAgICAgICAgICByb290JDAoQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGhbMF0gOiBwYXRoKSAhPT0gcGF0aCkge1xuICAgICAgICAvLyBEaXJ0eSBjaGVjayBjaGFuZ2VzIGJlaW5nIHNldCB0byBhIHBhdGggYWdhaW5zdCB0aGUgYWN0dWFsIG9iamVjdCxcbiAgICAgICAgLy8gc2luY2UgdGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIHBhdGhzIGludG8gdGhlIHN5c3RlbTsgZnJvbSBoZXJlXG4gICAgICAgIC8vIHRoZSBvbmx5IGRpcnR5IGNoZWNrcyBhcmUgYWdhaW5zdCB0aGUgYF9fZGF0YVRlbXBgIGNhY2hlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gZHVwbGljYXRlIHdvcmsgaW4gdGhlIHNhbWUgdHVybiBvbmx5LiBOb3RlLCBpZiB0aGlzIHdhcyBhIG5vdGlmaWNhdGlvblxuICAgICAgICAvLyBvZiBhIGNoYW5nZSBhbHJlYWR5IHNldCB0byBhIHBhdGggKGlzUGF0aE5vdGlmaWNhdGlvbjogdHJ1ZSksXG4gICAgICAgIC8vIHdlIGFsd2F5cyBsZXQgdGhlIGNoYW5nZSB0aHJvdWdoIGFuZCBza2lwIHRoZSBgc2V0YCBzaW5jZSBpdCB3YXNcbiAgICAgICAgLy8gYWxyZWFkeSBkaXJ0eSBjaGVja2VkIGF0IHRoZSBwb2ludCBvZiBlbnRyeSBhbmQgdGhlIHVuZGVybHlpbmdcbiAgICAgICAgLy8gb2JqZWN0IGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZFxuICAgICAgICBpZiAoIWlzUGF0aE5vdGlmaWNhdGlvbikge1xuICAgICAgICAgIGxldCBvbGQgPSBnZXQkMCh0aGlzLCBwYXRoKTtcbiAgICAgICAgICBwYXRoID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChzZXQkMCh0aGlzLCBwYXRoLCB2YWx1ZSkpO1xuICAgICAgICAgIC8vIFVzZSBwcm9wZXJ0eS1hY2Nlc3NvcidzIHNpbXBsZXIgZGlydHkgY2hlY2tcbiAgICAgICAgICBpZiAoIXBhdGggfHwgIXN1cGVyLl9zaG91bGRQcm9wZXJ0eUNoYW5nZShwYXRoLCB2YWx1ZSwgb2xkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fZGF0YUhhc1BhdGhzID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eSgvKipAdHlwZXtzdHJpbmd9Ki8ocGF0aCksIHZhbHVlLCBzaG91bGROb3RpZnkpKSB7XG4gICAgICAgICAgY29tcHV0ZUxpbmtlZFBhdGhzKHRoaXMsIHBhdGgsIHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX19kYXRhSGFzQWNjZXNzb3IgJiYgdGhpcy5fX2RhdGFIYXNBY2Nlc3NvcltwYXRoXSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkoLyoqQHR5cGV7c3RyaW5nfSovKHBhdGgpLCB2YWx1ZSwgc2hvdWxkTm90aWZ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW3BhdGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGEgdmFsdWUgdG8gYSBub24tUG9seW1lciBlbGVtZW50L25vZGUncyBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIFRoZSBpbXBsZW1lbnRhdGlvbiBtYWtlcyBhIGJlc3QtZWZmb3J0IGF0IGJpbmRpbmcgaW50ZXJvcDpcbiAgICAgKiBTb21lIG5hdGl2ZSBlbGVtZW50IHByb3BlcnRpZXMgaGF2ZSBzaWRlLWVmZmVjdHMgd2hlblxuICAgICAqIHJlLXNldHRpbmcgdGhlIHNhbWUgdmFsdWUgKGUuZy4gc2V0dGluZyBgPGlucHV0Pi52YWx1ZWAgcmVzZXRzIHRoZVxuICAgICAqIGN1cnNvciBwb3NpdGlvbiksIHNvIHdlIGRvIGEgZGlydHktY2hlY2sgYmVmb3JlIHNldHRpbmcgdGhlIHZhbHVlLlxuICAgICAqIEhvd2V2ZXIsIGZvciBiZXR0ZXIgaW50ZXJvcCB3aXRoIG5vbi1Qb2x5bWVyIGN1c3RvbSBlbGVtZW50cyB0aGF0XG4gICAgICogYWNjZXB0IG9iamVjdHMsIHdlIGV4cGxpY2l0bHkgcmUtc2V0IG9iamVjdCBjaGFuZ2VzIGNvbWluZyBmcm9tIHRoZVxuICAgICAqIFBvbHltZXIgd29ybGQgKHdoaWNoIG1heSBpbmNsdWRlIGRlZXAgb2JqZWN0IGNoYW5nZXMgd2l0aG91dCB0aGVcbiAgICAgKiB0b3AgcmVmZXJlbmNlIGNoYW5naW5nKSwgZXJyaW5nIG9uIHRoZSBzaWRlIG9mIHByb3ZpZGluZyBtb3JlXG4gICAgICogaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZSBhbHRlcm5hdGUgYXBwcm9hY2hlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgVGhlIG5vZGUgdG8gc2V0IGEgcHJvcGVydHkgb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBUaGUgcHJvcGVydHkgdG8gc2V0XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3NldFVubWFuYWdlZFByb3BlcnR5VG9Ob2RlKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgICAvLyBJdCBpcyBhIGp1ZGdtZW50IGNhbGwgdGhhdCByZXNldHRpbmcgcHJpbWl0aXZlcyBpc1xuICAgICAgLy8gXCJiYWRcIiBhbmQgcmVzZXR0aW5ncyBvYmplY3RzIGlzIGFsc28gXCJnb29kXCI7IGFsdGVybmF0aXZlbHkgd2UgY291bGRcbiAgICAgIC8vIGltcGxlbWVudCBhIHdoaXRlbGlzdCBvZiB0YWcgJiBwcm9wZXJ0eSB2YWx1ZXMgdGhhdCBzaG91bGQgbmV2ZXJcbiAgICAgIC8vIGJlIHJlc2V0IChlLmcuIDxpbnB1dD4udmFsdWUgJiYgPHNlbGVjdD4udmFsdWUpXG4gICAgICBpZiAodmFsdWUgIT09IG5vZGVbcHJvcF0gfHwgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIG5vZGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGBQcm9wZXJ0aWVzQ2hhbmdlZGAgaW1wbGVtZW50YXRpb24gdG8gaW50cm9kdWNlIHNwZWNpYWxcbiAgICAgKiBkaXJ0eSBjaGVjayBsb2dpYyBkZXBlbmRpbmcgb24gdGhlIHByb3BlcnR5ICYgdmFsdWUgYmVpbmcgc2V0OlxuICAgICAqXG4gICAgICogMS4gQW55IHZhbHVlIHNldCB0byBhIHBhdGggKGUuZy4gJ29iai5wcm9wJzogNDIgb3IgJ29iai5wcm9wJzogey4uLn0pXG4gICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFUZW1wYCwgZGlydHkgY2hlY2tlZCBhZ2FpbnN0IGBfX2RhdGFUZW1wYFxuICAgICAqIDIuIE9iamVjdCBzZXQgdG8gc2ltcGxlIHByb3BlcnR5IChlLmcuICdwcm9wJzogey4uLn0pXG4gICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFUZW1wYCBhbmQgYF9fZGF0YWAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdFxuICAgICAqICAgIGBfX2RhdGFUZW1wYCBieSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGBfc2hvdWxkUHJvcGVydHlDaGFuZ2VgXG4gICAgICogMy4gUHJpbWl0aXZlIHZhbHVlIHNldCB0byBzaW1wbGUgcHJvcGVydHkgKGUuZy4gJ3Byb3AnOiA0MilcbiAgICAgKiAgICBTdG9yZWQgaW4gYF9fZGF0YWAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBgX19kYXRhYFxuICAgICAqXG4gICAgICogVGhlIGRpcnR5LWNoZWNrIGlzIGltcG9ydGFudCB0byBwcmV2ZW50IGN5Y2xlcyBkdWUgdG8gdHdvLXdheVxuICAgICAqIG5vdGlmaWNhdGlvbiwgYnV0IHBhdGhzIGFuZCBvYmplY3RzIGFyZSBvbmx5IGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBhbnlcbiAgICAgKiBwcmV2aW91cyB2YWx1ZSBzZXQgZHVyaW5nIHRoaXMgdHVybiB2aWEgYSBcInRlbXBvcmFyeSBjYWNoZVwiIHRoYXQgaXNcbiAgICAgKiBjbGVhcmVkIHdoZW4gdGhlIGxhc3QgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgZXhpdHMuIFRoaXMgaXMgc286XG4gICAgICogYS4gYW55IGNhY2hlZCBhcnJheSBwYXRocyAoZS5nLiAnYXJyYXkuMy5wcm9wJykgbWF5IGJlIGludmFsaWRhdGVkXG4gICAgICogICAgZHVlIHRvIGFycmF5IG11dGF0aW9ucyBsaWtlIHNoaWZ0L3Vuc2hpZnQvc3BsaWNlOyB0aGlzIGlzIGZpbmVcbiAgICAgKiAgICBzaW5jZSBwYXRoIGNoYW5nZXMgYXJlIGRpcnR5LWNoZWNrZWQgYXQgdXNlciBlbnRyeSBwb2ludHMgbGlrZSBgc2V0YFxuICAgICAqIGIuIGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIG9ubHkgbGFzdHMgb25lIHR1cm4gdG8gYWxsb3cgdGhlIHVzZXJcbiAgICAgKiAgICB0byBtdXRhdGUgdGhlIG9iamVjdCBpbi1wbGFjZSBhbmQgcmUtc2V0IGl0IHdpdGggdGhlIHNhbWUgaWRlbnRpdHlcbiAgICAgKiAgICBhbmQgaGF2ZSBhbGwgc3ViLXByb3BlcnRpZXMgcmUtcHJvcGFnYXRlZCBpbiBhIHN1YnNlcXVlbnQgdHVybi5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wIGNhY2hlIGlzIG5vdCBuZWNlc3NhcmlseSBzdWZmaWNpZW50IHRvIHByZXZlbnQgaW52YWxpZCBhcnJheVxuICAgICAqIHBhdGhzLCBzaW5jZSBhIHNwbGljZSBjYW4gaGFwcGVuIGR1cmluZyB0aGUgc2FtZSB0dXJuICh3aXRoIHBhdGhvbG9naWNhbFxuICAgICAqIHVzZXIgY29kZSk7IHdlIGNvdWxkIGludHJvZHVjZSBhIFwiZml4dXBcIiBmb3IgdGVtcG9yYXJpbHkgY2FjaGVkIGFycmF5XG4gICAgICogcGF0aHMgaWYgbmVlZGVkOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyL2lzc3Vlcy80MjI3XG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNob3VsZE5vdGlmeSBUcnVlIGlmIHByb3BlcnR5IHNob3VsZCBmaXJlIG5vdGlmaWNhdGlvblxuICAgICAqICAgZXZlbnQgKGFwcGxpZXMgb25seSBmb3IgYG5vdGlmeTogdHJ1ZWAgcHJvcGVydGllcylcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgKi9cbiAgICBfc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSwgc2hvdWxkTm90aWZ5KSB7XG4gICAgICBsZXQgaXNQYXRoID0gdGhpcy5fX2RhdGFIYXNQYXRocyAmJiBpc1BhdGgkMChwcm9wZXJ0eSk7XG4gICAgICBsZXQgcHJldlByb3BzID0gaXNQYXRoID8gdGhpcy5fX2RhdGFUZW1wIDogdGhpcy5fX2RhdGE7XG4gICAgICBpZiAodGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBwcmV2UHJvcHNbcHJvcGVydHldKSkge1xuICAgICAgICBpZiAoIXRoaXMuX19kYXRhUGVuZGluZykge1xuICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIG9sZCBpcyBjYXB0dXJlZCBmcm9tIHRoZSBsYXN0IHR1cm5cbiAgICAgICAgaWYgKCEocHJvcGVydHkgaW4gdGhpcy5fX2RhdGFPbGQpKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFPbGRbcHJvcGVydHldID0gdGhpcy5fX2RhdGFbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhdGhzIGFyZSBzdG9yZWQgaW4gdGVtcG9yYXJ5IGNhY2hlIChjbGVhcmVkIGF0IGVuZCBvZiB0dXJuKSxcbiAgICAgICAgLy8gd2hpY2ggaXMgdXNlZCBmb3IgZGlydHktY2hlY2tpbmcsIGFsbCBvdGhlcnMgc3RvcmVkIGluIF9fZGF0YVxuICAgICAgICBpZiAoaXNQYXRoKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFUZW1wW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19kYXRhW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsbCBjaGFuZ2VzIGdvIGludG8gcGVuZGluZyBwcm9wZXJ0eSBiYWcsIHBhc3NlZCB0byBfcHJvcGVydGllc0NoYW5nZWRcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAvLyBUcmFjayBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIG5vdGlmeSBzZXBhcmF0ZWx5XG4gICAgICAgIGlmIChpc1BhdGggfHwgKHRoaXNbVFlQRVMuTk9USUZZXSAmJiB0aGlzW1RZUEVTLk5PVElGWV1bcHJvcGVydHldKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnkgPSB0aGlzLl9fZGF0YVRvTm90aWZ5IHx8IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnlbcHJvcGVydHldID0gc2hvdWxkTm90aWZ5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGVuc3VyZSBhbGwgYWNjZXNzb3JzIHNldCBgc2hvdWxkTm90aWZ5YFxuICAgICAqIHRvIHRydWUsIGZvciBwZXItcHJvcGVydHkgbm90aWZpY2F0aW9uIHRyYWNraW5nLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlLCB0cnVlKSkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcmAncyBkZWZhdWx0IGFzeW5jIHF1ZXVpbmcgb2ZcbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYDogaWYgYF9fZGF0YVJlYWR5YCBpcyBmYWxzZSAoaGFzIG5vdCB5ZXQgYmVlblxuICAgICAqIG1hbnVhbGx5IGZsdXNoZWQpLCB0aGUgZnVuY3Rpb24gbm8tb3BzOyBvdGhlcndpc2UgZmx1c2hlc1xuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIHN5bmNocm9ub3VzbHkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9pbnZhbGlkYXRlUHJvcGVydGllcygpIHtcbiAgICAgIGlmICh0aGlzLl9fZGF0YVJlYWR5KSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVucXVldWVzIHRoZSBnaXZlbiBjbGllbnQgb24gYSBsaXN0IG9mIHBlbmRpbmcgY2xpZW50cywgd2hvc2VcbiAgICAgKiBwZW5kaW5nIHByb3BlcnR5IGNoYW5nZXMgY2FuIGxhdGVyIGJlIGZsdXNoZWQgdmlhIGEgY2FsbCB0b1xuICAgICAqIGBfZmx1c2hDbGllbnRzYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnQgUHJvcGVydHlFZmZlY3RzIGNsaWVudCB0byBlbnF1ZXVlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2VucXVldWVDbGllbnQoY2xpZW50KSB7XG4gICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzID0gdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cyB8fCBbXTtcbiAgICAgIGlmIChjbGllbnQgIT09IHRoaXMpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cy5wdXNoKGNsaWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIHN1cGVyY2xhc3MgaW1wbGVtZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfZmx1c2hQcm9wZXJ0aWVzKCkge1xuICAgICAgdGhpcy5fX2RhdGFDb3VudGVyKys7XG4gICAgICBzdXBlci5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB0aGlzLl9fZGF0YUNvdW50ZXItLTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbHVzaGVzIGFueSBjbGllbnRzIHByZXZpb3VzbHkgZW5xdWV1ZWQgdmlhIGBfZW5xdWV1ZUNsaWVudGAsIGNhdXNpbmdcbiAgICAgKiB0aGVpciBgX2ZsdXNoUHJvcGVydGllc2AgbWV0aG9kIHRvIHJ1bi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9mbHVzaENsaWVudHMoKSB7XG4gICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVhZHlDbGllbnRzKCk7XG4gICAgICAgIC8vIE92ZXJyaWRlIHBvaW50IHdoZXJlIGFjY2Vzc29ycyBhcmUgdHVybmVkIG9uOyBpbXBvcnRhbnRseSxcbiAgICAgICAgLy8gdGhpcyBpcyBhZnRlciBjbGllbnRzIGhhdmUgZnVsbHkgcmVhZGllZCwgcHJvdmlkaW5nIGEgZ3VhcmFudGVlXG4gICAgICAgIC8vIHRoYXQgYW55IHByb3BlcnR5IGVmZmVjdHMgb2NjdXIgb25seSBhZnRlciBhbGwgY2xpZW50cyBhcmUgcmVhZHkuXG4gICAgICAgIHRoaXMuX19kYXRhUmVhZHkgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2VuYWJsZU9yRmx1c2hDbGllbnRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTk9URTogV2UgZW5zdXJlIGNsaWVudHMgZWl0aGVyIGVuYWJsZSBvciBmbHVzaCBhcyBhcHByb3ByaWF0ZS4gVGhpc1xuICAgIC8vIGhhbmRsZXMgdHdvIGNvcm5lciBjYXNlczpcbiAgICAvLyAoMSkgY2xpZW50cyBmbHVzaCBwcm9wZXJseSB3aGVuIGNvbm5lY3RlZC9lbmFibGVkIGJlZm9yZSB0aGUgaG9zdFxuICAgIC8vIGVuYWJsZXM7IGUuZy5cbiAgICAvLyAgIChhKSBUZW1wbGF0aXplIHN0YW1wcyB3aXRoIG5vIHByb3BlcnRpZXMgYW5kIGRvZXMgbm90IGZsdXNoIGFuZFxuICAgIC8vICAgKGIpIHRoZSBpbnN0YW5jZSBpcyBpbnNlcnRlZCBpbnRvIGRvbSBhbmRcbiAgICAvLyAgIChjKSB0aGVuIHRoZSBpbnN0YW5jZSBmbHVzaGVzLlxuICAgIC8vICgyKSBjbGllbnRzIGVuYWJsZSBwcm9wZXJseSB3aGVuIG5vdCBjb25uZWN0ZWQvZW5hYmxlZCB3aGVuIHRoZSBob3N0XG4gICAgLy8gZmx1c2hlczsgZS5nLlxuICAgIC8vICAgKGEpIGEgdGVtcGxhdGUgaXMgcnVudGltZSBzdGFtcGVkIGFuZCBub3QgeWV0IGNvbm5lY3RlZC9lbmFibGVkXG4gICAgLy8gICAoYikgYSBob3N0IHNldHMgYSBwcm9wZXJ0eSwgY2F1c2luZyBzdGFtcGVkIGRvbSB0byBmbHVzaFxuICAgIC8vICAgKGMpIHRoZSBzdGFtcGVkIGRvbSBlbmFibGVzLlxuICAgIF9fZW5hYmxlT3JGbHVzaENsaWVudHMoKSB7XG4gICAgICBsZXQgY2xpZW50cyA9IHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHM7XG4gICAgICBpZiAoY2xpZW50cykge1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgY2xpZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBjbGllbnQgPSBjbGllbnRzW2ldO1xuICAgICAgICAgIGlmICghY2xpZW50Ll9fZGF0YUVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNsaWVudC5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpZW50Ll9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICAgIGNsaWVudC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbnkgaW5pdGlhbCBzZXR1cCBvbiBjbGllbnQgZG9tLiBDYWxsZWQgYmVmb3JlIHRoZSBmaXJzdFxuICAgICAqIGBfZmx1c2hQcm9wZXJ0aWVzYCBjYWxsIG9uIGNsaWVudCBkb20gYW5kIGJlZm9yZSBhbnkgZWxlbWVudFxuICAgICAqIG9ic2VydmVycyBhcmUgY2FsbGVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3JlYWR5Q2xpZW50cygpIHtcbiAgICAgIHRoaXMuX19lbmFibGVPckZsdXNoQ2xpZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBiYWcgb2YgcHJvcGVydHkgY2hhbmdlcyB0byB0aGlzIGluc3RhbmNlLCBhbmRcbiAgICAgKiBzeW5jaHJvbm91c2x5IHByb2Nlc3NlcyBhbGwgZWZmZWN0cyBvZiB0aGUgcHJvcGVydGllcyBhcyBhIGJhdGNoLlxuICAgICAqXG4gICAgICogUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzaW1wbGUgcHJvcGVydGllcywgbm90IHBhdGhzLiAgQmF0Y2hlZFxuICAgICAqIHBhdGggcHJvcGFnYXRpb24gaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2Ygb25lIG9yIG1vcmUga2V5LXZhbHVlIHBhaXJzIHdob3NlIGtleSBpc1xuICAgICAqICAgYSBwcm9wZXJ0eSBhbmQgdmFsdWUgaXMgdGhlIG5ldyB2YWx1ZSB0byBzZXQgZm9yIHRoYXQgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gc2V0UmVhZE9ubHkgV2hlbiB0cnVlLCBhbnkgcHJpdmF0ZSB2YWx1ZXMgc2V0IGluXG4gICAgICogICBgcHJvcHNgIHdpbGwgYmUgc2V0LiBCeSBkZWZhdWx0LCBgc2V0UHJvcGVydGllc2Agd2lsbCBub3Qgc2V0XG4gICAgICogICBgcmVhZE9ubHk6IHRydWVgIHJvb3QgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZXRQcm9wZXJ0aWVzKHByb3BzLCBzZXRSZWFkT25seSkge1xuICAgICAgZm9yIChsZXQgcGF0aCBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2V0UmVhZE9ubHkgfHwgIXRoaXNbVFlQRVMuUkVBRF9PTkxZXSB8fCAhdGhpc1tUWVBFUy5SRUFEX09OTFldW3BhdGhdKSB7XG4gICAgICAgICAgLy9UT0RPKGtzY2hhYWYpOiBleHBsaWNpdGx5IGRpc2FsbG93IHBhdGhzIGluIHNldFByb3BlcnR5P1xuICAgICAgICAgIC8vIHdpbGRjYXJkIG9ic2VydmVycyBjdXJyZW50bHkgb25seSBwYXNzIHRoZSBmaXJzdCBjaGFuZ2VkIHBhdGhcbiAgICAgICAgICAvLyBpbiB0aGUgYGluZm9gIG9iamVjdCwgYW5kIHlvdSBjb3VsZCBkbyBzb21lIG9kZCB0aGluZ3MgYmF0Y2hpbmdcbiAgICAgICAgICAvLyBwYXRocywgZS5nLiB7J2Zvby5iYXInOiB7Li4ufSwgJ2Zvbyc6IG51bGx9XG4gICAgICAgICAgdGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHByb3BzW3BhdGhdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBzbyB0aGF0IHByb3BlcnR5IGFjY2Vzc29yXG4gICAgICogc2lkZSBlZmZlY3RzIGFyZSBub3QgZW5hYmxlZCB1bnRpbCBhZnRlciBjbGllbnQgZG9tIGlzIGZ1bGx5IHJlYWR5LlxuICAgICAqIEFsc28gY2FsbHMgYF9mbHVzaENsaWVudHNgIGNhbGxiYWNrIHRvIGVuc3VyZSBjbGllbnQgZG9tIGlzIGVuYWJsZWRcbiAgICAgKiB0aGF0IHdhcyBub3QgZW5hYmxlZCBhcyBhIHJlc3VsdCBvZiBmbHVzaGluZyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICByZWFkeSgpIHtcbiAgICAgIC8vIEl0IGlzIGltcG9ydGFudCB0aGF0IGBzdXBlci5yZWFkeSgpYCBpcyBub3QgY2FsbGVkIGhlcmUgYXMgaXRcbiAgICAgIC8vIGltbWVkaWF0ZWx5IHR1cm5zIG9uIGFjY2Vzc29ycy4gSW5zdGVhZCwgd2Ugd2FpdCB1bnRpbCBgcmVhZHlDbGllbnRzYFxuICAgICAgLy8gdG8gZW5hYmxlIGFjY2Vzc29ycyB0byBwcm92aWRlIGEgZ3VhcmFudGVlIHRoYXQgY2xpZW50cyBhcmUgcmVhZHlcbiAgICAgIC8vIGJlZm9yZSBwcm9jZXNzaW5nIGFueSBhY2Nlc3NvcnMgc2lkZSBlZmZlY3RzLlxuICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICAvLyBJZiBubyBkYXRhIHdhcyBwZW5kaW5nLCBgX2ZsdXNoUHJvcGVydGllc2Agd2lsbCBub3QgYGZsdXNoQ2xpZW50c2BcbiAgICAgIC8vIHNvIGVuc3VyZSB0aGlzIGlzIGRvbmUuXG4gICAgICBpZiAoIXRoaXMuX19kYXRhQ2xpZW50c1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoQ2xpZW50cygpO1xuICAgICAgfVxuICAgICAgLy8gQmVmb3JlIHJlYWR5LCBjbGllbnQgbm90aWZpY2F0aW9ucyBkbyBub3QgdHJpZ2dlciBfZmx1c2hQcm9wZXJ0aWVzLlxuICAgICAgLy8gVGhlcmVmb3JlIGEgZmx1c2ggaXMgbmVjZXNzYXJ5IGhlcmUgaWYgZGF0YSBoYXMgYmVlbiBzZXQuXG4gICAgICBpZiAodGhpcy5fX2RhdGFQZW5kaW5nKSB7XG4gICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgYFByb3BlcnR5QWNjZXNzb3JzYCdzIHByb3BlcnRpZXMgY2hhbmdlZCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIFJ1bnMgZWFjaCBjbGFzcyBvZiBlZmZlY3RzIGZvciB0aGUgYmF0Y2ggb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIGluXG4gICAgICogYSBzcGVjaWZpYyBvcmRlciAoY29tcHV0ZSwgcHJvcGFnYXRlLCByZWZsZWN0LCBvYnNlcnZlLCBub3RpZnkpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBwcm9wZXJ0aWVzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIGluIGBjaGFuZ2VkUHJvcHNgXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcHJvcGVydGllc0NoYW5nZWQoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7XG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBsZXQgYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNoYW5nZWRQcm9wcyB8fCB7fSk7XG4gICAgICAvLyB3aW5kb3cuZGVidWcgJiYgY29uc29sZS5ncm91cCh0aGlzLmxvY2FsTmFtZSArICcjJyArIHRoaXMuaWQgKyAnOiAnICsgYyk7XG4gICAgICAvLyBpZiAod2luZG93LmRlYnVnKSB7IGRlYnVnZ2VyOyB9XG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICBsZXQgaGFzUGF0aHMgPSB0aGlzLl9fZGF0YUhhc1BhdGhzO1xuICAgICAgdGhpcy5fX2RhdGFIYXNQYXRocyA9IGZhbHNlO1xuICAgICAgLy8gQ29tcHV0ZSBwcm9wZXJ0aWVzXG4gICAgICBydW5Db21wdXRlZEVmZmVjdHModGhpcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gQ2xlYXIgbm90aWZ5IHByb3BlcnRpZXMgcHJpb3IgdG8gcG9zc2libGUgcmVlbnRyeSAocHJvcGFnYXRlLCBvYnNlcnZlKSxcbiAgICAgIC8vIGJ1dCBhZnRlciBjb21wdXRpbmcgZWZmZWN0cyBoYXZlIGEgY2hhbmNlIHRvIGFkZCB0byB0aGVtXG4gICAgICBsZXQgbm90aWZ5UHJvcHMgPSB0aGlzLl9fZGF0YVRvTm90aWZ5O1xuICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IG51bGw7XG4gICAgICAvLyBQcm9wYWdhdGUgcHJvcGVydGllcyB0byBjbGllbnRzXG4gICAgICB0aGlzLl9wcm9wYWdhdGVQcm9wZXJ0eUNoYW5nZXMoY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gRmx1c2ggY2xpZW50c1xuICAgICAgdGhpcy5fZmx1c2hDbGllbnRzKCk7XG4gICAgICAvLyBSZWZsZWN0IHByb3BlcnRpZXNcbiAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5SRUZMRUNUXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gT2JzZXJ2ZSBwcm9wZXJ0aWVzXG4gICAgICBydW5FZmZlY3RzKHRoaXMsIHRoaXNbVFlQRVMuT0JTRVJWRV0sIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgIC8vIE5vdGlmeSBwcm9wZXJ0aWVzIHRvIGhvc3RcbiAgICAgIGlmIChub3RpZnlQcm9wcykge1xuICAgICAgICBydW5Ob3RpZnlFZmZlY3RzKHRoaXMsIG5vdGlmeVByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICB9XG4gICAgICAvLyBDbGVhciB0ZW1wb3JhcnkgY2FjaGUgYXQgZW5kIG9mIHR1cm5cbiAgICAgIGlmICh0aGlzLl9fZGF0YUNvdW50ZXIgPT0gMSkge1xuICAgICAgICB0aGlzLl9fZGF0YVRlbXAgPSB7fTtcbiAgICAgIH1cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIHdpbmRvdy5kZWJ1ZyAmJiBjb25zb2xlLmdyb3VwRW5kKHRoaXMubG9jYWxOYW1lICsgJyMnICsgdGhpcy5pZCArICc6ICcgKyBjKTtcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdG8gcHJvcGFnYXRlIGFueSBwcm9wZXJ0eSBjaGFuZ2VzIHRvIHN0YW1wZWQgdGVtcGxhdGUgbm9kZXNcbiAgICAgKiBtYW5hZ2VkIGJ5IHRoaXMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIGNoYW5nZWQgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3Byb3BhZ2F0ZVByb3BlcnR5Q2hhbmdlcyhjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICAgICAgaWYgKHRoaXNbVFlQRVMuUFJPUEFHQVRFXSkge1xuICAgICAgICBydW5FZmZlY3RzKHRoaXMsIHRoaXNbVFlQRVMuUFJPUEFHQVRFXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgfVxuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IHRoaXMuX190ZW1wbGF0ZUluZm87XG4gICAgICB3aGlsZSAodGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcyxcbiAgICAgICAgICBoYXNQYXRocywgdGVtcGxhdGVJbmZvLm5vZGVMaXN0KTtcbiAgICAgICAgdGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm87XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxpYXNlcyBvbmUgZGF0YSBwYXRoIGFzIGFub3RoZXIsIHN1Y2ggdGhhdCBwYXRoIG5vdGlmaWNhdGlvbnMgZnJvbSBvbmVcbiAgICAgKiBhcmUgcm91dGVkIHRvIHRoZSBvdGhlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSB0byBUYXJnZXQgcGF0aCB0byBsaW5rLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBmcm9tIFNvdXJjZSBwYXRoIHRvIGxpbmsuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbGlua1BhdGhzKHRvLCBmcm9tKSB7XG4gICAgICB0byA9IG5vcm1hbGl6ZSh0byk7XG4gICAgICBmcm9tID0gbm9ybWFsaXplKGZyb20pO1xuICAgICAgdGhpcy5fX2RhdGFMaW5rZWRQYXRocyA9IHRoaXMuX19kYXRhTGlua2VkUGF0aHMgfHwge307XG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzW3RvXSA9IGZyb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGRhdGEgcGF0aCBhbGlhcyBwcmV2aW91c2x5IGVzdGFibGlzaGVkIHdpdGggYF9saW5rUGF0aHNgLlxuICAgICAqXG4gICAgICogTm90ZSwgdGhlIHBhdGggdG8gdW5saW5rIHNob3VsZCBiZSB0aGUgdGFyZ2V0IChgdG9gKSB1c2VkIHdoZW5cbiAgICAgKiBsaW5raW5nIHRoZSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFRhcmdldCBwYXRoIHRvIHVubGluay5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICB1bmxpbmtQYXRocyhwYXRoKSB7XG4gICAgICBwYXRoID0gbm9ybWFsaXplKHBhdGgpO1xuICAgICAgaWYgKHRoaXMuX19kYXRhTGlua2VkUGF0aHMpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX19kYXRhTGlua2VkUGF0aHNbcGF0aF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90aWZ5IHRoYXQgYW4gYXJyYXkgaGFzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIHRoaXMuaXRlbXMgPSBbIHtuYW1lOiAnSmltJ30sIHtuYW1lOiAnVG9kZCd9LCB7bmFtZTogJ0JpbGwnfSBdO1xuICAgICAqICAgICAuLi5cbiAgICAgKiAgICAgdGhpcy5pdGVtcy5zcGxpY2UoMSwgMSwge25hbWU6ICdTYW0nfSk7XG4gICAgICogICAgIHRoaXMuaXRlbXMucHVzaCh7bmFtZTogJ0JvYid9KTtcbiAgICAgKiAgICAgdGhpcy5ub3RpZnlTcGxpY2VzKCdpdGVtcycsIFtcbiAgICAgKiAgICAgICB7IGluZGV4OiAxLCByZW1vdmVkOiBbe25hbWU6ICdUb2RkJ31dLCBhZGRlZENvdW50OiAxLCBvYmplY3Q6IHRoaXMuaXRlbXMsIHR5cGU6ICdzcGxpY2UnIH0sXG4gICAgICogICAgICAgeyBpbmRleDogMywgcmVtb3ZlZDogW10sIGFkZGVkQ291bnQ6IDEsIG9iamVjdDogdGhpcy5pdGVtcywgdHlwZTogJ3NwbGljZSd9XG4gICAgICogICAgIF0pO1xuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0aGF0IHNob3VsZCBiZSBub3RpZmllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzcGxpY2VzIEFycmF5IG9mIHNwbGljZSByZWNvcmRzIGluZGljYXRpbmcgb3JkZXJlZFxuICAgICAqICAgY2hhbmdlcyB0aGF0IG9jY3VycmVkIHRvIHRoZSBhcnJheS4gRWFjaCByZWNvcmQgc2hvdWxkIGhhdmUgdGhlXG4gICAgICogICBmb2xsb3dpbmcgZmllbGRzOlxuICAgICAqICAgICogaW5kZXg6IGluZGV4IGF0IHdoaWNoIHRoZSBjaGFuZ2Ugb2NjdXJyZWRcbiAgICAgKiAgICAqIHJlbW92ZWQ6IGFycmF5IG9mIGl0ZW1zIHRoYXQgd2VyZSByZW1vdmVkIGZyb20gdGhpcyBpbmRleFxuICAgICAqICAgICogYWRkZWRDb3VudDogbnVtYmVyIG9mIG5ldyBpdGVtcyBhZGRlZCBhdCB0aGlzIGluZGV4XG4gICAgICogICAgKiBvYmplY3Q6IGEgcmVmZXJlbmNlIHRvIHRoZSBhcnJheSBpbiBxdWVzdGlvblxuICAgICAqICAgICogdHlwZTogdGhlIHN0cmluZyBsaXRlcmFsICdzcGxpY2UnXG4gICAgICpcbiAgICAgKiAgIE5vdGUgdGhhdCBzcGxpY2UgcmVjb3JkcyBfbXVzdF8gYmUgbm9ybWFsaXplZCBzdWNoIHRoYXQgdGhleSBhcmVcbiAgICAgKiAgIHJlcG9ydGVkIGluIGluZGV4IG9yZGVyIChyYXcgcmVzdWx0cyBmcm9tIGBPYmplY3Qub2JzZXJ2ZWAgYXJlIG5vdFxuICAgICAqICAgb3JkZXJlZCBhbmQgbXVzdCBiZSBub3JtYWxpemVkL21lcmdlZCBiZWZvcmUgbm90aWZ5aW5nKS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAqL1xuICAgIG5vdGlmeVNwbGljZXMocGF0aCwgc3BsaWNlcykge1xuICAgICAgbGV0IGluZm8gPSB7cGF0aDogJyd9O1xuICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oZ2V0JDAodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbm90aWZ5U3BsaWNlcyh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBzcGxpY2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHJlYWRpbmcgYSB2YWx1ZSBmcm9tIGEgcGF0aC5cbiAgICAgKlxuICAgICAqIE5vdGUsIGlmIGFueSBwYXJ0IGluIHRoZSBwYXRoIGlzIHVuZGVmaW5lZCwgdGhpcyBtZXRob2QgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgICh0aGlzIG1ldGhvZCBkb2VzIG5vdCB0aHJvdyB3aGVuIGRlcmVmZXJlbmNpbmcgdW5kZWZpbmVkXG4gICAgICogcGF0aHMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfCFBcnJheTwoc3RyaW5nfG51bWJlcik+KX0gcGF0aCBQYXRoIHRvIHRoZSB2YWx1ZVxuICAgICAqICAgdG8gcmVhZC4gIFRoZSBwYXRoIG1heSBiZSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcgKGUuZy4gYGZvby5iYXIuYmF6YClcbiAgICAgKiAgIG9yIGFuIGFycmF5IG9mIHBhdGggcGFydHMgKGUuZy4gYFsnZm9vLmJhcicsICdiYXonXWApLiAgTm90ZSB0aGF0XG4gICAgICogICBicmFja2V0ZWQgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQ7IHN0cmluZy1iYXNlZCBwYXRoIHBhcnRzXG4gICAgICogICAqbXVzdCogYmUgc2VwYXJhdGVkIGJ5IGRvdHMuICBOb3RlIHRoYXQgd2hlbiBkZXJlZmVyZW5jaW5nIGFycmF5XG4gICAgICogICBpbmRpY2VzLCB0aGUgaW5kZXggbWF5IGJlIHVzZWQgYXMgYSBkb3R0ZWQgcGFydCBkaXJlY3RseVxuICAgICAqICAgKGUuZy4gYHVzZXJzLjEyLm5hbWVgIG9yIGBbJ3VzZXJzJywgMTIsICduYW1lJ11gKS5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHJvb3QgUm9vdCBvYmplY3QgZnJvbSB3aGljaCB0aGUgcGF0aCBpcyBldmFsdWF0ZWQuXG4gICAgICogQHJldHVybiB7Kn0gVmFsdWUgYXQgdGhlIHBhdGgsIG9yIGB1bmRlZmluZWRgIGlmIGFueSBwYXJ0IG9mIHRoZSBwYXRoXG4gICAgICogICBpcyB1bmRlZmluZWQuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldChwYXRoLCByb290KSB7XG4gICAgICByZXR1cm4gZ2V0JDAocm9vdCB8fCB0aGlzLCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHNldHRpbmcgYSB2YWx1ZSB0byBhIHBhdGggYW5kIG5vdGlmeWluZyBhbnlcbiAgICAgKiBlbGVtZW50cyBib3VuZCB0byB0aGUgc2FtZSBwYXRoLlxuICAgICAqXG4gICAgICogTm90ZSwgaWYgYW55IHBhcnQgaW4gdGhlIHBhdGggZXhjZXB0IGZvciB0aGUgbGFzdCBpcyB1bmRlZmluZWQsXG4gICAgICogdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nICh0aGlzIG1ldGhvZCBkb2VzIG5vdCB0aHJvdyB3aGVuXG4gICAgICogZGVyZWZlcmVuY2luZyB1bmRlZmluZWQgcGF0aHMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfCFBcnJheTwoc3RyaW5nfG51bWJlcik+KX0gcGF0aCBQYXRoIHRvIHRoZSB2YWx1ZVxuICAgICAqICAgdG8gd3JpdGUuICBUaGUgcGF0aCBtYXkgYmUgc3BlY2lmaWVkIGFzIGEgc3RyaW5nIChlLmcuIGAnZm9vLmJhci5iYXonYClcbiAgICAgKiAgIG9yIGFuIGFycmF5IG9mIHBhdGggcGFydHMgKGUuZy4gYFsnZm9vLmJhcicsICdiYXonXWApLiAgTm90ZSB0aGF0XG4gICAgICogICBicmFja2V0ZWQgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQ7IHN0cmluZy1iYXNlZCBwYXRoIHBhcnRzXG4gICAgICogICAqbXVzdCogYmUgc2VwYXJhdGVkIGJ5IGRvdHMuICBOb3RlIHRoYXQgd2hlbiBkZXJlZmVyZW5jaW5nIGFycmF5XG4gICAgICogICBpbmRpY2VzLCB0aGUgaW5kZXggbWF5IGJlIHVzZWQgYXMgYSBkb3R0ZWQgcGFydCBkaXJlY3RseVxuICAgICAqICAgKGUuZy4gYCd1c2Vycy4xMi5uYW1lJ2Agb3IgYFsndXNlcnMnLCAxMiwgJ25hbWUnXWApLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0IGF0IHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHJvb3QgUm9vdCBvYmplY3QgZnJvbSB3aGljaCB0aGUgcGF0aCBpcyBldmFsdWF0ZWQuXG4gICAgICogICBXaGVuIHNwZWNpZmllZCwgbm8gbm90aWZpY2F0aW9uIHdpbGwgb2NjdXIuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgKi9cbiAgICBzZXQocGF0aCwgdmFsdWUsIHJvb3QpIHtcbiAgICAgIGlmIChyb290KSB7XG4gICAgICAgIHNldCQwKHJvb3QsIHBhdGgsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpc1tUWVBFUy5SRUFEX09OTFldIHx8ICF0aGlzW1RZUEVTLlJFQURfT05MWV1bLyoqIEB0eXBlIHtzdHJpbmd9ICovKHBhdGgpXSkge1xuICAgICAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgdmFsdWUsIHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgaXRlbXMgb250byB0aGUgZW5kIG9mIHRoZSBhcnJheSBhdCB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnB1c2hgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBwdXNoIG9udG8gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IE5ldyBsZW5ndGggb2YgdGhlIGFycmF5LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwdXNoKHBhdGgsIC4uLml0ZW1zKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSovKGdldCQwKHRoaXMsIHBhdGgsIGluZm8pKTtcbiAgICAgIGxldCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICBsZXQgcmV0ID0gYXJyYXkucHVzaCguLi5pdGVtcyk7XG4gICAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBsZW4sIGl0ZW1zLmxlbmd0aCwgW10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSB0aGUgZW5kIG9mIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUucG9wYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEByZXR1cm4geyp9IEl0ZW0gdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcG9wKHBhdGgpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovKGdldCQwKHRoaXMsIHBhdGgsIGluZm8pKTtcbiAgICAgIGxldCBoYWRMZW5ndGggPSBCb29sZWFuKGFycmF5Lmxlbmd0aCk7XG4gICAgICBsZXQgcmV0ID0gYXJyYXkucG9wKCk7XG4gICAgICBpZiAoaGFkTGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBhcnJheS5sZW5ndGgsIDAsIFtyZXRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRpbmcgZnJvbSB0aGUgc3RhcnQgaW5kZXggc3BlY2lmaWVkLCByZW1vdmVzIDAgb3IgbW9yZSBpdGVtc1xuICAgICAqIGZyb20gdGhlIGFycmF5IGFuZCBpbnNlcnRzIDAgb3IgbW9yZSBuZXcgaXRlbXMgaW4gdGhlaXIgcGxhY2UuXG4gICAgICpcbiAgICAgKiBUaGUgYXJndW1lbnRzIGFmdGVyIGBwYXRoYCBhbmQgcmV0dXJuIHZhbHVlIG1hdGNoIHRoYXQgb2ZcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgSW5kZXggZnJvbSB3aGljaCB0byBzdGFydCByZW1vdmluZy9pbnNlcnRpbmcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGV0ZUNvdW50IE51bWJlciBvZiBpdGVtcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBpdGVtcyBJdGVtcyB0byBpbnNlcnQgaW50byBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgcmVtb3ZlZCBpdGVtcy5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc3BsaWNlKHBhdGgsIHN0YXJ0LCBkZWxldGVDb3VudCwgLi4uaXRlbXMpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGggOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQkMCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICAvLyBOb3JtYWxpemUgZmFuY3kgbmF0aXZlIHNwbGljZSBoYW5kbGluZyBvZiBjcmF6eSBzdGFydCB2YWx1ZXNcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBhcnJheS5sZW5ndGggLSBNYXRoLmZsb29yKC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCk7XG4gICAgICB9XG4gICAgICAvLyBhcnJheS5zcGxpY2UgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzXG4gICAgICAvLyB5b3UgcGFzcyBpbi4gVGhlcmVmb3JlLCBhcnJheS5zcGxpY2UoMCkgYW5kIGFycmF5LnNwbGljZSgwLCB1bmRlZmluZWQpXG4gICAgICAvLyBkbyBkaWZmZXJlbnQgdGhpbmdzLiBJbiB0aGUgZm9ybWVyLCB0aGUgd2hvbGUgYXJyYXkgaXMgY2xlYXJlZC4gSW4gdGhlXG4gICAgICAvLyBsYXR0ZXIsIG5vIGl0ZW1zIGFyZSByZW1vdmVkLlxuICAgICAgLy8gVGhpcyBtZWFucyB0aGF0IHdlIG5lZWQgdG8gZGV0ZWN0IHdoZXRoZXIgMS4gb25lIG9mIHRoZSBhcmd1bWVudHNcbiAgICAgIC8vIGlzIGFjdHVhbGx5IHBhc3NlZCBpbiBhbmQgdGhlbiAyLiBkZXRlcm1pbmUgaG93IG1hbnkgYXJndW1lbnRzXG4gICAgICAvLyB3ZSBzaG91bGQgcGFzcyBvbiB0byB0aGUgbmF0aXZlIGFycmF5LnNwbGljZVxuICAgICAgLy9cbiAgICAgIGxldCByZXQ7XG4gICAgICAvLyBPbWl0IGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBpZiB0aGV5IHdlcmUgbm90IHBhc3NlZCBpblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcmV0ID0gYXJyYXkuc3BsaWNlKHN0YXJ0KTtcbiAgICAgIC8vIEVpdGhlciBzdGFydCB3YXMgdW5kZWZpbmVkIGFuZCB0aGUgb3RoZXJzIHdlcmUgZGVmaW5lZCwgYnV0IGluIHRoaXNcbiAgICAgIC8vIGNhc2Ugd2UgY2FuIHNhZmVseSBwYXNzIG9uIGFsbCBhcmd1bWVudHNcbiAgICAgIC8vXG4gICAgICAvLyBOb3RlOiB0aGlzIGluY2x1ZGVzIHRoZSBjYXNlIHdoZXJlIG5vbmUgb2YgdGhlIGFyZ3VtZW50cyB3ZXJlIHBhc3NlZCBpbixcbiAgICAgIC8vIGUuZy4gdGhpcy5zcGxpY2UoJ2FycmF5JykuIEhvd2V2ZXIsIGlmIGJvdGggc3RhcnQgYW5kIGRlbGV0ZUNvdW50XG4gICAgICAvLyBhcmUgdW5kZWZpbmVkLCBhcnJheS5zcGxpY2Ugd2lsbCBub3QgbW9kaWZ5IHRoZSBhcnJheSAoYXMgZXhwZWN0ZWQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5pdGVtcyk7XG4gICAgICB9XG4gICAgICAvLyBBdCB0aGUgZW5kLCBjaGVjayB3aGV0aGVyIGFueSBpdGVtcyB3ZXJlIHBhc3NlZCBpbiAoZS5nLiBpbnNlcnRpb25zKVxuICAgICAgLy8gb3IgaWYgdGhlIHJldHVybiBhcnJheSBjb250YWlucyBpdGVtcyAoZS5nLiBkZWxldGlvbnMpLlxuICAgICAgLy8gT25seSBub3RpZnkgaWYgaXRlbXMgd2VyZSBhZGRlZCBvciBkZWxldGVkLlxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCB8fCByZXQubGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBzdGFydCwgaXRlbXMubGVuZ3RoLCByZXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSB0aGUgYmVnaW5uaW5nIG9mIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUucG9wYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEByZXR1cm4geyp9IEl0ZW0gdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2hpZnQocGF0aCkge1xuICAgICAgbGV0IGluZm8gPSB7cGF0aDogJyd9O1xuICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oZ2V0JDAodGhpcywgcGF0aCwgaW5mbykpO1xuICAgICAgbGV0IGhhZExlbmd0aCA9IEJvb2xlYW4oYXJyYXkubGVuZ3RoKTtcbiAgICAgIGxldCByZXQgPSBhcnJheS5zaGlmdCgpO1xuICAgICAgaWYgKGhhZExlbmd0aCkge1xuICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgMCwgMCwgW3JldF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGl0ZW1zIG9udG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgYXQgdGhlIHBhdGggc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICogYEFycmF5LnByb3RvdHlwZS5wdXNoYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gaXRlbXMgSXRlbXMgdG8gaW5zZXJ0IGluZm8gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IE5ldyBsZW5ndGggb2YgdGhlIGFycmF5LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICB1bnNoaWZ0KHBhdGgsIC4uLml0ZW1zKSB7XG4gICAgICBsZXQgaW5mbyA9IHtwYXRoOiAnJ307XG4gICAgICBsZXQgYXJyYXkgPSAvKiogQHR5cGUge0FycmF5fSAqLyhnZXQkMCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICBsZXQgcmV0ID0gYXJyYXkudW5zaGlmdCguLi5pdGVtcyk7XG4gICAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCAwLCBpdGVtcy5sZW5ndGgsIFtdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90aWZ5IHRoYXQgYSBwYXRoIGhhcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqICAgICB0aGlzLml0ZW0udXNlci5uYW1lID0gJ0JvYic7XG4gICAgICogICAgIHRoaXMubm90aWZ5UGF0aCgnaXRlbS51c2VyLm5hbWUnKTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdGhhdCBzaG91bGQgYmUgbm90aWZpZWQuXG4gICAgICogQHBhcmFtIHsqPX0gdmFsdWUgVmFsdWUgYXQgdGhlIHBhdGggKG9wdGlvbmFsKS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAqL1xuICAgIG5vdGlmeVBhdGgocGF0aCwgdmFsdWUpIHtcbiAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgbGV0IHByb3BQYXRoO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAvLyBHZXQgdmFsdWUgaWYgbm90IHN1cHBsaWVkXG4gICAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgICAgdmFsdWUgPSBnZXQkMCh0aGlzLCBwYXRoLCBpbmZvKTtcbiAgICAgICAgcHJvcFBhdGggPSBpbmZvLnBhdGg7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICAgICAgLy8gTm9ybWFsaXplIHBhdGggaWYgbmVlZGVkXG4gICAgICAgIHByb3BQYXRoID0gbm9ybWFsaXplKHBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcFBhdGggPSAvKiogQHR5cGV7c3RyaW5nfSAqLyhwYXRoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocHJvcFBhdGgsIHZhbHVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVSZWFkT25seVByb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHByb3RlY3RlZFNldHRlciBDcmVhdGVzIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXJcbiAgICAgKiAgIHdoZW4gYHRydWVgLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9jcmVhdGVSZWFkT25seVByb3BlcnR5KHByb3BlcnR5LCBwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUFEX09OTFkpO1xuICAgICAgaWYgKHByb3RlY3RlZFNldHRlcikge1xuICAgICAgICB0aGlzWydfc2V0JyArIHVwcGVyKHByb3BlcnR5KV0gPSAvKiogQHRoaXMge1Byb3BlcnR5RWZmZWN0c30gKi9mdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXJgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb24oKiwqKX0gbWV0aG9kIEZ1bmN0aW9uIG9yIG5hbWUgb2Ygb2JzZXJ2ZXIgbWV0aG9kIHRvIGNhbGxcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBkeW5hbWljRm4gV2hldGhlciB0aGUgbWV0aG9kIG5hbWUgc2hvdWxkIGJlIGluY2x1ZGVkIGFzXG4gICAgICogICBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlUHJvcGVydHlPYnNlcnZlcihwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm4pIHtcbiAgICAgIGxldCBpbmZvID0geyBwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm46IEJvb2xlYW4oZHluYW1pY0ZuKSB9O1xuICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLk9CU0VSVkUsIHtcbiAgICAgICAgZm46IHJ1bk9ic2VydmVyRWZmZWN0LCBpbmZvLCB0cmlnZ2VyOiB7bmFtZTogcHJvcGVydHl9XG4gICAgICB9KTtcbiAgICAgIGlmIChkeW5hbWljRm4pIHtcbiAgICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QoLyoqIEB0eXBlIHtzdHJpbmd9ICovKG1ldGhvZCksIFRZUEVTLk9CU0VSVkUsIHtcbiAgICAgICAgICBmbjogcnVuT2JzZXJ2ZXJFZmZlY3QsIGluZm8sIHRyaWdnZXI6IHtuYW1lOiBtZXRob2R9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVNZXRob2RPYnNlcnZlcmAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0PX0gZHluYW1pY0ZuIEJvb2xlYW4gb3Igb2JqZWN0IG1hcCBpbmRpY2F0aW5nXG4gICAgICogICB3aGV0aGVyIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgbGV0IHNpZyA9IHBhcnNlTWV0aG9kKGV4cHJlc3Npb24pO1xuICAgICAgaWYgKCFzaWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIG9ic2VydmVyIGV4cHJlc3Npb24gJ1wiICsgZXhwcmVzc2lvbiArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIGNyZWF0ZU1ldGhvZEVmZmVjdCh0aGlzLCBzaWcsIFRZUEVTLk9CU0VSVkUsIHJ1bk1ldGhvZEVmZmVjdCwgbnVsbCwgZHluYW1pY0ZuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlTm90aWZ5aW5nUHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuTk9USUZZLCB7XG4gICAgICAgIGZuOiBydW5Ob3RpZnlFZmZlY3QsXG4gICAgICAgIGluZm86IHtcbiAgICAgICAgICBldmVudE5hbWU6IENhc2VNYXAuY2FtZWxUb0Rhc2hDYXNlKHByb3BlcnR5KSArICctY2hhbmdlZCcsXG4gICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlUmVmbGVjdGVkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICAgIGxldCBhdHRyID0gdGhpcy5jb25zdHJ1Y3Rvci5hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgaWYgKGF0dHJbMF0gPT09ICctJykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1Byb3BlcnR5ICcgKyBwcm9wZXJ0eSArICcgY2Fubm90IGJlIHJlZmxlY3RlZCB0byBhdHRyaWJ1dGUgJyArXG4gICAgICAgICAgYXR0ciArICcgYmVjYXVzZSBcIi1cIiBpcyBub3QgYSB2YWxpZCBzdGFydGluZyBhdHRyaWJ1dGUgbmFtZS4gVXNlIGEgbG93ZXJjYXNlIGZpcnN0IGxldHRlciBmb3IgdGhlIHByb3BlcnR5IGluc3RlYWQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVGTEVDVCwge1xuICAgICAgICAgIGZuOiBydW5SZWZsZWN0RWZmZWN0LFxuICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgIGF0dHJOYW1lOiBhdHRyXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgY29tcHV0ZWQgcHJvcGVydHkgdG8gc2V0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0PX0gZHluYW1pY0ZuIEJvb2xlYW4gb3Igb2JqZWN0IG1hcCBpbmRpY2F0aW5nXG4gICAgICogICB3aGV0aGVyIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZUNvbXB1dGVkUHJvcGVydHkocHJvcGVydHksIGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgbGV0IHNpZyA9IHBhcnNlTWV0aG9kKGV4cHJlc3Npb24pO1xuICAgICAgaWYgKCFzaWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIGNvbXB1dGVkIGV4cHJlc3Npb24gJ1wiICsgZXhwcmVzc2lvbiArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIGNyZWF0ZU1ldGhvZEVmZmVjdCh0aGlzLCBzaWcsIFRZUEVTLkNPTVBVVEUsIHJ1bkNvbXB1dGVkRWZmZWN0LCBwcm9wZXJ0eSwgZHluYW1pY0ZuKTtcbiAgICB9XG5cbiAgICAvLyAtLSBzdGF0aWMgY2xhc3MgbWV0aG9kcyAtLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgYW4gYWNjZXNzb3IgZXhpc3RzIGZvciB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LCBhbmQgYWRkc1xuICAgICAqIHRvIGEgbGlzdCBvZiBcInByb3BlcnR5IGVmZmVjdHNcIiB0aGF0IHdpbGwgcnVuIHdoZW4gdGhlIGFjY2Vzc29yIGZvclxuICAgICAqIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgaXMgc2V0LiAgRWZmZWN0cyBhcmUgZ3JvdXBlZCBieSBcInR5cGVcIiwgd2hpY2hcbiAgICAgKiByb3VnaGx5IGNvcnJlc3BvbmRzIHRvIGEgcGhhc2UgaW4gZWZmZWN0IHByb2Nlc3NpbmcuICBUaGUgZWZmZWN0XG4gICAgICogbWV0YWRhdGEgc2hvdWxkIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAgICAgKlxuICAgICAqICAgICB7XG4gICAgICogICAgICAgZm46IGVmZmVjdEZ1bmN0aW9uLCAvLyBSZWZlcmVuY2UgdG8gZnVuY3Rpb24gdG8gY2FsbCB0byBwZXJmb3JtIGVmZmVjdFxuICAgICAqICAgICAgIGluZm86IHsgLi4uIH0gICAgICAgLy8gRWZmZWN0IG1ldGFkYXRhIHBhc3NlZCB0byBmdW5jdGlvblxuICAgICAqICAgICAgIHRyaWdnZXI6IHsgICAgICAgICAgLy8gT3B0aW9uYWwgdHJpZ2dlcmluZyBtZXRhZGF0YTsgaWYgbm90IHByb3ZpZGVkXG4gICAgICogICAgICAgICBuYW1lOiBzdHJpbmcgICAgICAvLyB0aGUgcHJvcGVydHkgaXMgdHJlYXRlZCBhcyBhIHdpbGRjYXJkXG4gICAgICogICAgICAgICBzdHJ1Y3R1cmVkOiBib29sZWFuXG4gICAgICogICAgICAgICB3aWxkY2FyZDogYm9vbGVhblxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogRWZmZWN0cyBhcmUgY2FsbGVkIGZyb20gYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgaW4gdGhlIGZvbGxvd2luZyBvcmRlciBieVxuICAgICAqIHR5cGU6XG4gICAgICpcbiAgICAgKiAxLiBDT01QVVRFXG4gICAgICogMi4gUFJPUEFHQVRFXG4gICAgICogMy4gUkVGTEVDVFxuICAgICAqIDQuIE9CU0VSVkVcbiAgICAgKiA1LiBOT1RJRllcbiAgICAgKlxuICAgICAqIEVmZmVjdCBmdW5jdGlvbnMgYXJlIGNhbGxlZCB3aXRoIHRoZSBmb2xsb3dpbmcgc2lnbmF0dXJlOlxuICAgICAqXG4gICAgICogICAgIGVmZmVjdEZ1bmN0aW9uKGluc3QsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgaW5mbywgaGFzUGF0aHMpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZWZmZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc3RhdGljIGFkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSwgZWZmZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2luZ2xlLXByb3BlcnR5IG9ic2VydmVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKCosKil9IG1ldGhvZCBGdW5jdGlvbiBvciBuYW1lIG9mIG9ic2VydmVyIG1ldGhvZCB0byBjYWxsXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZHluYW1pY0ZuIFdoZXRoZXIgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBiZSBpbmNsdWRlZCBhc1xuICAgICAqICAgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIocHJvcGVydHksIG1ldGhvZCwgZHluYW1pY0ZuKSB7XG4gICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlUHJvcGVydHlPYnNlcnZlcihwcm9wZXJ0eSwgbWV0aG9kLCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtdWx0aS1wcm9wZXJ0eSBcIm1ldGhvZCBvYnNlcnZlclwiIGJhc2VkIG9uIHRoZSBwcm92aWRlZFxuICAgICAqIGV4cHJlc3Npb24sIHdoaWNoIHNob3VsZCBiZSBhIHN0cmluZyBpbiB0aGUgZm9ybSBvZiBhIG5vcm1hbCBKYXZhU2NyaXB0XG4gICAgICogZnVuY3Rpb24gc2lnbmF0dXJlOiBgJ21ldGhvZE5hbWUoYXJnMSwgWy4uLiwgYXJnbl0pJ2AuICBFYWNoIGFyZ3VtZW50XG4gICAgICogc2hvdWxkIGNvcnJlc3BvbmQgdG8gYSBwcm9wZXJ0eSBvciBwYXRoIGluIHRoZSBjb250ZXh0IG9mIHRoaXNcbiAgICAgKiBwcm90b3R5cGUgKG9yIGluc3RhbmNlKSwgb3IgbWF5IGJlIGEgbGl0ZXJhbCBzdHJpbmcgb3IgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gTWV0aG9kIGV4cHJlc3Npb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0PX0gZHluYW1pY0ZuIEJvb2xlYW4gb3Igb2JqZWN0IG1hcCBpbmRpY2F0aW5nXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiAgIHdoZXRoZXIgbWV0aG9kIG5hbWVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2F1c2VzIHRoZSBzZXR0ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB0byBkaXNwYXRjaCBgPHByb3BlcnR5Pi1jaGFuZ2VkYFxuICAgICAqIGV2ZW50cyB0byBub3RpZnkgb2YgY2hhbmdlcyB0byB0aGUgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVhZC1vbmx5IGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBUbyBzZXQgdGhlIHByb3BlcnR5LCB1c2UgdGhlIHByb3RlY3RlZCBgX3NldFByb3BlcnR5YCBBUEkuXG4gICAgICogVG8gY3JlYXRlIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXIgKGUuZy4gYF9zZXRNeVByb3AoKWAgZm9yXG4gICAgICogcHJvcGVydHkgYG15UHJvcGApLCBwYXNzIGB0cnVlYCBmb3IgYHByb3RlY3RlZFNldHRlcmAuXG4gICAgICpcbiAgICAgKiBOb3RlLCBpZiB0aGUgcHJvcGVydHkgd2lsbCBoYXZlIG90aGVyIHByb3BlcnR5IGVmZmVjdHMsIHRoaXMgbWV0aG9kXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZCBmaXJzdCwgYmVmb3JlIGFkZGluZyBvdGhlciBlZmZlY3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBwcm90ZWN0ZWRTZXR0ZXIgQ3JlYXRlcyBhIGN1c3RvbSBwcm90ZWN0ZWQgc2V0dGVyXG4gICAgICogICB3aGVuIGB0cnVlYC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eShwcm9wZXJ0eSwgcHJvdGVjdGVkU2V0dGVyKSB7XG4gICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eShwcm9wZXJ0eSwgcHJvdGVjdGVkU2V0dGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXVzZXMgdGhlIHNldHRlciBmb3IgdGhlIGdpdmVuIHByb3BlcnR5IHRvIHJlZmxlY3QgdGhlIHByb3BlcnR5IHZhbHVlXG4gICAgICogdG8gYSAoZGFzaC1jYXNlZCkgYXR0cmlidXRlIG9mIHRoZSBzYW1lIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVJlZmxlY3RlZFByb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcHV0ZWQgcHJvcGVydHkgd2hvc2UgdmFsdWUgaXMgc2V0IHRvIHRoZSByZXN1bHQgb2YgdGhlXG4gICAgICogbWV0aG9kIGRlc2NyaWJlZCBieSB0aGUgZ2l2ZW4gYGV4cHJlc3Npb25gIGVhY2ggdGltZSBvbmUgb3IgbW9yZVxuICAgICAqIGFyZ3VtZW50cyB0byB0aGUgbWV0aG9kIGNoYW5nZXMuICBUaGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgYSBzdHJpbmdcbiAgICAgKiBpbiB0aGUgZm9ybSBvZiBhIG5vcm1hbCBKYXZhU2NyaXB0IGZ1bmN0aW9uIHNpZ25hdHVyZTpcbiAgICAgKiBgJ21ldGhvZE5hbWUoYXJnMSwgWy4uLiwgYXJnbl0pJ2BcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIGNvbXB1dGVkIHByb3BlcnR5IHRvIHNldFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIE1ldGhvZCBleHByZXNzaW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZyB3aGV0aGVyXG4gICAgICogICBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9jcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgdG8gZW5zdXJlIGJpbmRpbmcgZWZmZWN0cyBhcmUgY3JlYXRlZFxuICAgICAqIGZvciB0aGVtLCBhbmQgdGhlbiBlbnN1cmVzIHByb3BlcnR5IGFjY2Vzc29ycyBhcmUgY3JlYXRlZCBmb3IgYW55XG4gICAgICogZGVwZW5kZW50IHByb3BlcnRpZXMgaW4gdGhlIHRlbXBsYXRlLiAgQmluZGluZyBlZmZlY3RzIGZvciBib3VuZFxuICAgICAqIHRlbXBsYXRlcyBhcmUgc3RvcmVkIGluIGEgbGlua2VkIGxpc3Qgb24gdGhlIGluc3RhbmNlIHNvIHRoYXRcbiAgICAgKiB0ZW1wbGF0ZXMgY2FuIGJlIGVmZmljaWVudGx5IHN0YW1wZWQgYW5kIHVuc3RhbXBlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIGNvbnRhaW5pbmcgYmluZGluZ1xuICAgICAqICAgYmluZGluZ3NcbiAgICAgKiBAcmV0dXJuIHshVGVtcGxhdGVJbmZvfSBUZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3RcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc3RhdGljIGJpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvdG90eXBlLl9iaW5kVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgIH1cblxuICAgIC8vIC0tIGJpbmRpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGJpbmRUZW1wbGF0ZWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBvbiB0aGUgcHJvdG90eXBlIChmb3IgcHJvdG90eXBpY2FsIHRlbXBsYXRlXG4gICAgICogYmluZGluZywgdG8gYXZvaWQgY3JlYXRpbmcgYWNjZXNzb3JzIGV2ZXJ5IGluc3RhbmNlKSBvbmNlIHBlciBwcm90b3R5cGUsXG4gICAgICogYW5kIHdpbGwgYmUgY2FsbGVkIHdpdGggYHJ1bnRpbWVCaW5kaW5nOiB0cnVlYCBieSBgX3N0YW1wVGVtcGxhdGVgIHRvXG4gICAgICogY3JlYXRlIGFuZCBsaW5rIGFuIGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBtZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggYVxuICAgICAqIHBhcnRpY3VsYXIgc3RhbXBpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSBjb250YWluaW5nIGJpbmRpbmdcbiAgICAgKiAgIGJpbmRpbmdzXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gaW5zdGFuY2VCaW5kaW5nIFdoZW4gZmFsc2UgKGRlZmF1bHQpLCBwZXJmb3Jtc1xuICAgICAqICAgXCJwcm90b3R5cGljYWxcIiBiaW5kaW5nIG9mIHRoZSB0ZW1wbGF0ZSBhbmQgb3ZlcndyaXRlcyBhbnkgcHJldmlvdXNseVxuICAgICAqICAgYm91bmQgdGVtcGxhdGUgZm9yIHRoZSBjbGFzcy4gV2hlbiB0cnVlIChhcyBwYXNzZWQgZnJvbVxuICAgICAqICAgYF9zdGFtcFRlbXBsYXRlYCksIHRoZSB0ZW1wbGF0ZSBpbmZvIGlzIGluc3RhbmNlZCBhbmQgbGlua2VkIGludG9cbiAgICAgKiAgIHRoZSBsaXN0IG9mIGJvdW5kIHRlbXBsYXRlcy5cbiAgICAgKiBAcmV0dXJuIHshVGVtcGxhdGVJbmZvfSBUZW1wbGF0ZSBtZXRhZGF0YSBvYmplY3Q7IGZvciBgcnVudGltZUJpbmRpbmdgLFxuICAgICAqICAgdGhpcyBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgcHJvdG90eXBpY2FsIHRlbXBsYXRlIGluZm9cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgaW5zdGFuY2VCaW5kaW5nKSB7XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGhpcy5jb25zdHJ1Y3Rvci5fcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICBsZXQgd2FzUHJlQm91bmQgPSB0aGlzLl9fdGVtcGxhdGVJbmZvID09IHRlbXBsYXRlSW5mbztcbiAgICAgIC8vIE9wdGltaXphdGlvbjogc2luY2UgdGhpcyBpcyBjYWxsZWQgdHdpY2UgZm9yIHByb3RvLWJvdW5kIHRlbXBsYXRlcyxcbiAgICAgIC8vIGRvbid0IGF0dGVtcHQgdG8gcmVjcmVhdGUgYWNjZXNzb3JzIGlmIHRoaXMgdGVtcGxhdGUgd2FzIHByZS1ib3VuZFxuICAgICAgaWYgKCF3YXNQcmVCb3VuZCkge1xuICAgICAgICBmb3IgKGxldCBwcm9wIGluIHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMpIHtcbiAgICAgICAgICB0aGlzLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGFuY2VCaW5kaW5nKSB7XG4gICAgICAgIC8vIEZvciBpbnN0YW5jZS10aW1lIGJpbmRpbmcsIGNyZWF0ZSBpbnN0YW5jZSBvZiB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAgICAvLyBhbmQgbGluayBpbnRvIGxpc3Qgb2YgdGVtcGxhdGVzIGlmIG5lY2Vzc2FyeVxuICAgICAgICB0ZW1wbGF0ZUluZm8gPSAvKiogQHR5cGUgeyFUZW1wbGF0ZUluZm99ICovKE9iamVjdC5jcmVhdGUodGVtcGxhdGVJbmZvKSk7XG4gICAgICAgIHRlbXBsYXRlSW5mby53YXNQcmVCb3VuZCA9IHdhc1ByZUJvdW5kO1xuICAgICAgICBpZiAoIXdhc1ByZUJvdW5kICYmIHRoaXMuX190ZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0IHx8IHRoaXMuX190ZW1wbGF0ZUluZm87XG4gICAgICAgICAgdGhpcy5fX3RlbXBsYXRlSW5mb0xhc3QgPSBsYXN0Lm5leHRUZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvID0gbGFzdDtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGVJbmZvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fX3RlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcHJvcGVydHkgZWZmZWN0IHRvIHRoZSBnaXZlbiB0ZW1wbGF0ZSBtZXRhZGF0YSwgd2hpY2ggaXMgcnVuXG4gICAgICogYXQgdGhlIFwicHJvcGFnYXRlXCIgc3RhZ2Ugb2YgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgd2hlbiB0aGUgdGVtcGxhdGVcbiAgICAgKiBoYXMgYmVlbiBib3VuZCB0byB0aGUgZWxlbWVudCB2aWEgYF9iaW5kVGVtcGxhdGVgLlxuICAgICAqXG4gICAgICogVGhlIGBlZmZlY3RgIG9iamVjdCBzaG91bGQgbWF0Y2ggdGhlIGZvcm1hdCBpbiBgX2FkZFByb3BlcnR5RWZmZWN0YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgdG8gYWRkIGVmZmVjdCB0b1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QodGVtcGxhdGVJbmZvLCBwcm9wLCBlZmZlY3QpIHtcbiAgICAgIGxldCBob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzID0gdGVtcGxhdGVJbmZvLmhvc3RQcm9wcyB8fCB7fTtcbiAgICAgIGhvc3RQcm9wc1twcm9wXSA9IHRydWU7XG4gICAgICBsZXQgZWZmZWN0cyA9IHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMgPSB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzIHx8IHt9O1xuICAgICAgbGV0IHByb3BFZmZlY3RzID0gZWZmZWN0c1twcm9wXSA9IGVmZmVjdHNbcHJvcF0gfHwgW107XG4gICAgICBwcm9wRWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhbXBzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSBhbmQgcGVyZm9ybXMgaW5zdGFuY2UtdGltZSBzZXR1cCBmb3JcbiAgICAgKiBQb2x5bWVyIHRlbXBsYXRlIGZlYXR1cmVzLCBpbmNsdWRpbmcgZGF0YSBiaW5kaW5ncywgZGVjbGFyYXRpdmUgZXZlbnRcbiAgICAgKiBsaXN0ZW5lcnMsIGFuZCB0aGUgYHRoaXMuJGAgbWFwIG9mIGBpZGAncyB0byBub2Rlcy4gIEEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgKiBpcyByZXR1cm5lZCBjb250YWluaW5nIHRoZSBzdGFtcGVkIERPTSwgcmVhZHkgZm9yIGluc2VydGlvbiBpbnRvIHRoZVxuICAgICAqIERPTS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2U7IGhvd2V2ZXIgbm90ZSB0aGF0IGR1ZSB0b1xuICAgICAqIGBzaGFkeWNzc2AgcG9seWZpbGwgbGltaXRhdGlvbnMsIG9ubHkgc3R5bGVzIGZyb20gdGVtcGxhdGVzIHByZXBhcmVkXG4gICAgICogdXNpbmcgYFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZWAgd2lsbCBiZSBjb3JyZWN0bHkgcG9seWZpbGxlZCAoc2NvcGVkXG4gICAgICogdG8gdGhlIHNoYWRvdyByb290IGFuZCBzdXBwb3J0IENTUyBjdXN0b20gcHJvcGVydGllcyksIGFuZCBub3RlIHRoYXRcbiAgICAgKiBgU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlYCBtYXkgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgZWxlbWVudC4gQXMgc3VjaCxcbiAgICAgKiBhbnkgc3R5bGVzIHJlcXVpcmVkIGJ5IGluIHJ1bnRpbWUtc3RhbXBlZCB0ZW1wbGF0ZXMgbXVzdCBiZSBpbmNsdWRlZFxuICAgICAqIGluIHRoZSBtYWluIGVsZW1lbnQgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBzdGFtcFxuICAgICAqIEByZXR1cm4geyFTdGFtcGVkVGVtcGxhdGV9IENsb25lZCB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zdGFtcFRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAvLyBFbnN1cmVzIHRoYXQgY3JlYXRlZCBkb20gaXMgYF9lbnF1ZXVlQ2xpZW50YCdkIHRvIHRoaXMgZWxlbWVudCBzb1xuICAgICAgLy8gdGhhdCBpdCBjYW4gYmUgZmx1c2hlZCBvbiBuZXh0IGNhbGwgdG8gYF9mbHVzaFByb3BlcnRpZXNgXG4gICAgICBob3N0U3RhY2suYmVnaW5Ib3N0aW5nKHRoaXMpO1xuICAgICAgbGV0IGRvbSA9IHN1cGVyLl9zdGFtcFRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIGhvc3RTdGFjay5lbmRIb3N0aW5nKHRoaXMpO1xuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IC8qKiBAdHlwZSB7IVRlbXBsYXRlSW5mb30gKi8odGhpcy5fYmluZFRlbXBsYXRlKHRlbXBsYXRlLCB0cnVlKSk7XG4gICAgICAvLyBBZGQgdGVtcGxhdGUtaW5zdGFuY2Utc3BlY2lmaWMgZGF0YSB0byBpbnN0YW5jZWQgdGVtcGxhdGVJbmZvXG4gICAgICB0ZW1wbGF0ZUluZm8ubm9kZUxpc3QgPSBkb20ubm9kZUxpc3Q7XG4gICAgICAvLyBDYXB0dXJlIGNoaWxkIG5vZGVzIHRvIGFsbG93IHVuc3RhbXBpbmcgb2Ygbm9uLXByb3RvdHlwaWNhbCB0ZW1wbGF0ZXNcbiAgICAgIGlmICghdGVtcGxhdGVJbmZvLndhc1ByZUJvdW5kKSB7XG4gICAgICAgIGxldCBub2RlcyA9IHRlbXBsYXRlSW5mby5jaGlsZE5vZGVzID0gW107XG4gICAgICAgIGZvciAobGV0IG49ZG9tLmZpcnN0Q2hpbGQ7IG47IG49bi5uZXh0U2libGluZykge1xuICAgICAgICAgIG5vZGVzLnB1c2gobik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRvbS50ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAvLyBTZXR1cCBjb21wb3VuZCBzdG9yYWdlLCAyLXdheSBsaXN0ZW5lcnMsIGFuZCBkYXRhSG9zdCBmb3IgYmluZGluZ3NcbiAgICAgIHNldHVwQmluZGluZ3ModGhpcywgdGVtcGxhdGVJbmZvKTtcbiAgICAgIC8vIEZsdXNoIHByb3BlcnRpZXMgaW50byB0ZW1wbGF0ZSBub2RlcyBpZiBhbHJlYWR5IGJvb3RlZFxuICAgICAgaWYgKHRoaXMuX19kYXRhUmVhZHkpIHtcbiAgICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzLCB0aGlzLl9fZGF0YSwgbnVsbCxcbiAgICAgICAgICBmYWxzZSwgdGVtcGxhdGVJbmZvLm5vZGVMaXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbmQgdW5iaW5kcyB0aGUgbm9kZXMgcHJldmlvdXNseSBjb250YWluZWQgaW4gdGhlIHByb3ZpZGVkXG4gICAgICogRG9jdW1lbnRGcmFnbWVudCByZXR1cm5lZCBmcm9tIGBfc3RhbXBUZW1wbGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFTdGFtcGVkVGVtcGxhdGV9IGRvbSBEb2N1bWVudEZyYWdtZW50IHByZXZpb3VzbHkgcmV0dXJuZWRcbiAgICAgKiAgIGZyb20gYF9zdGFtcFRlbXBsYXRlYCBhc3NvY2lhdGVkIHdpdGggdGhlIG5vZGVzIHRvIGJlIHJlbW92ZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcmVtb3ZlQm91bmREb20oZG9tKSB7XG4gICAgICAvLyBVbmxpbmsgdGVtcGxhdGUgaW5mb1xuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IGRvbS50ZW1wbGF0ZUluZm87XG4gICAgICBpZiAodGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvID1cbiAgICAgICAgICB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbztcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbykge1xuICAgICAgICB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9XG4gICAgICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0ID09IHRlbXBsYXRlSW5mbykge1xuICAgICAgICB0aGlzLl9fdGVtcGxhdGVJbmZvTGFzdCA9IHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbztcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlSW5mby5wcmV2aW91c1RlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvID0gbnVsbDtcbiAgICAgIC8vIFJlbW92ZSBzdGFtcGVkIG5vZGVzXG4gICAgICBsZXQgbm9kZXMgPSB0ZW1wbGF0ZUluZm8uY2hpbGROb2RlcztcbiAgICAgIGZvciAobGV0IGk9MDsgaTxub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGRlZmF1bHQgYFRlbXBsYXRlU3RhbXBgIGltcGxlbWVudGF0aW9uIHRvIGFkZCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnNpbmcgYmluZGluZ3MgZnJvbSBgVGV4dE5vZGVgJ3MnIGB0ZXh0Q29udGVudGAuICBBIGBiaW5kaW5nc2BcbiAgICAgKiBhcnJheSBpcyBhZGRlZCB0byBgbm9kZUluZm9gIGFuZCBwb3B1bGF0ZWQgd2l0aCBiaW5kaW5nIG1ldGFkYXRhXG4gICAgICogd2l0aCBpbmZvcm1hdGlvbiBjYXB0dXJpbmcgdGhlIGJpbmRpbmcgdGFyZ2V0LCBhbmQgYSBgcGFydHNgIGFycmF5XG4gICAgICogd2l0aCBvbmUgb3IgbW9yZSBtZXRhZGF0YSBvYmplY3RzIGNhcHR1cmluZyB0aGUgc291cmNlKHMpIG9mIHRoZVxuICAgICAqIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgbGV0IG5vdGVkID0gc3VwZXIuX3BhcnNlVGVtcGxhdGVOb2RlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pO1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIGxldCBwYXJ0cyA9IHRoaXMuX3BhcnNlQmluZGluZ3Mobm9kZS50ZXh0Q29udGVudCwgdGVtcGxhdGVJbmZvKTtcbiAgICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdGV4dENvbnRlbnQgd2l0aCBhbnkgbGl0ZXJhbCBwYXJ0c1xuICAgICAgICAgIC8vIE5PVEU6IGRlZmF1bHQgdG8gYSBzcGFjZSBoZXJlIHNvIHRoZSB0ZXh0Tm9kZSByZW1haW5zOyBzb21lIGJyb3dzZXJzXG4gICAgICAgICAgLy8gKElFKSBvbWl0IGFuIGVtcHR5IHRleHROb2RlIGZvbGxvd2luZyBjbG9uZU5vZGUvaW1wb3J0Tm9kZS5cbiAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gbGl0ZXJhbEZyb21QYXJ0cyhwYXJ0cykgfHwgJyAnO1xuICAgICAgICAgIGFkZEJpbmRpbmcodGhpcywgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgJ3RleHQnLCAndGV4dENvbnRlbnQnLCBwYXJ0cyk7XG4gICAgICAgICAgbm90ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGRlZmF1bHQgYFRlbXBsYXRlU3RhbXBgIGltcGxlbWVudGF0aW9uIHRvIGFkZCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnNpbmcgYmluZGluZ3MgZnJvbSBhdHRyaWJ1dGVzLiAgQSBgYmluZGluZ3NgXG4gICAgICogYXJyYXkgaXMgYWRkZWQgdG8gYG5vZGVJbmZvYCBhbmQgcG9wdWxhdGVkIHdpdGggYmluZGluZyBtZXRhZGF0YVxuICAgICAqIHdpdGggaW5mb3JtYXRpb24gY2FwdHVyaW5nIHRoZSBiaW5kaW5nIHRhcmdldCwgYW5kIGEgYHBhcnRzYCBhcnJheVxuICAgICAqIHdpdGggb25lIG9yIG1vcmUgbWV0YWRhdGEgb2JqZWN0cyBjYXB0dXJpbmcgdGhlIHNvdXJjZShzKSBvZiB0aGVcbiAgICAgKiBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHtOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZSBub2RlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sIG5hbWUsIHZhbHVlKSB7XG4gICAgICBsZXQgcGFydHMgPSB0aGlzLl9wYXJzZUJpbmRpbmdzKHZhbHVlLCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgIC8vIEF0dHJpYnV0ZSBvciBwcm9wZXJ0eVxuICAgICAgICBsZXQgb3JpZ05hbWUgPSBuYW1lO1xuICAgICAgICBsZXQga2luZCA9ICdwcm9wZXJ0eSc7XG4gICAgICAgIC8vIFRoZSBvbmx5IHdheSB3ZSBzZWUgYSBjYXBpdGFsIGxldHRlciBoZXJlIGlzIGlmIHRoZSBhdHRyIGhhc1xuICAgICAgICAvLyBhIGNhcGl0YWwgbGV0dGVyIGluIGl0IHBlciBzcGVjLiBJbiB0aGlzIGNhc2UsIHRvIG1ha2Ugc3VyZVxuICAgICAgICAvLyB0aGlzIGJpbmRpbmcgd29ya3MsIHdlIGdvIGFoZWFkIGFuZCBtYWtlIHRoZSBiaW5kaW5nIHRvIHRoZSBhdHRyaWJ1dGUuXG4gICAgICAgIGlmIChjYXBpdGFsQXR0cmlidXRlUmVnZXgudGVzdChuYW1lKSkge1xuICAgICAgICAgIGtpbmQgPSAnYXR0cmlidXRlJztcbiAgICAgICAgfSBlbHNlIGlmIChuYW1lW25hbWUubGVuZ3RoLTFdID09ICckJykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICBraW5kID0gJ2F0dHJpYnV0ZSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhdHRyaWJ1dGUgYmluZGluZ3Mgd2l0aCBhbnkgbGl0ZXJhbCBwYXJ0c1xuICAgICAgICBsZXQgbGl0ZXJhbCA9IGxpdGVyYWxGcm9tUGFydHMocGFydHMpO1xuICAgICAgICBpZiAobGl0ZXJhbCAmJiBraW5kID09ICdhdHRyaWJ1dGUnKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgbGl0ZXJhbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xlYXIgYXR0cmlidXRlIGJlZm9yZSByZW1vdmluZywgc2luY2UgSUUgd29uJ3QgYWxsb3cgcmVtb3ZpbmdcbiAgICAgICAgLy8gYHZhbHVlYCBhdHRyaWJ1dGUgaWYgaXQgcHJldmlvdXNseSBoYWQgYSB2YWx1ZSAoY2FuJ3RcbiAgICAgICAgLy8gdW5jb25kaXRpb25hbGx5IHNldCAnJyBiZWZvcmUgcmVtb3Zpbmcgc2luY2UgYXR0cmlidXRlcyB3aXRoIGAkYFxuICAgICAgICAvLyBjYW4ndCBiZSBzZXQgdXNpbmcgc2V0QXR0cmlidXRlKVxuICAgICAgICBpZiAobm9kZS5sb2NhbE5hbWUgPT09ICdpbnB1dCcgJiYgb3JpZ05hbWUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShvcmlnTmFtZSwgJycpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSBhbm5vdGF0aW9uXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG9yaWdOYW1lKTtcbiAgICAgICAgLy8gQ2FzZSBoYWNrZXJ5OiBhdHRyaWJ1dGVzIGFyZSBsb3dlci1jYXNlLCBidXQgYmluZCB0YXJnZXRzXG4gICAgICAgIC8vIChwcm9wZXJ0aWVzKSBhcmUgY2FzZSBzZW5zaXRpdmUuIEdhbWJpdCBpcyB0byBtYXAgZGFzaC1jYXNlIHRvXG4gICAgICAgIC8vIGNhbWVsLWNhc2U6IGBmb28tYmFyYCBiZWNvbWVzIGBmb29CYXJgLlxuICAgICAgICAvLyBBdHRyaWJ1dGUgYmluZGluZ3MgYXJlIGV4Y2VwdGVkLlxuICAgICAgICBpZiAoa2luZCA9PT0gJ3Byb3BlcnR5Jykge1xuICAgICAgICAgIG5hbWUgPSBkYXNoVG9DYW1lbENhc2UobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBraW5kLCBuYW1lLCBwYXJ0cywgbGl0ZXJhbCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGRlZmF1bHQgYFRlbXBsYXRlU3RhbXBgIGltcGxlbWVudGF0aW9uIHRvIGFkZCBzdXBwb3J0IGZvclxuICAgICAqIGJpbmRpbmcgdGhlIHByb3BlcnRpZXMgdGhhdCBhIG5lc3RlZCB0ZW1wbGF0ZSBkZXBlbmRzIG9uIHRvIHRoZSB0ZW1wbGF0ZVxuICAgICAqIGFzIGBfaG9zdF88cHJvcGVydHk+YC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUgbm9kZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgbGV0IG5vdGVkID0gc3VwZXIuX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKTtcbiAgICAgIC8vIE1lcmdlIGhvc3QgcHJvcHMgaW50byBvdXRlciB0ZW1wbGF0ZSBhbmQgYWRkIGJpbmRpbmdzXG4gICAgICBsZXQgaG9zdFByb3BzID0gbm9kZUluZm8udGVtcGxhdGVJbmZvLmhvc3RQcm9wcztcbiAgICAgIGxldCBtb2RlID0gJ3snO1xuICAgICAgZm9yIChsZXQgc291cmNlIGluIGhvc3RQcm9wcykge1xuICAgICAgICBsZXQgcGFydHMgPSBbeyBtb2RlLCBzb3VyY2UsIGRlcGVuZGVuY2llczogW3NvdXJjZV0gfV07XG4gICAgICAgIGFkZEJpbmRpbmcodGhpcywgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgJ3Byb3BlcnR5JywgJ19ob3N0XycgKyBzb3VyY2UsIHBhcnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdG8gcGFyc2UgdGV4dCBpbiBhIHRlbXBsYXRlIChlaXRoZXIgYXR0cmlidXRlIHZhbHVlcyBvclxuICAgICAqIHRleHRDb250ZW50KSBpbnRvIGJpbmRpbmcgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBBbnkgb3ZlcnJpZGVzIG9mIHRoaXMgbWV0aG9kIHNob3VsZCByZXR1cm4gYW4gYXJyYXkgb2YgYmluZGluZyBwYXJ0XG4gICAgICogbWV0YWRhdGEgIHJlcHJlc2VudGluZyBvbmUgb3IgbW9yZSBiaW5kaW5ncyBmb3VuZCBpbiB0aGUgcHJvdmlkZWQgdGV4dFxuICAgICAqIGFuZCBhbnkgXCJsaXRlcmFsXCIgdGV4dCBpbiBiZXR3ZWVuLiAgQW55IG5vbi1saXRlcmFsIHBhcnRzIHdpbGwgYmUgcGFzc2VkXG4gICAgICogdG8gYF9ldmFsdWF0ZUJpbmRpbmdgIHdoZW4gYW55IGRlcGVuZGVuY2llcyBjaGFuZ2UuICBUaGUgb25seSByZXF1aXJlZFxuICAgICAqIGZpZWxkcyBvZiBlYWNoIFwicGFydFwiIGluIHRoZSByZXR1cm5lZCBhcnJheSBhcmUgYXMgZm9sbG93czpcbiAgICAgKlxuICAgICAqIC0gYGRlcGVuZGVuY2llc2AgLSBBcnJheSBjb250YWluaW5nIHRyaWdnZXIgbWV0YWRhdGEgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGJpbmRpbmcgdG8gdXBkYXRlXG4gICAgICogLSBgbGl0ZXJhbGAgLSBTdHJpbmcgY29udGFpbmluZyB0ZXh0IGlmIHRoZSBwYXJ0IHJlcHJlc2VudHMgYSBsaXRlcmFsO1xuICAgICAqICAgaW4gdGhpcyBjYXNlIG5vIGBkZXBlbmRlbmNpZXNgIGFyZSBuZWVkZWRcbiAgICAgKlxuICAgICAqIEFkZGl0aW9uYWwgbWV0YWRhdGEgZm9yIHVzZSBieSBgX2V2YWx1YXRlQmluZGluZ2AgbWF5IGJlIHByb3ZpZGVkIGluXG4gICAgICogZWFjaCBwYXJ0IG9iamVjdCBhcyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBoYW5kbGVzIHRoZSBmb2xsb3dpbmcgdHlwZXMgb2YgYmluZGluZ3NcbiAgICAgKiAob25lIG9yIG1vcmUgbWF5IGJlIGludGVybWl4ZWQgd2l0aCBsaXRlcmFsIHN0cmluZ3MpOlxuICAgICAqIC0gUHJvcGVydHkgYmluZGluZzogYFtbcHJvcF1dYFxuICAgICAqIC0gUGF0aCBiaW5kaW5nOiBgW1tvYmplY3QucHJvcF1dYFxuICAgICAqIC0gTmVnYXRlZCBwcm9wZXJ0eSBvciBwYXRoIGJpbmRpbmdzOiBgW1shcHJvcF1dYCBvciBgW1shb2JqZWN0LnByb3BdXWBcbiAgICAgKiAtIFR3by13YXkgcHJvcGVydHkgb3IgcGF0aCBiaW5kaW5ncyAoc3VwcG9ydHMgbmVnYXRpb24pOlxuICAgICAqICAgYHt7cHJvcH19YCwgYHt7b2JqZWN0LnByb3B9fWAsIGB7eyFwcm9wfX1gIG9yIGB7eyFvYmplY3QucHJvcH19YFxuICAgICAqIC0gSW5saW5lIGNvbXB1dGVkIG1ldGhvZCAoc3VwcG9ydHMgbmVnYXRpb24pOlxuICAgICAqICAgYFtbY29tcHV0ZShhLCAnbGl0ZXJhbCcsIGIpXV1gLCBgW1shY29tcHV0ZShhLCAnbGl0ZXJhbCcsIGIpXV1gXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB1c2VzIGEgcmVndWxhciBleHByZXNzaW9uIGZvciBiZXN0XG4gICAgICogcGVyZm9ybWFuY2UuIEhvd2V2ZXIsIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gdXNlcyBhIHdoaXRlLWxpc3Qgb2ZcbiAgICAgKiBhbGxvd2VkIGNoYXJhY3RlcnMgaW4gYSBkYXRhLWJpbmRpbmcsIHdoaWNoIGNhdXNlcyBwcm9ibGVtcyBmb3JcbiAgICAgKiBkYXRhLWJpbmRpbmdzIHRoYXQgZG8gdXNlIGNoYXJhY3RlcnMgbm90IGluIHRoaXMgd2hpdGUtbGlzdC5cbiAgICAgKlxuICAgICAqIEluc3RlYWQgb2YgdXBkYXRpbmcgdGhlIHdoaXRlLWxpc3Qgd2l0aCBhbGwgYWxsb3dlZCBjaGFyYWN0ZXJzLFxuICAgICAqIHRoZXJlIGlzIGEgU3RyaWN0QmluZGluZ1BhcnNlciAoc2VlIGxpYi9taXhpbnMvc3RyaWN0LWJpbmRpbmctcGFyc2VyKVxuICAgICAqIHRoYXQgdXNlcyBhIHN0YXRlIG1hY2hpbmUgaW5zdGVhZC4gVGhpcyBzdGF0ZSBtYWNoaW5lIGlzIGFibGUgdG8gaGFuZGxlXG4gICAgICogYWxsIGNoYXJhY3RlcnMuIEhvd2V2ZXIsIGl0IGlzIHNsaWdodGx5IGxlc3MgcGVyZm9ybWFudCwgdGhlcmVmb3JlIHdlXG4gICAgICogZXh0cmFjdGVkIGl0IGludG8gYSBzZXBhcmF0ZSBvcHRpb25hbCBtaXhpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRleHQgdG8gcGFyc2UgZnJvbSBhdHRyaWJ1dGUgb3IgdGV4dENvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVJbmZvIEN1cnJlbnQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgKiBAcmV0dXJuIHtBcnJheTwhQmluZGluZ1BhcnQ+fSBBcnJheSBvZiBiaW5kaW5nIHBhcnQgbWV0YWRhdGFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZUJpbmRpbmdzKHRleHQsIHRlbXBsYXRlSW5mbykge1xuICAgICAgbGV0IHBhcnRzID0gW107XG4gICAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICAgIGxldCBtO1xuICAgICAgLy8gRXhhbXBsZTogXCJsaXRlcmFsMXt7cHJvcH19bGl0ZXJhbDJbWyFjb21wdXRlKGZvbyxiYXIpXV1maW5hbFwiXG4gICAgICAvLyBSZWdleCBtYXRjaGVzOlxuICAgICAgLy8gICAgICAgIEl0ZXJhdGlvbiAxOiAgSXRlcmF0aW9uIDI6XG4gICAgICAvLyBtWzFdOiAne3snICAgICAgICAgICdbWydcbiAgICAgIC8vIG1bMl06ICcnICAgICAgICAgICAgJyEnXG4gICAgICAvLyBtWzNdOiAncHJvcCcgICAgICAgICdjb21wdXRlKGZvbyxiYXIpJ1xuICAgICAgd2hpbGUgKChtID0gYmluZGluZ1JlZ2V4LmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEFkZCBsaXRlcmFsIHBhcnRcbiAgICAgICAgaWYgKG0uaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKHtsaXRlcmFsOiB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgbS5pbmRleCl9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgYmluZGluZyBwYXJ0XG4gICAgICAgIGxldCBtb2RlID0gbVsxXVswXTtcbiAgICAgICAgbGV0IG5lZ2F0ZSA9IEJvb2xlYW4obVsyXSk7XG4gICAgICAgIGxldCBzb3VyY2UgPSBtWzNdLnRyaW0oKTtcbiAgICAgICAgbGV0IGN1c3RvbUV2ZW50ID0gZmFsc2UsIG5vdGlmeUV2ZW50ID0gJycsIGNvbG9uID0gLTE7XG4gICAgICAgIGlmIChtb2RlID09ICd7JyAmJiAoY29sb24gPSBzb3VyY2UuaW5kZXhPZignOjonKSkgPiAwKSB7XG4gICAgICAgICAgbm90aWZ5RXZlbnQgPSBzb3VyY2Uuc3Vic3RyaW5nKGNvbG9uICsgMik7XG4gICAgICAgICAgc291cmNlID0gc291cmNlLnN1YnN0cmluZygwLCBjb2xvbik7XG4gICAgICAgICAgY3VzdG9tRXZlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaWduYXR1cmUgPSBwYXJzZU1ldGhvZChzb3VyY2UpO1xuICAgICAgICBsZXQgZGVwZW5kZW5jaWVzID0gW107XG4gICAgICAgIGlmIChzaWduYXR1cmUpIHtcbiAgICAgICAgICAvLyBJbmxpbmUgY29tcHV0ZWQgZnVuY3Rpb25cbiAgICAgICAgICBsZXQge2FyZ3MsIG1ldGhvZE5hbWV9ID0gc2lnbmF0dXJlO1xuICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYXJnID0gYXJnc1tpXTtcbiAgICAgICAgICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goYXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGR5bmFtaWNGbnMgPSB0ZW1wbGF0ZUluZm8uZHluYW1pY0ZucztcbiAgICAgICAgICBpZiAoZHluYW1pY0ZucyAmJiBkeW5hbWljRm5zW21ldGhvZE5hbWVdIHx8IHNpZ25hdHVyZS5zdGF0aWMpIHtcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgICAgICAgICAgc2lnbmF0dXJlLmR5bmFtaWNGbiA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFByb3BlcnR5IG9yIHBhdGhcbiAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgIHNvdXJjZSwgbW9kZSwgbmVnYXRlLCBjdXN0b21FdmVudCwgc2lnbmF0dXJlLCBkZXBlbmRlbmNpZXMsXG4gICAgICAgICAgZXZlbnQ6IG5vdGlmeUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBsYXN0SW5kZXggPSBiaW5kaW5nUmVnZXgubGFzdEluZGV4O1xuICAgICAgfVxuICAgICAgLy8gQWRkIGEgZmluYWwgbGl0ZXJhbCBwYXJ0XG4gICAgICBpZiAobGFzdEluZGV4ICYmIGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgIGxldCBsaXRlcmFsID0gdGV4dC5zdWJzdHJpbmcobGFzdEluZGV4KTtcbiAgICAgICAgaWYgKGxpdGVyYWwpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGxpdGVyYWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcGFydHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdG8gZXZhbHVhdGUgYSBwcmV2aW91c2x5IHBhcnNlZCBiaW5kaW5nIHBhcnQgYmFzZWQgb24gYSBzZXQgb2ZcbiAgICAgKiBvbmUgb3IgbW9yZSBjaGFuZ2VkIGRlcGVuZGVuY2llcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dGhpc30gaW5zdCBFbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgc2NvcGUgZm9yXG4gICAgICogICBiaW5kaW5nIGRlcGVuZGVuY2llc1xuICAgICAqIEBwYXJhbSB7QmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUHJvcGVydHkvcGF0aCB0aGF0IHRyaWdnZXJlZCB0aGlzIGVmZmVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSB0aGUgYmluZGluZyBwYXJ0IGV2YWx1YXRlZCB0b1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgX2V2YWx1YXRlQmluZGluZyhpbnN0LCBwYXJ0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICBsZXQgdmFsdWU7XG4gICAgICBpZiAocGFydC5zaWduYXR1cmUpIHtcbiAgICAgICAgdmFsdWUgPSBydW5NZXRob2RFZmZlY3QoaW5zdCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBwYXJ0LnNpZ25hdHVyZSk7XG4gICAgICB9IGVsc2UgaWYgKHBhdGggIT0gcGFydC5zb3VyY2UpIHtcbiAgICAgICAgdmFsdWUgPSBnZXQkMChpbnN0LCBwYXJ0LnNvdXJjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaGFzUGF0aHMgJiYgaXNQYXRoJDAocGF0aCkpIHtcbiAgICAgICAgICB2YWx1ZSA9IGdldCQwKGluc3QsIHBhdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gaW5zdC5fX2RhdGFbcGF0aF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0Lm5lZ2F0ZSkge1xuICAgICAgICB2YWx1ZSA9ICF2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgfVxuXG4gIC8vIG1ha2UgYSB0eXBpbmcgZm9yIGNsb3N1cmUgOlBcbiAgUHJvcGVydHlFZmZlY3RzVHlwZSA9IFByb3BlcnR5RWZmZWN0cztcblxuICByZXR1cm4gUHJvcGVydHlFZmZlY3RzO1xufSk7XG5cbi8qKlxuICogSGVscGVyIGFwaSBmb3IgZW5xdWV1aW5nIGNsaWVudCBkb20gY3JlYXRlZCBieSBhIGhvc3QgZWxlbWVudC5cbiAqXG4gKiBCeSBkZWZhdWx0IGVsZW1lbnRzIGFyZSBmbHVzaGVkIHZpYSBgX2ZsdXNoUHJvcGVydGllc2Agd2hlblxuICogYGNvbm5lY3RlZENhbGxiYWNrYCBpcyBjYWxsZWQuIEVsZW1lbnRzIGF0dGFjaCB0aGVpciBjbGllbnQgZG9tIHRvXG4gKiB0aGVtc2VsdmVzIGF0IGByZWFkeWAgdGltZSB3aGljaCByZXN1bHRzIGZyb20gdGhpcyBmaXJzdCBmbHVzaC5cbiAqIFRoaXMgcHJvdmlkZXMgYW4gb3JkZXJpbmcgZ3VhcmFudGVlIHRoYXQgdGhlIGNsaWVudCBkb20gYW4gZWxlbWVudFxuICogY3JlYXRlcyBpcyBmbHVzaGVkIGJlZm9yZSB0aGUgZWxlbWVudCBpdHNlbGYgKGkuZS4gY2xpZW50IGByZWFkeWBcbiAqIGZpcmVzIGJlZm9yZSBob3N0IGByZWFkeWApLlxuICpcbiAqIEhvd2V2ZXIsIGlmIGBfZmx1c2hQcm9wZXJ0aWVzYCBpcyBjYWxsZWQgKmJlZm9yZSogYW4gZWxlbWVudCBpcyBjb25uZWN0ZWQsXG4gKiBhcyBmb3IgZXhhbXBsZSBgVGVtcGxhdGl6ZWAgZG9lcywgdGhpcyBvcmRlcmluZyBndWFyYW50ZWUgY2Fubm90IGJlXG4gKiBzYXRpc2ZpZWQgYmVjYXVzZSBubyBlbGVtZW50cyBhcmUgY29ubmVjdGVkLiAoTm90ZTogQm91bmQgZWxlbWVudHMgdGhhdFxuICogcmVjZWl2ZSBkYXRhIGRvIGJlY29tZSBlbnF1ZXVlZCBjbGllbnRzIGFuZCBhcmUgcHJvcGVybHkgb3JkZXJlZCBidXRcbiAqIHVuYm91bmQgZWxlbWVudHMgYXJlIG5vdC4pXG4gKlxuICogVG8gbWFpbnRhaW4gdGhlIGRlc2lyZWQgXCJjbGllbnQgYmVmb3JlIGhvc3RcIiBvcmRlcmluZyBndWFyYW50ZWUgZm9yIHRoaXNcbiAqIGNhc2Ugd2UgcmVseSBvbiB0aGUgXCJob3N0IHN0YWNrLiBDbGllbnQgbm9kZXMgcmVnaXN0ZXJzIHRoZW1zZWx2ZXMgd2l0aFxuICogdGhlIGNyZWF0aW5nIGhvc3QgZWxlbWVudCB3aGVuIGNyZWF0ZWQuIFRoaXMgZW5zdXJlcyB0aGF0IGFsbCBjbGllbnQgZG9tXG4gKiBpcyByZWFkaWVkIGluIHRoZSBwcm9wZXIgb3JkZXIsIG1haW50YWluaW5nIHRoZSBkZXNpcmVkIGd1YXJhbnRlZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5sZXQgaG9zdFN0YWNrID0ge1xuXG4gIHN0YWNrOiBbXSxcblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBpbnN0IEluc3RhbmNlIHRvIGFkZCB0byBob3N0U3RhY2tcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHRoaXMge2hvc3RTdGFja31cbiAgICovXG4gIHJlZ2lzdGVySG9zdChpbnN0KSB7XG4gICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICBsZXQgaG9zdCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGgtMV07XG4gICAgICBob3N0Ll9lbnF1ZXVlQ2xpZW50KGluc3QpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBpbnN0IEluc3RhbmNlIHRvIGJlZ2luIGhvc3RpbmdcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHRoaXMge2hvc3RTdGFja31cbiAgICovXG4gIGJlZ2luSG9zdGluZyhpbnN0KSB7XG4gICAgdGhpcy5zdGFjay5wdXNoKGluc3QpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IGluc3QgSW5zdGFuY2UgdG8gZW5kIGhvc3RpbmdcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICogQHRoaXMge2hvc3RTdGFja31cbiAgICovXG4gIGVuZEhvc3RpbmcoaW5zdCkge1xuICAgIGxldCBzdGFja0xlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIGlmIChzdGFja0xlbiAmJiB0aGlzLnN0YWNrW3N0YWNrTGVuLTFdID09IGluc3QpIHtcbiAgICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gICAgfVxuICB9XG5cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCB7IFByb3BlcnRpZXNDaGFuZ2VkIH0gZnJvbSAnLi9wcm9wZXJ0aWVzLWNoYW5nZWQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjb3B5IG9mIGBwcm9wc2Agd2l0aCBlYWNoIHByb3BlcnR5IG5vcm1hbGl6ZWQgc3VjaCB0aGF0XG4gKiB1cGdyYWRlZCBpdCBpcyBhbiBvYmplY3Qgd2l0aCBhdCBsZWFzdCBhIHR5cGUgcHJvcGVydHkgeyB0eXBlOiBUeXBlfS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgUHJvcGVydGllcyB0byBub3JtYWxpemVcbiAqIEByZXR1cm4ge09iamVjdH0gQ29weSBvZiBpbnB1dCBgcHJvcHNgIHdpdGggbm9ybWFsaXplZCBwcm9wZXJ0aWVzIHRoYXRcbiAqIGFyZSBpbiB0aGUgZm9ybSB7dHlwZTogVHlwZX1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIGZvciAobGV0IHAgaW4gcHJvcHMpIHtcbiAgICBjb25zdCBvID0gcHJvcHNbcF07XG4gICAgb3V0cHV0W3BdID0gKHR5cGVvZiBvID09PSAnZnVuY3Rpb24nKSA/IHt0eXBlOiBvfSA6IG87XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBNaXhpbiB0aGF0IHByb3ZpZGVzIGEgbWluaW1hbCBzdGFydGluZyBwb2ludCB0byB1c2luZyB0aGUgUHJvcGVydGllc0NoYW5nZWRcbiAqIG1peGluIGJ5IHByb3ZpZGluZyBhIG1lY2hhbmlzbSB0byBkZWNsYXJlIHByb3BlcnRpZXMgaW4gYSBzdGF0aWNcbiAqIGdldHRlciAoZS5nLiBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7IHJldHVybiB7IGZvbzogU3RyaW5nIH0gfSkuIENoYW5nZXNcbiAqIGFyZSByZXBvcnRlZCB2aWEgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZC5cbiAqXG4gKiBUaGlzIG1peGluIHByb3ZpZGVzIG5vIHNwZWNpZmljIHN1cHBvcnQgZm9yIHJlbmRlcmluZy4gVXNlcnMgYXJlIGV4cGVjdGVkXG4gKiB0byBjcmVhdGUgYSBTaGFkb3dSb290IGFuZCBwdXQgY29udGVudCBpbnRvIGl0IGFuZCB1cGRhdGUgaXQgaW4gd2hhdGV2ZXJcbiAqIHdheSBtYWtlcyBzZW5zZS4gVGhpcyBjYW4gYmUgZG9uZSBpbiByZWFjdGlvbiB0byBwcm9wZXJ0aWVzIGNoYW5naW5nIGJ5XG4gKiBpbXBsZW1lbnRpbmcgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAuXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIFByb3BlcnRpZXNDaGFuZ2VkXG4gKiBAc3VtbWFyeSBNaXhpbiB0aGF0IHByb3ZpZGVzIGEgbWluaW1hbCBzdGFydGluZyBwb2ludCBmb3IgdXNpbmdcbiAqIHRoZSBQcm9wZXJ0aWVzQ2hhbmdlZCBtaXhpbiBieSBwcm92aWRpbmcgYSBkZWNsYXJhdGl2ZSBgcHJvcGVydGllc2Agb2JqZWN0LlxuICovXG5leHBvcnQgY29uc3QgUHJvcGVydGllc01peGluID0gZGVkdXBpbmdNaXhpbihzdXBlckNsYXNzID0+IHtcblxuIC8qKlxuICAqIEBjb25zdHJ1Y3RvclxuICAqIEBleHRlbmRzIHtzdXBlckNsYXNzfVxuICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnRpZXNDaGFuZ2VkfVxuICAqL1xuIGNvbnN0IGJhc2UgPSBQcm9wZXJ0aWVzQ2hhbmdlZChzdXBlckNsYXNzKTtcblxuIC8qKlxuICAqIFJldHVybnMgdGhlIHN1cGVyIGNsYXNzIGNvbnN0cnVjdG9yIGZvciB0aGUgZ2l2ZW4gY2xhc3MsIGlmIGl0IGlzIGFuXG4gICogaW5zdGFuY2Ugb2YgdGhlIFByb3BlcnRpZXNNaXhpbi5cbiAgKlxuICAqIEBwYXJhbSB7IVByb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBQcm9wZXJ0aWVzTWl4aW4gY29uc3RydWN0b3JcbiAgKiBAcmV0dXJuIHtQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gU3VwZXIgY2xhc3MgY29uc3RydWN0b3JcbiAgKi9cbiBmdW5jdGlvbiBzdXBlclByb3BlcnRpZXNDbGFzcyhjb25zdHJ1Y3Rvcikge1xuICAgY29uc3Qgc3VwZXJDdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNvbnN0cnVjdG9yKTtcblxuICAgLy8gTm90ZSwgdGhlIGBQcm9wZXJ0aWVzTWl4aW5gIGNsYXNzIGJlbG93IG9ubHkgcmVmZXJzIHRvIHRoZSBjbGFzc1xuICAgLy8gZ2VuZXJhdGVkIGJ5IHRoaXMgY2FsbCB0byB0aGUgbWl4aW47IHRoZSBpbnN0YW5jZW9mIHRlc3Qgb25seSB3b3Jrc1xuICAgLy8gYmVjYXVzZSB0aGUgbWl4aW4gaXMgZGVkdXBlZCBhbmQgZ3VhcmFudGVlZCBvbmx5IHRvIGFwcGx5IG9uY2UsIGhlbmNlXG4gICAvLyBhbGwgY29uc3RydWN0b3JzIGluIGEgcHJvdG8gY2hhaW4gd2lsbCBzZWUgdGhlIHNhbWUgYFByb3BlcnRpZXNNaXhpbmBcbiAgIHJldHVybiAoc3VwZXJDdG9yLnByb3RvdHlwZSBpbnN0YW5jZW9mIFByb3BlcnRpZXNNaXhpbikgP1xuICAgICAvKiogQHR5cGUge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyAoc3VwZXJDdG9yKSA6IG51bGw7XG4gfVxuXG4gLyoqXG4gICogUmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIGBwcm9wZXJ0aWVzYCBvYmplY3QgZm9yIHRoZVxuICAqIGdpdmVuIGNsYXNzLiBQcm9wZXJ0aWVzIG5vdCBpbiBvYmplY3QgZm9ybWF0IGFyZSBjb252ZXJ0ZWQgdG8gYXRcbiAgKiBsZWFzdCB7dHlwZX0uXG4gICpcbiAgKiBAcGFyYW0ge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBQcm9wZXJ0aWVzTWl4aW4gY29uc3RydWN0b3JcbiAgKiBAcmV0dXJuIHtPYmplY3R9IE1lbW9pemVkIHByb3BlcnRpZXMgb2JqZWN0XG4gICovXG4gZnVuY3Rpb24gb3duUHJvcGVydGllcyhjb25zdHJ1Y3Rvcikge1xuICAgaWYgKCFjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX293blByb3BlcnRpZXMnLCBjb25zdHJ1Y3RvcikpKSB7XG4gICAgIGxldCBwcm9wcyA9IG51bGw7XG5cbiAgICAgaWYgKGNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3Byb3BlcnRpZXMnLCBjb25zdHJ1Y3RvcikpICYmIGNvbnN0cnVjdG9yLnByb3BlcnRpZXMpIHtcbiAgICAgICBwcm9wcyA9IG5vcm1hbGl6ZVByb3BlcnRpZXMoY29uc3RydWN0b3IucHJvcGVydGllcyk7XG4gICAgIH1cblxuICAgICBjb25zdHJ1Y3Rvci5fX293blByb3BlcnRpZXMgPSBwcm9wcztcbiAgIH1cbiAgIHJldHVybiBjb25zdHJ1Y3Rvci5fX293blByb3BlcnRpZXM7XG4gfVxuXG4gLyoqXG4gICogQHBvbHltZXJcbiAgKiBAbWl4aW5DbGFzc1xuICAqIEBleHRlbmRzIHtiYXNlfVxuICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnRpZXNNaXhpbn1cbiAgKiBAdW5yZXN0cmljdGVkXG4gICovXG4gY2xhc3MgUHJvcGVydGllc01peGluIGV4dGVuZHMgYmFzZSB7XG5cbiAgIC8qKlxuICAgICogSW1wbGVtZW50cyBzdGFuZGFyZCBjdXN0b20gZWxlbWVudHMgZ2V0dGVyIHRvIG9ic2VydmVzIHRoZSBhdHRyaWJ1dGVzXG4gICAgKiBsaXN0ZWQgaW4gYHByb3BlcnRpZXNgLlxuICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgKi9cbiAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICBjb25zdCBwcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgIHJldHVybiBwcm9wcyA/IE9iamVjdC5rZXlzKHByb3BzKS5tYXAocCA9PiB0aGlzLmF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwKSkgOiBbXTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiBGaW5hbGl6ZXMgYW4gZWxlbWVudCBkZWZpbml0aW9uLCBpbmNsdWRpbmcgZW5zdXJpbmcgYW55IHN1cGVyIGNsYXNzZXNcbiAgICAqIGFyZSBhbHNvIGZpbmFsaXplZC4gVGhpcyBpbmNsdWRlcyBlbnN1cmluZyBwcm9wZXJ0eVxuICAgICogYWNjZXNzb3JzIGV4aXN0IG9uIHRoZSBlbGVtZW50IHByb3RvdHlwZS4gVGhpcyBtZXRob2QgY2FsbHNcbiAgICAqIGBfZmluYWxpemVDbGFzc2AgdG8gZmluYWxpemUgZWFjaCBjb25zdHJ1Y3RvciBpbiB0aGUgcHJvdG90eXBlIGNoYWluLlxuICAgICogQHJldHVybiB7dm9pZH1cbiAgICAqL1xuICAgc3RhdGljIGZpbmFsaXplKCkge1xuICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19maW5hbGl6ZWQnLCB0aGlzKSkpIHtcbiAgICAgICBjb25zdCBzdXBlckN0b3IgPSBzdXBlclByb3BlcnRpZXNDbGFzcygvKiogQHR5cGUge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyh0aGlzKSk7XG4gICAgICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgICAgc3VwZXJDdG9yLmZpbmFsaXplKCk7XG4gICAgICAgfVxuICAgICAgIHRoaXMuX19maW5hbGl6ZWQgPSB0cnVlO1xuICAgICAgIHRoaXMuX2ZpbmFsaXplQ2xhc3MoKTtcbiAgICAgfVxuICAgfVxuXG4gICAvKipcbiAgICAqIEZpbmFsaXplIGFuIGVsZW1lbnQgY2xhc3MuIFRoaXMgaW5jbHVkZXMgZW5zdXJpbmcgcHJvcGVydHlcbiAgICAqIGFjY2Vzc29ycyBleGlzdCBvbiB0aGUgZWxlbWVudCBwcm90b3R5cGUuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieVxuICAgICogYGZpbmFsaXplYCBhbmQgZmluYWxpemVzIHRoZSBjbGFzcyBjb25zdHJ1Y3Rvci5cbiAgICAqXG4gICAgKiBAcHJvdGVjdGVkXG4gICAgKi9cbiAgIHN0YXRpYyBfZmluYWxpemVDbGFzcygpIHtcbiAgICAgY29uc3QgcHJvcHMgPSBvd25Qcm9wZXJ0aWVzKC8qKiBAdHlwZSB7UHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKTtcbiAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0aWVzKHByb3BzKTtcbiAgICAgfVxuICAgfVxuXG4gICAvKipcbiAgICAqIFJldHVybnMgYSBtZW1vaXplZCB2ZXJzaW9uIG9mIGFsbCBwcm9wZXJ0aWVzLCBpbmNsdWRpbmcgdGhvc2UgaW5oZXJpdGVkXG4gICAgKiBmcm9tIHN1cGVyIGNsYXNzZXMuIFByb3BlcnRpZXMgbm90IGluIG9iamVjdCBmb3JtYXQgYXJlIGNvbnZlcnRlZCB0b1xuICAgICogYXQgbGVhc3Qge3R5cGV9LlxuICAgICpcbiAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBmb3IgdGhpcyBjbGFzc1xuICAgICogQHByb3RlY3RlZFxuICAgICovXG4gICBzdGF0aWMgZ2V0IF9wcm9wZXJ0aWVzKCkge1xuICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoXG4gICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19wcm9wZXJ0aWVzJywgdGhpcykpKSB7XG4gICAgICAgY29uc3Qgc3VwZXJDdG9yID0gc3VwZXJQcm9wZXJ0aWVzQ2xhc3MoLyoqIEB0eXBlIHtQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gKi8odGhpcykpO1xuICAgICAgIHRoaXMuX19wcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7fSxcbiAgICAgICAgIHN1cGVyQ3RvciAmJiBzdXBlckN0b3IuX3Byb3BlcnRpZXMsXG4gICAgICAgICBvd25Qcm9wZXJ0aWVzKC8qKiBAdHlwZSB7UHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKSk7XG4gICAgIH1cbiAgICAgcmV0dXJuIHRoaXMuX19wcm9wZXJ0aWVzO1xuICAgfVxuXG4gICAvKipcbiAgICAqIE92ZXJyaWRlcyBgUHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZCB0byByZXR1cm4gdHlwZSBzcGVjaWZpZWQgaW4gdGhlXG4gICAgKiBzdGF0aWMgYHByb3BlcnRpZXNgIG9iamVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eVxuICAgICogQHJldHVybiB7Kn0gVHlwZSB0byB3aGljaCB0byBkZXNlcmlhbGl6ZSBhdHRyaWJ1dGVcbiAgICAqXG4gICAgKiBAcHJvdGVjdGVkXG4gICAgKi9cbiAgIHN0YXRpYyB0eXBlRm9yUHJvcGVydHkobmFtZSkge1xuICAgICBjb25zdCBpbmZvID0gdGhpcy5fcHJvcGVydGllc1tuYW1lXTtcbiAgICAgcmV0dXJuIGluZm8gJiYgaW5mby50eXBlO1xuICAgfVxuXG4gICAvKipcbiAgICAqIE92ZXJyaWRlcyBgUHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZCBhbmQgYWRkcyBhIGNhbGwgdG9cbiAgICAqIGBmaW5hbGl6ZWAgd2hpY2ggbGF6aWx5IGNvbmZpZ3VyZXMgdGhlIGVsZW1lbnQncyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgKiBAb3ZlcnJpZGVcbiAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgKi9cbiAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgdGhpcy5jb25zdHJ1Y3Rvci5maW5hbGl6ZSgpO1xuICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBhZGRlZCB0byBhIGRvY3VtZW50LlxuICAgICogQ2FsbHMgYF9lbmFibGVQcm9wZXJ0aWVzYCB0byB0dXJuIG9uIHByb3BlcnR5IHN5c3RlbSBmcm9tXG4gICAgKiBgUHJvcGVydGllc0NoYW5nZWRgLlxuICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gU3VwZXIgbWF5IG9yIG1heSBub3QgaW1wbGVtZW50IHRoZSBjYWxsYmFja1xuICAgICogQHJldHVybiB7dm9pZH1cbiAgICAqL1xuICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgIGlmIChzdXBlci5jb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgIH1cbiAgICAgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpO1xuICAgfVxuXG4gICAvKipcbiAgICAqIENhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSBhIGRvY3VtZW50XG4gICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBTdXBlciBtYXkgb3IgbWF5IG5vdCBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICovXG4gICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgaWYgKHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgfVxuICAgfVxuXG4gfVxuXG4gcmV0dXJuIFByb3BlcnRpZXNNaXhpbjtcblxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgcm9vdFBhdGggYXMgcm9vdFBhdGgkMCB9IGZyb20gJy4uL3V0aWxzL3NldHRpbmdzLmpzJztcbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgeyBzdHlsZXNGcm9tVGVtcGxhdGUsIHN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzIH0gZnJvbSAnLi4vdXRpbHMvc3R5bGUtZ2F0aGVyLmpzJztcbmltcG9ydCB7IHBhdGhGcm9tVXJsLCByZXNvbHZlQ3NzLCByZXNvbHZlVXJsIGFzIHJlc29sdmVVcmwkMCB9IGZyb20gJy4uL3V0aWxzL3Jlc29sdmUtdXJsLmpzJztcbmltcG9ydCB7IERvbU1vZHVsZSB9IGZyb20gJy4uL2VsZW1lbnRzL2RvbS1tb2R1bGUuanMnO1xuaW1wb3J0IHsgUHJvcGVydHlFZmZlY3RzIH0gZnJvbSAnLi9wcm9wZXJ0eS1lZmZlY3RzLmpzJztcbmltcG9ydCB7IFByb3BlcnRpZXNNaXhpbiB9IGZyb20gJy4vcHJvcGVydGllcy1taXhpbi5qcyc7XG5cbi8qKlxuICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzIG1ldGEtcHJvZ3JhbW1pbmdcbiAqIGZlYXR1cmVzIGluY2x1ZGluZyB0ZW1wbGF0ZSBzdGFtcGluZywgZGF0YS1iaW5kaW5nLCBhdHRyaWJ1dGUgZGVzZXJpYWxpemF0aW9uLFxuICogYW5kIHByb3BlcnR5IGNoYW5nZSBvYnNlcnZhdGlvbi5cbiAqXG4gKiBTdWJjbGFzc2VycyBtYXkgcHJvdmlkZSB0aGUgZm9sbG93aW5nIHN0YXRpYyBnZXR0ZXJzIHRvIHJldHVybiBtZXRhZGF0YVxuICogdXNlZCB0byBjb25maWd1cmUgUG9seW1lcidzIGZlYXR1cmVzIGZvciB0aGUgY2xhc3M6XG4gKlxuICogLSBgc3RhdGljIGdldCBpcygpYDogV2hlbiB0aGUgdGVtcGxhdGUgaXMgcHJvdmlkZWQgdmlhIGEgYGRvbS1tb2R1bGVgLFxuICogICB1c2VycyBzaG91bGQgcmV0dXJuIHRoZSBgZG9tLW1vZHVsZWAgaWQgZnJvbSBhIHN0YXRpYyBgaXNgIGdldHRlci4gIElmXG4gKiAgIG5vIHRlbXBsYXRlIGlzIG5lZWRlZCBvciB0aGUgdGVtcGxhdGUgaXMgcHJvdmlkZWQgZGlyZWN0bHkgdmlhIHRoZVxuICogICBgdGVtcGxhdGVgIGdldHRlciwgdGhlcmUgaXMgbm8gbmVlZCB0byBkZWZpbmUgYGlzYCBmb3IgdGhlIGVsZW1lbnQuXG4gKlxuICogLSBgc3RhdGljIGdldCB0ZW1wbGF0ZSgpYDogVXNlcnMgbWF5IHByb3ZpZGUgdGhlIHRlbXBsYXRlIGRpcmVjdGx5IChhc1xuICogICBvcHBvc2VkIHRvIHZpYSBgZG9tLW1vZHVsZWApIGJ5IGltcGxlbWVudGluZyBhIHN0YXRpYyBgdGVtcGxhdGVgIGdldHRlci5cbiAqICAgVGhlIGdldHRlciBtYXkgcmV0dXJuIGFuIGBIVE1MVGVtcGxhdGVFbGVtZW50YCBvciBhIHN0cmluZywgd2hpY2ggd2lsbFxuICogICBhdXRvbWF0aWNhbGx5IGJlIHBhcnNlZCBpbnRvIGEgdGVtcGxhdGUuXG4gKlxuICogLSBgc3RhdGljIGdldCBwcm9wZXJ0aWVzKClgOiBTaG91bGQgcmV0dXJuIGFuIG9iamVjdCBkZXNjcmliaW5nXG4gKiAgIHByb3BlcnR5LXJlbGF0ZWQgbWV0YWRhdGEgdXNlZCBieSBQb2x5bWVyIGZlYXR1cmVzIChrZXk6IHByb3BlcnR5IG5hbWVcbiAqICAgdmFsdWU6IG9iamVjdCBjb250YWluaW5nIHByb3BlcnR5IG1ldGFkYXRhKS4gVmFsaWQga2V5cyBpbiBwZXItcHJvcGVydHlcbiAqICAgbWV0YWRhdGEgaW5jbHVkZTpcbiAqICAgLSBgdHlwZWAgKFN0cmluZ3xOdW1iZXJ8T2JqZWN0fEFycmF5fC4uLik6IFVzZWQgYnlcbiAqICAgICBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCB0byBkZXRlcm1pbmUgaG93IHN0cmluZy1iYXNlZCBhdHRyaWJ1dGVzXG4gKiAgICAgYXJlIGRlc2VyaWFsaXplZCB0byBKYXZhU2NyaXB0IHByb3BlcnR5IHZhbHVlcy5cbiAqICAgLSBgbm90aWZ5YCAoYm9vbGVhbik6IENhdXNlcyBhIGNoYW5nZSBpbiB0aGUgcHJvcGVydHkgdG8gZmlyZSBhXG4gKiAgICAgbm9uLWJ1YmJsaW5nIGV2ZW50IGNhbGxlZCBgPHByb3BlcnR5Pi1jaGFuZ2VkYC4gRWxlbWVudHMgdGhhdCBoYXZlXG4gKiAgICAgZW5hYmxlZCB0d28td2F5IGJpbmRpbmcgdG8gdGhlIHByb3BlcnR5IHVzZSB0aGlzIGV2ZW50IHRvIG9ic2VydmUgY2hhbmdlcy5cbiAqICAgLSBgcmVhZE9ubHlgIChib29sZWFuKTogQ3JlYXRlcyBhIGdldHRlciBmb3IgdGhlIHByb3BlcnR5LCBidXQgbm8gc2V0dGVyLlxuICogICAgIFRvIHNldCBhIHJlYWQtb25seSBwcm9wZXJ0eSwgdXNlIHRoZSBwcml2YXRlIHNldHRlciBtZXRob2RcbiAqICAgICBgX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSlgLlxuICogICAtIGBvYnNlcnZlcmAgKHN0cmluZyk6IE9ic2VydmVyIG1ldGhvZCBuYW1lIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlblxuICogICAgIHRoZSBwcm9wZXJ0eSBjaGFuZ2VzLiBUaGUgYXJndW1lbnRzIG9mIHRoZSBtZXRob2QgYXJlXG4gKiAgICAgYCh2YWx1ZSwgcHJldmlvdXNWYWx1ZSlgLlxuICogICAtIGBjb21wdXRlZGAgKHN0cmluZyk6IFN0cmluZyBkZXNjcmliaW5nIG1ldGhvZCBhbmQgZGVwZW5kZW50IHByb3BlcnRpZXNcbiAqICAgICBmb3IgY29tcHV0aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5IChlLmcuIGAnY29tcHV0ZUZvbyhiYXIsIHpvdCknYCkuXG4gKiAgICAgQ29tcHV0ZWQgcHJvcGVydGllcyBhcmUgcmVhZC1vbmx5IGJ5IGRlZmF1bHQgYW5kIGNhbiBvbmx5IGJlIGNoYW5nZWRcbiAqICAgICB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY29tcHV0aW5nIG1ldGhvZC5cbiAqXG4gKiAtIGBzdGF0aWMgZ2V0IG9ic2VydmVycygpYDogQXJyYXkgb2Ygc3RyaW5ncyBkZXNjcmliaW5nIG11bHRpLXByb3BlcnR5XG4gKiAgIG9ic2VydmVyIG1ldGhvZHMgYW5kIHRoZWlyIGRlcGVuZGVudCBwcm9wZXJ0aWVzIChlLmcuXG4gKiAgIGAnb2JzZXJ2ZUFCQyhhLCBiLCBjKSdgKS5cbiAqXG4gKiBUaGUgYmFzZSBjbGFzcyBwcm92aWRlcyBkZWZhdWx0IGltcGxlbWVudGF0aW9ucyBmb3IgdGhlIGZvbGxvd2luZyBzdGFuZGFyZFxuICogY3VzdG9tIGVsZW1lbnQgbGlmZWN5Y2xlIGNhbGxiYWNrczsgdXNlcnMgbWF5IG92ZXJyaWRlIHRoZXNlLCBidXQgc2hvdWxkXG4gKiBjYWxsIHRoZSBzdXBlciBtZXRob2QgdG8gZW5zdXJlXG4gKiAtIGBjb25zdHJ1Y3RvcmA6IFJ1biB3aGVuIHRoZSBlbGVtZW50IGlzIGNyZWF0ZWQgb3IgdXBncmFkZWRcbiAqIC0gYGNvbm5lY3RlZENhbGxiYWNrYDogUnVuIGVhY2ggdGltZSB0aGUgZWxlbWVudCBpcyBjb25uZWN0ZWQgdG8gdGhlXG4gKiAgIGRvY3VtZW50XG4gKiAtIGBkaXNjb25uZWN0ZWRDYWxsYmFja2A6IFJ1biBlYWNoIHRpbWUgdGhlIGVsZW1lbnQgaXMgZGlzY29ubmVjdGVkIGZyb21cbiAqICAgdGhlIGRvY3VtZW50XG4gKiAtIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgOiBSdW4gZWFjaCB0aW1lIGFuIGF0dHJpYnV0ZSBpblxuICogICBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYCBpcyBzZXQgb3IgcmVtb3ZlZCAobm90ZTogdGhpcyBlbGVtZW50J3MgZGVmYXVsdFxuICogICBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYCBpbXBsZW1lbnRhdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgcmV0dXJuIGFuIGFycmF5XG4gKiAgIG9mIGRhc2gtY2FzZWQgYXR0cmlidXRlcyBiYXNlZCBvbiBgcHJvcGVydGllc2ApXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIFByb3BlcnR5RWZmZWN0c1xuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0aWVzTWl4aW5cbiAqIEBwcm9wZXJ0eSByb290UGF0aCB7c3RyaW5nfSBTZXQgdG8gdGhlIHZhbHVlIG9mIGByb290UGF0aGAsXG4gKiAgIHdoaWNoIGRlZmF1bHRzIHRvIHRoZSBtYWluIGRvY3VtZW50IHBhdGhcbiAqIEBwcm9wZXJ0eSBpbXBvcnRQYXRoIHtzdHJpbmd9IFNldCB0byB0aGUgdmFsdWUgb2YgdGhlIGNsYXNzJ3Mgc3RhdGljXG4gKiAgIGBpbXBvcnRQYXRoYCBwcm9wZXJ0eSwgd2hpY2ggZGVmYXVsdHMgdG8gdGhlIHBhdGggb2YgdGhpcyBlbGVtZW50J3NcbiAqICAgYGRvbS1tb2R1bGVgICh3aGVuIGBpc2AgaXMgdXNlZCksIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBmb3Igb3RoZXJcbiAqICAgaW1wb3J0IHN0cmF0ZWdpZXMuXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgdGhlIGNvcmUgQVBJIGZvciBQb2x5bWVyJ3NcbiAqIG1ldGEtcHJvZ3JhbW1pbmcgZmVhdHVyZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBFbGVtZW50TWl4aW4gPSBkZWR1cGluZ01peGluKGJhc2UgPT4ge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge2Jhc2V9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c31cbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydGllc01peGlufVxuICAgKi9cbiAgY29uc3QgcG9seW1lckVsZW1lbnRCYXNlID0gUHJvcGVydGllc01peGluKFByb3BlcnR5RWZmZWN0cyhiYXNlKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHByb3BlcnRpZXMgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAgICogVGhpcyBsaXN0IGlzIGNyZWF0ZWQgYXMgYW4gb3B0aW1pemF0aW9uIHNpbmNlIGl0IGlzIGEgc3Vic2V0IG9mXG4gICAqIHRoZSBsaXN0IHJldHVybmVkIGZyb20gYF9wcm9wZXJ0aWVzYC5cbiAgICogVGhpcyBsaXN0IGlzIHVzZWQgaW4gYF9pbml0aWFsaXplUHJvcGVydGllc2AgdG8gc2V0IHByb3BlcnR5IGRlZmF1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yIEVsZW1lbnQgY2xhc3NcbiAgICogQHJldHVybiB7UG9seW1lckVsZW1lbnRQcm9wZXJ0aWVzfSBGbGF0dGVuZWQgcHJvcGVydGllcyBmb3IgdGhpcyBjbGFzc1xuICAgKiAgIHRoYXQgaGF2ZSBkZWZhdWx0IHZhbHVlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcHJvcGVydHlEZWZhdWx0cyhjb25zdHJ1Y3Rvcikge1xuICAgIGlmICghY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoXG4gICAgICBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX3Byb3BlcnR5RGVmYXVsdHMnLCBjb25zdHJ1Y3RvcikpKSB7XG4gICAgICBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHMgPSBudWxsO1xuICAgICAgbGV0IHByb3BzID0gY29uc3RydWN0b3IuX3Byb3BlcnRpZXM7XG4gICAgICBmb3IgKGxldCBwIGluIHByb3BzKSB7XG4gICAgICAgIGxldCBpbmZvID0gcHJvcHNbcF07XG4gICAgICAgIGlmICgndmFsdWUnIGluIGluZm8pIHtcbiAgICAgICAgICBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHMgPSBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHMgfHwge307XG4gICAgICAgICAgY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzW3BdID0gaW5mbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBtZW1vaXplZCB2ZXJzaW9uIG9mIHRoZSB0aGUgYG9ic2VydmVyc2AgYXJyYXkuXG4gICAqIEBwYXJhbSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3IgRWxlbWVudCBjbGFzc1xuICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgY29udGFpbmluZyBvd24gb2JzZXJ2ZXJzIGZvciB0aGUgZ2l2ZW4gY2xhc3NcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZnVuY3Rpb24gb3duT2JzZXJ2ZXJzKGNvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCFjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcbiAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fb3duT2JzZXJ2ZXJzJywgY29uc3RydWN0b3IpKSkge1xuICAgICAgICBjb25zdHJ1Y3Rvci5fX293bk9ic2VydmVycyA9XG4gICAgICAgIGNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ29ic2VydmVycycsIGNvbnN0cnVjdG9yKSkgP1xuICAgICAgICAvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9ICovIChjb25zdHJ1Y3Rvcikub2JzZXJ2ZXJzIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLl9fb3duT2JzZXJ2ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgZWZmZWN0cyBmb3IgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogTm90ZSwgb25jZSBhIHByb3BlcnR5IGhhcyBiZWVuIHNldCB0b1xuICAgKiBgcmVhZE9ubHlgLCBgY29tcHV0ZWRgLCBgcmVmbGVjdFRvQXR0cmlidXRlYCwgb3IgYG5vdGlmeWBcbiAgICogdGhlc2UgdmFsdWVzIG1heSBub3QgYmUgY2hhbmdlZC4gRm9yIGV4YW1wbGUsIGEgc3ViY2xhc3MgY2Fubm90XG4gICAqIGFsdGVyIHRoZXNlIHNldHRpbmdzLiBIb3dldmVyLCBhZGRpdGlvbmFsIGBvYnNlcnZlcnNgIG1heSBiZSBhZGRlZFxuICAgKiBieSBzdWJjbGFzc2VzLlxuICAgKlxuICAgKiBUaGUgaW5mbyBvYmplY3Qgc2hvdWxkIG1heSBjb250YWluIHByb3BlcnR5IG1ldGFkYXRhIGFzIGZvbGxvd3M6XG4gICAqXG4gICAqICogYHR5cGVgOiB7ZnVuY3Rpb259IHR5cGUgdG8gd2hpY2ggYW4gYXR0cmlidXRlIG1hdGNoaW5nIHRoZSBwcm9wZXJ0eVxuICAgKiBpcyBkZXNlcmlhbGl6ZWQuIE5vdGUgdGhlIHByb3BlcnR5IGlzIGNhbWVsLWNhc2VkIGZyb20gYSBkYXNoLWNhc2VkXG4gICAqIGF0dHJpYnV0ZS4gRm9yIGV4YW1wbGUsICdmb28tYmFyJyBhdHRyaWJ1dGUgaXMgZGVzZXJpYWxpemVkIHRvIGFcbiAgICogcHJvcGVydHkgbmFtZWQgJ2Zvb0JhcicuXG4gICAqXG4gICAqICogYHJlYWRPbmx5YDoge2Jvb2xlYW59IGNyZWF0ZXMgYSByZWFkT25seSBwcm9wZXJ0eSBhbmRcbiAgICogbWFrZXMgYSBwcml2YXRlIHNldHRlciBmb3IgdGhlIHByaXZhdGUgb2YgdGhlIGZvcm0gJ19zZXRGb28nIGZvciBhXG4gICAqIHByb3BlcnR5ICdmb28nLFxuICAgKlxuICAgKiAqIGBjb21wdXRlZGA6IHtzdHJpbmd9IGNyZWF0ZXMgYSBjb21wdXRlZCBwcm9wZXJ0eS4gQSBjb21wdXRlZCBwcm9wZXJ0eVxuICAgKiBhbHNvIGF1dG9tYXRpY2FsbHkgaXMgc2V0IHRvIGByZWFkT25seTogdHJ1ZWAuIFRoZSB2YWx1ZSBpcyBjYWxjdWxhdGVkXG4gICAqIGJ5IHJ1bm5pbmcgYSBtZXRob2QgYW5kIGFyZ3VtZW50cyBwYXJzZWQgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLiBGb3JcbiAgICogZXhhbXBsZSAnY29tcHV0ZShmb28pJyB3aWxsIGNvbXB1dGUgYSBnaXZlbiBwcm9wZXJ0eSB3aGVuIHRoZVxuICAgKiAnZm9vJyBwcm9wZXJ0eSBjaGFuZ2VzIGJ5IGV4ZWN1dGluZyB0aGUgJ2NvbXB1dGUnIG1ldGhvZC4gVGhpcyBtZXRob2RcbiAgICogbXVzdCByZXR1cm4gdGhlIGNvbXB1dGVkIHZhbHVlLlxuICAgKlxuICAgKiAqIGByZWZsZWN0VG9BdHRyaWJ1dGVgOiB7Ym9vbGVhbn0gSWYgdHJ1ZSwgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHJlZmxlY3RlZFxuICAgKiB0byBhbiBhdHRyaWJ1dGUgb2YgdGhlIHNhbWUgbmFtZS4gTm90ZSwgdGhlIGF0dHJpYnV0ZSBpcyBkYXNoLWNhc2VkXG4gICAqIHNvIGEgcHJvcGVydHkgbmFtZWQgJ2Zvb0JhcicgaXMgcmVmbGVjdGVkIGFzICdmb28tYmFyJy5cbiAgICpcbiAgICogKiBgbm90aWZ5YDoge2Jvb2xlYW59IHNlbmRzIGEgbm9uLWJ1YmJsaW5nIG5vdGlmaWNhdGlvbiBldmVudCB3aGVuXG4gICAqIHRoZSBwcm9wZXJ0eSBjaGFuZ2VzLiBGb3IgZXhhbXBsZSwgYSBwcm9wZXJ0eSBuYW1lZCAnZm9vJyBzZW5kcyBhblxuICAgKiBldmVudCBuYW1lZCAnZm9vLWNoYW5nZWQnIHdpdGggYGV2ZW50LmRldGFpbGAgc2V0IHRvIHRoZSB2YWx1ZSBvZlxuICAgKiB0aGUgcHJvcGVydHkuXG4gICAqXG4gICAqICogb2JzZXJ2ZXI6IHtzdHJpbmd9IG5hbWUgb2YgYSBtZXRob2QgdGhhdCBydW5zIHdoZW4gdGhlIHByb3BlcnR5XG4gICAqIGNoYW5nZXMuIFRoZSBhcmd1bWVudHMgb2YgdGhlIG1ldGhvZCBhcmUgKHZhbHVlLCBwcmV2aW91c1ZhbHVlKS5cbiAgICpcbiAgICogTm90ZTogVXNlcnMgbWF5IHdhbnQgY29udHJvbCBvdmVyIG1vZGlmeWluZyBwcm9wZXJ0eVxuICAgKiBlZmZlY3RzIHZpYSBzdWJjbGFzc2luZy4gRm9yIGV4YW1wbGUsIGEgdXNlciBtaWdodCB3YW50IHRvIG1ha2UgYVxuICAgKiByZWZsZWN0VG9BdHRyaWJ1dGUgcHJvcGVydHkgbm90IGRvIHNvIGluIGEgc3ViY2xhc3MuIFdlJ3ZlIGNob3NlbiB0b1xuICAgKiBkaXNhYmxlIHRoaXMgYmVjYXVzZSBpdCBsZWFkcyB0byBhZGRpdGlvbmFsIGNvbXBsaWNhdGlvbi5cbiAgICogRm9yIGV4YW1wbGUsIGEgcmVhZE9ubHkgZWZmZWN0IGdlbmVyYXRlcyBhIHNwZWNpYWwgc2V0dGVyLiBJZiBhIHN1YmNsYXNzXG4gICAqIGRpc2FibGVzIHRoZSBlZmZlY3QsIHRoZSBzZXR0ZXIgd291bGQgZmFpbCB1bmV4cGVjdGVkbHkuXG4gICAqIEJhc2VkIG9uIGZlZWRiYWNrLCB3ZSBtYXkgd2FudCB0byB0cnkgdG8gbWFrZSBlZmZlY3RzIG1vcmUgbWFsbGVhYmxlXG4gICAqIGFuZC9vciBwcm92aWRlIGFuIGFkdmFuY2VkIGFwaSBmb3IgbWFuaXB1bGF0aW5nIHRoZW0uXG4gICAqIEFsc28gY29uc2lkZXIgYWRkaW5nIHdhcm5pbmdzIHdoZW4gYW4gZWZmZWN0IGNhbm5vdCBiZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0geyFQb2x5bWVyRWxlbWVudH0gcHJvdG8gRWxlbWVudCBjbGFzcyBwcm90b3R5cGUgdG8gYWRkIGFjY2Vzc29yc1xuICAgKiAgIGFuZCBlZmZlY3RzIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHByb3BlcnR5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyBJbmZvIG9iamVjdCBmcm9tIHdoaWNoIHRvIGNyZWF0ZSBwcm9wZXJ0eSBlZmZlY3RzLlxuICAgKiBTdXBwb3J0ZWQga2V5czpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFsbFByb3BzIEZsYXR0ZW5lZCBtYXAgb2YgYWxsIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGlzXG4gICAqICAgZWxlbWVudCAoaW5jbHVkaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzKVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlGcm9tQ29uZmlnKHByb3RvLCBuYW1lLCBpbmZvLCBhbGxQcm9wcykge1xuICAgIC8vIGNvbXB1dGVkIGZvcmNlcyByZWFkT25seS4uLlxuICAgIGlmIChpbmZvLmNvbXB1dGVkKSB7XG4gICAgICBpbmZvLnJlYWRPbmx5ID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gTm90ZSwgc2luY2UgYWxsIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIHJlYWRPbmx5LCB0aGlzIHByZXZlbnRzXG4gICAgLy8gYWRkaW5nIGFkZGl0aW9uYWwgY29tcHV0ZWQgcHJvcGVydHkgZWZmZWN0cyAod2hpY2ggbGVhZHMgdG8gYSBjb25mdXNpbmdcbiAgICAvLyBzZXR1cCB3aGVyZSBtdWx0aXBsZSB0cmlnZ2VycyBmb3Igc2V0dGluZyBhIHByb3BlcnR5KVxuICAgIC8vIFdoaWxlIHdlIGRvIGhhdmUgYGhhc0NvbXB1dGVkRWZmZWN0YCB0aGlzIGlzIHNldCBvbiB0aGUgcHJvcGVydHknc1xuICAgIC8vIGRlcGVuZGVuY2llcyByYXRoZXIgdGhhbiBpdHNlbGYuXG4gICAgaWYgKGluZm8uY29tcHV0ZWQgJiYgIXByb3RvLl9oYXNSZWFkT25seUVmZmVjdChuYW1lKSkge1xuICAgICAgcHJvdG8uX2NyZWF0ZUNvbXB1dGVkUHJvcGVydHkobmFtZSwgaW5mby5jb21wdXRlZCwgYWxsUHJvcHMpO1xuICAgIH1cbiAgICBpZiAoaW5mby5yZWFkT25seSAmJiAhcHJvdG8uX2hhc1JlYWRPbmx5RWZmZWN0KG5hbWUpKSB7XG4gICAgICBwcm90by5fY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eShuYW1lLCAhaW5mby5jb21wdXRlZCk7XG4gICAgfVxuICAgIGlmIChpbmZvLnJlZmxlY3RUb0F0dHJpYnV0ZSAmJiAhcHJvdG8uX2hhc1JlZmxlY3RFZmZlY3QobmFtZSkpIHtcbiAgICAgIHByb3RvLl9jcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gICAgaWYgKGluZm8ubm90aWZ5ICYmICFwcm90by5faGFzTm90aWZ5RWZmZWN0KG5hbWUpKSB7XG4gICAgICBwcm90by5fY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICAgIC8vIGFsd2F5cyBhZGQgb2JzZXJ2ZXJcbiAgICBpZiAoaW5mby5vYnNlcnZlcikge1xuICAgICAgcHJvdG8uX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIobmFtZSwgaW5mby5vYnNlcnZlciwgYWxsUHJvcHNbaW5mby5vYnNlcnZlcl0pO1xuICAgIH1cbiAgICAvLyBhbHdheXMgY3JlYXRlIHRoZSBtYXBwaW5nIGZyb20gYXR0cmlidXRlIGJhY2sgdG8gcHJvcGVydHkgZm9yIGRlc2VyaWFsaXphdGlvbi5cbiAgICBwcm90by5fYWRkUHJvcGVydHlUb0F0dHJpYnV0ZU1hcChuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGFsbCBzdHlsZSBlbGVtZW50cyBpbiB0aGUgZWxlbWVudCB0ZW1wbGF0ZS4gU3R5bGVzIHdpdGggdGhlXG4gICAqIGBpbmNsdWRlYCBhdHRyaWJ1dGUgYXJlIHByb2Nlc3NlZCBzdWNoIHRoYXQgYW55IHN0eWxlcyBpblxuICAgKiB0aGUgYXNzb2NpYXRlZCBcInN0eWxlIG1vZHVsZXNcIiBhcmUgaW5jbHVkZWQgaW4gdGhlIGVsZW1lbnQgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0ga2xhc3MgRWxlbWVudCBjbGFzc1xuICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBwcm9jZXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpcyBOYW1lIG9mIGVsZW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkkgQmFzZSBVUkkgZm9yIGVsZW1lbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NFbGVtZW50U3R5bGVzKGtsYXNzLCB0ZW1wbGF0ZSwgaXMsIGJhc2VVUkkpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZVN0eWxlcyA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICBjb25zdCBzdHlsZXNXaXRoSW1wb3J0cyA9IHN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgLy8gaW5zZXJ0IHN0eWxlcyBmcm9tIDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj4gYXQgdGhlIHRvcCBvZiB0aGUgdGVtcGxhdGVcbiAgICBjb25zdCBsaW5rZWRTdHlsZXMgPSBzdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhpcyk7XG4gICAgY29uc3QgZmlyc3RUZW1wbGF0ZUNoaWxkID0gdGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBsaW5rZWRTdHlsZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgbGV0IHMgPSBsaW5rZWRTdHlsZXNbaWR4XTtcbiAgICAgIHMudGV4dENvbnRlbnQgPSBrbGFzcy5fcHJvY2Vzc1N0eWxlVGV4dChzLnRleHRDb250ZW50LCBiYXNlVVJJKTtcbiAgICAgIHRlbXBsYXRlLmNvbnRlbnQuaW5zZXJ0QmVmb3JlKHMsIGZpcnN0VGVtcGxhdGVDaGlsZCk7XG4gICAgfVxuICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGxhc3QgXCJjb25jcmV0ZVwiIHN0eWxlIGluIHRoZSB0ZW1wbGF0ZSB3ZSBoYXZlIGVuY291bnRlcmVkXG4gICAgbGV0IHRlbXBsYXRlU3R5bGVJbmRleCA9IDA7XG4gICAgLy8gZW5zdXJlIGFsbCBnYXRoZXJlZCBzdHlsZXMgYXJlIGFjdHVhbGx5IGluIHRoaXMgdGVtcGxhdGUuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXNXaXRoSW1wb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHMgPSBzdHlsZXNXaXRoSW1wb3J0c1tpXTtcbiAgICAgIGxldCB0ZW1wbGF0ZVN0eWxlID0gdGVtcGxhdGVTdHlsZXNbdGVtcGxhdGVTdHlsZUluZGV4XTtcbiAgICAgIC8vIGlmIHRoZSBzdHlsZSBpcyBub3QgaW4gdGhpcyB0ZW1wbGF0ZSwgaXQncyBiZWVuIFwiaW5jbHVkZWRcIiBhbmRcbiAgICAgIC8vIHdlIHB1dCBhIGNsb25lIG9mIGl0IGluIHRoZSB0ZW1wbGF0ZSBiZWZvcmUgdGhlIHN0eWxlIHRoYXQgaW5jbHVkZWQgaXRcbiAgICAgIGlmICh0ZW1wbGF0ZVN0eWxlICE9PSBzKSB7XG4gICAgICAgIHMgPSBzLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgdGVtcGxhdGVTdHlsZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLCB0ZW1wbGF0ZVN0eWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXBsYXRlU3R5bGVJbmRleCsrO1xuICAgICAgfVxuICAgICAgcy50ZXh0Q29udGVudCA9IGtsYXNzLl9wcm9jZXNzU3R5bGVUZXh0KHMudGV4dENvbnRlbnQsIGJhc2VVUkkpO1xuICAgIH1cbiAgICBpZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gICAgICB3aW5kb3cuU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwb2x5bWVyXG4gICAqIEBtaXhpbkNsYXNzXG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfRWxlbWVudE1peGlufVxuICAgKi9cbiAgY2xhc3MgUG9seW1lckVsZW1lbnQgZXh0ZW5kcyBwb2x5bWVyRWxlbWVudEJhc2Uge1xuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgb2YgUHJvcGVydGllc01peGluIF9maW5hbGl6ZUNsYXNzIHRvIGNyZWF0ZSBvYnNlcnZlcnMgYW5kXG4gICAgICogZmluZCB0aGUgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICovXG4gICBzdGF0aWMgX2ZpbmFsaXplQ2xhc3MoKSB7XG4gICAgICBzdXBlci5fZmluYWxpemVDbGFzcygpO1xuICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoXG4gICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2lzJywgdGhpcykpICYmICB0aGlzLmlzKSB7XG4gICAgICAgIHJlZ2lzdGVyKHRoaXMucHJvdG90eXBlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVycyA9IG93bk9ic2VydmVycyh0aGlzKTtcbiAgICAgIGlmIChvYnNlcnZlcnMpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVPYnNlcnZlcnMob2JzZXJ2ZXJzLCB0aGlzLl9wcm9wZXJ0aWVzKTtcbiAgICAgIH1cbiAgICAgIC8vIG5vdGU6IGNyZWF0ZSBcIndvcmtpbmdcIiB0ZW1wbGF0ZSB0aGF0IGlzIGZpbmFsaXplZCBhdCBpbnN0YW5jZSB0aW1lXG4gICAgICBsZXQgdGVtcGxhdGUgPSAvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9ICovICh0aGlzKS50ZW1wbGF0ZTtcbiAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3RlbXBsYXRlIGdldHRlciBtdXN0IHJldHVybiBIVE1MVGVtcGxhdGVFbGVtZW50Jyk7XG4gICAgICAgICAgdGVtcGxhdGUgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIG9mIFByb3BlcnRpZXNDaGFuZ2VkIGNyZWF0ZVByb3BlcnRpZXMgdG8gY3JlYXRlIGFjY2Vzc29yc1xuICAgICAqIGFuZCBwcm9wZXJ0eSBlZmZlY3RzIGZvciBhbGwgb2YgdGhlIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBmb3IgKGxldCBwIGluIHByb3BzKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5RnJvbUNvbmZpZyh0aGlzLnByb3RvdHlwZSwgcCwgcHJvcHNbcF0sIHByb3BzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG9ic2VydmVycyBmb3IgdGhlIGdpdmVuIGBvYnNlcnZlcnNgIGFycmF5LlxuICAgICAqIExldmVyYWdlcyBgUHJvcGVydHlFZmZlY3RzYCB0byBjcmVhdGUgb2JzZXJ2ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlcnMgQXJyYXkgb2Ygb2JzZXJ2ZXIgZGVzY3JpcHRvcnMgZm9yXG4gICAgICogICB0aGlzIGNsYXNzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGR5bmFtaWNGbnMgT2JqZWN0IGNvbnRhaW5pbmcga2V5cyBmb3IgYW55IHByb3BlcnRpZXNcbiAgICAgKiAgIHRoYXQgYXJlIGZ1bmN0aW9ucyBhbmQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdCB3aGVuIHRoZSBmdW5jdGlvblxuICAgICAqICAgcmVmZXJlbmNlIGlzIGNoYW5nZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlT2JzZXJ2ZXJzKG9ic2VydmVycywgZHluYW1pY0Zucykge1xuICAgICAgY29uc3QgcHJvdG8gPSB0aGlzLnByb3RvdHlwZTtcbiAgICAgIGZvciAobGV0IGk9MDsgaSA8IG9ic2VydmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcm90by5fY3JlYXRlTWV0aG9kT2JzZXJ2ZXIob2JzZXJ2ZXJzW2ldLCBkeW5hbWljRm5zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSB0aGF0IHdpbGwgYmUgc3RhbXBlZCBpbnRvIHRoaXMgZWxlbWVudCdzIHNoYWRvdyByb290LlxuICAgICAqXG4gICAgICogSWYgYSBgc3RhdGljIGdldCBpcygpYCBnZXR0ZXIgaXMgZGVmaW5lZCwgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb25cbiAgICAgKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgYDx0ZW1wbGF0ZT5gIGluIGEgYGRvbS1tb2R1bGVgIHdob3NlIGBpZGBcbiAgICAgKiBtYXRjaGVzIHRoaXMgZWxlbWVudCdzIGBpc2AuXG4gICAgICpcbiAgICAgKiBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBnZXR0ZXIgdG8gcmV0dXJuIGFuIGFyYml0cmFyeSB0ZW1wbGF0ZVxuICAgICAqIChpbiB3aGljaCBjYXNlIHRoZSBgaXNgIGdldHRlciBpcyB1bm5lY2Vzc2FyeSkuIFRoZSB0ZW1wbGF0ZSByZXR1cm5lZFxuICAgICAqIG1heSBiZSBlaXRoZXIgYW4gYEhUTUxUZW1wbGF0ZUVsZW1lbnRgIG9yIGEgc3RyaW5nIHRoYXQgd2lsbCBiZVxuICAgICAqIGF1dG9tYXRpY2FsbHkgcGFyc2VkIGludG8gYSB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB3aGVuIHN1YmNsYXNzaW5nLCBpZiB0aGUgc3VwZXIgY2xhc3Mgb3ZlcnJvZGUgdGhlIGRlZmF1bHRcbiAgICAgKiBpbXBsZW1lbnRhdGlvbiBhbmQgdGhlIHN1YmNsYXNzIHdvdWxkIGxpa2UgdG8gcHJvdmlkZSBhbiBhbHRlcm5hdGVcbiAgICAgKiB0ZW1wbGF0ZSB2aWEgYSBgZG9tLW1vZHVsZWAsIGl0IHNob3VsZCBvdmVycmlkZSB0aGlzIGdldHRlciBhbmRcbiAgICAgKiByZXR1cm4gYERvbU1vZHVsZS5pbXBvcnQodGhpcy5pcywgJ3RlbXBsYXRlJylgLlxuICAgICAqXG4gICAgICogSWYgYSBzdWJjbGFzcyB3b3VsZCBsaWtlIHRvIG1vZGlmeSB0aGUgc3VwZXIgY2xhc3MgdGVtcGxhdGUsIGl0IHNob3VsZFxuICAgICAqIGNsb25lIGl0IHJhdGhlciB0aGFuIG1vZGlmeSBpdCBpbiBwbGFjZS4gIElmIHRoZSBnZXR0ZXIgZG9lcyBleHBlbnNpdmVcbiAgICAgKiB3b3JrIHN1Y2ggYXMgY2xvbmluZy9tb2RpZnlpbmcgYSB0ZW1wbGF0ZSwgaXQgc2hvdWxkIG1lbW9pemUgdGhlXG4gICAgICogdGVtcGxhdGUgZm9yIG1heGltdW0gcGVyZm9ybWFuY2U6XG4gICAgICpcbiAgICAgKiAgIGxldCBtZW1vaXplZFRlbXBsYXRlO1xuICAgICAqICAgY2xhc3MgTXlTdWJDbGFzcyBleHRlbmRzIE15U3VwZXJDbGFzcyB7XG4gICAgICogICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICogICAgICAgaWYgKCFtZW1vaXplZFRlbXBsYXRlKSB7XG4gICAgICogICAgICAgICBtZW1vaXplZFRlbXBsYXRlID0gc3VwZXIudGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgICAgICAgbGV0IHN1YkNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgKiAgICAgICAgIHN1YkNvbnRlbnQudGV4dENvbnRlbnQgPSAnVGhpcyBjYW1lIGZyb20gTXlTdWJDbGFzcyc7XG4gICAgICogICAgICAgICBtZW1vaXplZFRlbXBsYXRlLmNvbnRlbnQuYXBwZW5kQ2hpbGQoc3ViQ29udGVudCk7XG4gICAgICogICAgICAgfVxuICAgICAqICAgICAgIHJldHVybiBtZW1vaXplZFRlbXBsYXRlO1xuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtIVE1MVGVtcGxhdGVFbGVtZW50fHN0cmluZ30gVGVtcGxhdGUgdG8gYmUgc3RhbXBlZFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX3RlbXBsYXRlJywgdGhpcykpKSB7XG4gICAgICAgIHRoaXMuX3RlbXBsYXRlID0gRG9tTW9kdWxlICYmIERvbU1vZHVsZS5pbXBvcnQoXG4gICAgICAgICAgLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5pcywgJ3RlbXBsYXRlJykgfHxcbiAgICAgICAgICAvLyBub3RlOiBpbXBsZW1lbnRlZCBzbyBhIHN1YmNsYXNzIGNhbiByZXRyaWV2ZSB0aGUgc3VwZXJcbiAgICAgICAgICAvLyB0ZW1wbGF0ZTsgY2FsbCB0aGUgc3VwZXIgaW1wbCB0aGlzIHdheSBzbyB0aGF0IGB0aGlzYCBwb2ludHNcbiAgICAgICAgICAvLyB0byB0aGUgc3VwZXJjbGFzcy5cbiAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yLnRlbXBsYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhdGggbWF0Y2hpbmcgdGhlIHVybCBmcm9tIHdoaWNoIHRoZSBlbGVtZW50IHdhcyBpbXBvcnRlZC5cbiAgICAgKlxuICAgICAqIFRoaXMgcGF0aCBpcyB1c2VkIHRvIHJlc29sdmUgdXJsJ3MgaW4gdGVtcGxhdGUgc3R5bGUgY3NzVGV4dC5cbiAgICAgKiBUaGUgYGltcG9ydFBhdGhgIHByb3BlcnR5IGlzIGFsc28gc2V0IG9uIGVsZW1lbnQgaW5zdGFuY2VzIGFuZCBjYW4gYmVcbiAgICAgKiB1c2VkIHRvIGNyZWF0ZSBiaW5kaW5ncyByZWxhdGl2ZSB0byB0aGUgaW1wb3J0IHBhdGguXG4gICAgICpcbiAgICAgKiBGb3IgZWxlbWVudHMgZGVmaW5lZCBpbiBFUyBtb2R1bGVzLCB1c2VycyBzaG91bGQgaW1wbGVtZW50XG4gICAgICogYHN0YXRpYyBnZXQgaW1wb3J0TWV0YSgpIHsgcmV0dXJuIGltcG9ydC5tZXRhOyB9YCwgYW5kIHRoZSBkZWZhdWx0XG4gICAgICogaW1wbGVtZW50YXRpb24gb2YgYGltcG9ydFBhdGhgIHdpbGwgIHJldHVybiBgaW1wb3J0Lm1ldGEudXJsYCdzIHBhdGguXG4gICAgICogRm9yIGVsZW1lbnRzIGRlZmluZWQgaW4gSFRNTCBpbXBvcnRzLCB0aGlzIGdldHRlciB3aWxsIHJldHVybiB0aGUgcGF0aFxuICAgICAqIHRvIHRoZSBkb2N1bWVudCBjb250YWluaW5nIGEgYGRvbS1tb2R1bGVgIGVsZW1lbnQgbWF0Y2hpbmcgdGhpc1xuICAgICAqIGVsZW1lbnQncyBzdGF0aWMgYGlzYCBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIE5vdGUsIHRoaXMgcGF0aCBzaG91bGQgY29udGFpbiBhIHRyYWlsaW5nIGAvYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGltcG9ydCBwYXRoIGZvciB0aGlzIGVsZW1lbnQgY2xhc3NcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgaW1wb3J0UGF0aCgpIHtcbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfaW1wb3J0UGF0aCcsIHRoaXMpKSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5pbXBvcnRNZXRhO1xuICAgICAgICBpZiAobWV0YSkge1xuICAgICAgICAgIHRoaXMuX2ltcG9ydFBhdGggPSBwYXRoRnJvbVVybChtZXRhLnVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbW9kdWxlID0gRG9tTW9kdWxlICYmIERvbU1vZHVsZS5pbXBvcnQoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSAqLyAodGhpcykuaXMpO1xuICAgICAgICAgIHRoaXMuX2ltcG9ydFBhdGggPSAobW9kdWxlICYmIG1vZHVsZS5hc3NldHBhdGgpIHx8XG4gICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoLyoqIEB0eXBlIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSovICh0aGlzKS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yLmltcG9ydFBhdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9pbXBvcnRQYXRoO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi9cbiAgICAgIHRoaXMuX3RlbXBsYXRlO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLl9pbXBvcnRQYXRoO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLnJvb3RQYXRoO1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLmltcG9ydFBhdGg7XG4gICAgICAvKiogQHR5cGUge1N0YW1wZWRUZW1wbGF0ZSB8IEhUTUxFbGVtZW50IHwgU2hhZG93Um9vdH0gKi9cbiAgICAgIHRoaXMucm9vdDtcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsICFFbGVtZW50Pn0gKi9cbiAgICAgIHRoaXMuJDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGRlZmF1bHQgYFByb3BlcnR5QWNjZXNzb3JzYCB0byBlbnN1cmUgY2xhc3NcbiAgICAgKiBtZXRhcHJvZ3JhbW1pbmcgcmVsYXRlZCB0byBwcm9wZXJ0eSBhY2Nlc3NvcnMgYW5kIGVmZmVjdHMgaGFzXG4gICAgICogY29tcGxldGVkIChjYWxscyBgZmluYWxpemVgKS5cbiAgICAgKlxuICAgICAqIEl0IGFsc28gaW5pdGlhbGl6ZXMgYW55IHByb3BlcnR5IGRlZmF1bHRzIHByb3ZpZGVkIHZpYSBgdmFsdWVgIGluXG4gICAgICogYHByb3BlcnRpZXNgIG1ldGFkYXRhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICBpbnN0YW5jZUNvdW50Kys7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmZpbmFsaXplKCk7XG4gICAgICAvLyBub3RlOiBmaW5hbGl6ZSB0ZW1wbGF0ZSB3aGVuIHdlIGhhdmUgYWNjZXNzIHRvIGBsb2NhbE5hbWVgIHRvXG4gICAgICAvLyBhdm9pZCBkZXBlbmRlbmNlIG9uIGBpc2AgZm9yIHBvbHlmaWxsaW5nIHN0eWxpbmcuXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLl9maW5hbGl6ZVRlbXBsYXRlKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKS5sb2NhbE5hbWUpO1xuICAgICAgc3VwZXIuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgICAvLyBzZXQgcGF0aCBkZWZhdWx0c1xuICAgICAgdGhpcy5yb290UGF0aCA9IHJvb3RQYXRoJDA7XG4gICAgICB0aGlzLmltcG9ydFBhdGggPSB0aGlzLmNvbnN0cnVjdG9yLmltcG9ydFBhdGg7XG4gICAgICAvLyBhcHBseSBwcm9wZXJ0eSBkZWZhdWx0cy4uLlxuICAgICAgbGV0IHAkID0gcHJvcGVydHlEZWZhdWx0cyh0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgIGlmICghcCQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgcCBpbiBwJCkge1xuICAgICAgICBsZXQgaW5mbyA9IHAkW3BdO1xuICAgICAgICAvLyBEb24ndCBzZXQgZGVmYXVsdCB2YWx1ZSBpZiB0aGVyZSBpcyBhbHJlYWR5IGFuIG93biBwcm9wZXJ0eSwgd2hpY2hcbiAgICAgICAgLy8gaGFwcGVucyB3aGVuIGEgYHByb3BlcnRpZXNgIHByb3BlcnR5IHdpdGggZGVmYXVsdCBidXQgbm8gZWZmZWN0cyBoYWRcbiAgICAgICAgLy8gYSBwcm9wZXJ0eSBzZXQgKGUuZy4gYm91bmQpIGJ5IGl0cyBob3N0IGJlZm9yZSB1cGdyYWRlXG4gICAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVvZiBpbmZvLnZhbHVlID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgaW5mby52YWx1ZS5jYWxsKHRoaXMpIDpcbiAgICAgICAgICAgIGluZm8udmFsdWU7XG4gICAgICAgICAgLy8gU2V0IHZpYSBgX3NldFByb3BlcnR5YCBpZiB0aGVyZSBpcyBhbiBhY2Nlc3NvciwgdG8gZW5hYmxlXG4gICAgICAgICAgLy8gaW5pdGlhbGl6aW5nIHJlYWRPbmx5IHByb3BlcnR5IGRlZmF1bHRzXG4gICAgICAgICAgaWYgKHRoaXMuX2hhc0FjY2Vzc29yKHApKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocCwgdmFsdWUsIHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzW3BdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2F0aGVyIHN0eWxlIHRleHQgZm9yIGEgc3R5bGUgZWxlbWVudCBpbiB0aGUgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dCBUZXh0IGNvbnRhaW5pbmcgc3R5bGluZyB0byBwcm9jZXNzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkkgQmFzZSBVUkkgdG8gcmViYXNlIENTUyBwYXRocyBhZ2FpbnN0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHJvY2Vzc2VkIENTUyB0ZXh0XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHN0YXRpYyBfcHJvY2Vzc1N0eWxlVGV4dChjc3NUZXh0LCBiYXNlVVJJKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZUNzcyhjc3NUZXh0LCBiYXNlVVJJKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENvbmZpZ3VyZXMgYW4gZWxlbWVudCBgcHJvdG9gIHRvIGZ1bmN0aW9uIHdpdGggYSBnaXZlbiBgdGVtcGxhdGVgLlxuICAgICogVGhlIGVsZW1lbnQgbmFtZSBgaXNgIGFuZCBleHRlbmRzIGBleHRgIG11c3QgYmUgc3BlY2lmaWVkIGZvciBTaGFkeUNTU1xuICAgICogc3R5bGUgc2NvcGluZy5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gaXMgVGFnIG5hbWUgKG9yIHR5cGUgZXh0ZW5zaW9uIG5hbWUpIGZvciB0aGlzIGVsZW1lbnRcbiAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgKiBAcHJvdGVjdGVkXG4gICAgKi9cbiAgICBzdGF0aWMgX2ZpbmFsaXplVGVtcGxhdGUoaXMpIHtcbiAgICAgIC8qKiBAY29uc3Qge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZTtcbiAgICAgIGlmICh0ZW1wbGF0ZSAmJiAhdGVtcGxhdGUuX19wb2x5bWVyRmluYWxpemVkKSB7XG4gICAgICAgIHRlbXBsYXRlLl9fcG9seW1lckZpbmFsaXplZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGltcG9ydFBhdGggPSB0aGlzLmltcG9ydFBhdGg7XG4gICAgICAgIGNvbnN0IGJhc2VVUkkgPSBpbXBvcnRQYXRoID8gcmVzb2x2ZVVybCQwKGltcG9ydFBhdGgpIDogJyc7XG4gICAgICAgIC8vIGUuZy4gc3VwcG9ydCBgaW5jbHVkZT1cIm1vZHVsZS1uYW1lXCJgLCBhbmQgU2hhZHlDU1NcbiAgICAgICAgcHJvY2Vzc0VsZW1lbnRTdHlsZXModGhpcywgdGVtcGxhdGUsIGlzLCBiYXNlVVJJKTtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBzdGFuZGFyZCBDdXN0b20gRWxlbWVudHNcbiAgICAgKiBgY29ubmVjdGVkQ2FsbGJhY2tgLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZW5hYmxlcyB0aGUgcHJvcGVydHkgZWZmZWN0cyBzeXN0ZW0gYW5kXG4gICAgICogZmx1c2hlcyBhbnkgcGVuZGluZyBwcm9wZXJ0aWVzLCBhbmQgdXBkYXRlcyBzaGltbWVkIENTUyBwcm9wZXJ0aWVzXG4gICAgICogd2hlbiB1c2luZyB0aGUgU2hhZHlDU1Mgc2NvcGluZy9jdXN0b20gcHJvcGVydGllcyBwb2x5ZmlsbC5cbiAgICAgKlxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXMsIGludmFsaWRDYXN0c30gU3VwZXIgbWF5IG9yIG1heSBub3QgaW1wbGVtZW50IHRoZSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBpZiAod2luZG93LlNoYWR5Q1NTICYmIHRoaXMuX3RlbXBsYXRlKSB7XG4gICAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhbXBzIHRoZSBlbGVtZW50IHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICByZWFkeSgpIHtcbiAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZSkge1xuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLl9zdGFtcFRlbXBsYXRlKHRoaXMuX3RlbXBsYXRlKTtcbiAgICAgICAgdGhpcy4kID0gdGhpcy5yb290LiQ7XG4gICAgICB9XG4gICAgICBzdXBlci5yZWFkeSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgYFByb3BlcnR5RWZmZWN0c2AncyBgX3JlYWR5Q2xpZW50c2AgY2FsbC4gQXR0YWNoZXNcbiAgICAgKiBlbGVtZW50IGRvbSBieSBjYWxsaW5nIGBfYXR0YWNoRG9tYCB3aXRoIHRoZSBkb20gc3RhbXBlZCBmcm9tIHRoZVxuICAgICAqIGVsZW1lbnQncyB0ZW1wbGF0ZSB2aWEgYF9zdGFtcFRlbXBsYXRlYC4gTm90ZSB0aGF0IHRoaXMgYWxsb3dzXG4gICAgICogY2xpZW50IGRvbSB0byBiZSBhdHRhY2hlZCB0byB0aGUgZWxlbWVudCBwcmlvciB0byBhbnkgb2JzZXJ2ZXJzXG4gICAgICogcnVubmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3JlYWR5Q2xpZW50cygpIHtcbiAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZSkge1xuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLl9hdHRhY2hEb20oLyoqIEB0eXBlIHtTdGFtcGVkVGVtcGxhdGV9ICovKHRoaXMucm9vdCkpO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHN1cGVyLl9yZWFkeUNsaWVudHMgaGVyZSBzZXRzIHRoZSBjbGllbnRzIGluaXRpYWxpemVkIGZsYWcuXG4gICAgICAvLyBXZSBtdXN0IHdhaXQgdG8gZG8gdGhpcyB1bnRpbCBhZnRlciBjbGllbnQgZG9tIGlzIGNyZWF0ZWQvYXR0YWNoZWRcbiAgICAgIC8vIHNvIHRoYXQgdGhpcyBmbGFnIGNhbiBiZSBjaGVja2VkIHRvIHByZXZlbnQgbm90aWZpY2F0aW9ucyBmaXJlZFxuICAgICAgLy8gZHVyaW5nIHRoaXMgcHJvY2VzcyBmcm9tIGJlaW5nIGhhbmRsZWQgYmVmb3JlIGNsaWVudHMgYXJlIHJlYWR5LlxuICAgICAgc3VwZXIuX3JlYWR5Q2xpZW50cygpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYW4gZWxlbWVudCdzIHN0YW1wZWQgZG9tIHRvIGl0c2VsZi4gQnkgZGVmYXVsdCxcbiAgICAgKiB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgYHNoYWRvd1Jvb3RgIGFuZCBhZGRzIHRoZSBkb20gdG8gaXQuXG4gICAgICogSG93ZXZlciwgdGhpcyBtZXRob2QgbWF5IGJlIG92ZXJyaWRkZW4gdG8gYWxsb3cgYW4gZWxlbWVudFxuICAgICAqIHRvIHB1dCBpdHMgZG9tIGluIGFub3RoZXIgbG9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdSZXR1cm59XG4gICAgICogQHBhcmFtIHtTdGFtcGVkVGVtcGxhdGV9IGRvbSB0byBhdHRhY2ggdG8gdGhlIGVsZW1lbnQuXG4gICAgICogQHJldHVybiB7U2hhZG93Um9vdH0gbm9kZSB0byB3aGljaCB0aGUgZG9tIGhhcyBiZWVuIGF0dGFjaGVkLlxuICAgICAqL1xuICAgIF9hdHRhY2hEb20oZG9tKSB7XG4gICAgICBpZiAodGhpcy5hdHRhY2hTaGFkb3cpIHtcbiAgICAgICAgaWYgKGRvbSkge1xuICAgICAgICAgIGlmICghdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChkb20pO1xuICAgICAgICAgIHJldHVybiB0aGlzLnNoYWRvd1Jvb3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWRvd0RPTSBub3QgYXZhaWxhYmxlLiAnICtcbiAgICAgICAgICAvLyBUT0RPKHNvcnZlbGwpOiBtb3ZlIHRvIGNvbXBpbGUtdGltZSBjb25kaXRpb25hbCB3aGVuIHN1cHBvcnRlZFxuICAgICAgICAnUG9seW1lckVsZW1lbnQgY2FuIGNyZWF0ZSBkb20gYXMgY2hpbGRyZW4gaW5zdGVhZCBvZiBpbiAnICtcbiAgICAgICAgJ1NoYWRvd0RPTSBieSBzZXR0aW5nIGB0aGlzLnJvb3QgPSB0aGlzO1xcYCBiZWZvcmUgXFxgcmVhZHlcXGAuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB1c2luZyB0aGUgU2hhZHlDU1Mgc2NvcGluZyBhbmQgY3VzdG9tIHByb3BlcnR5IHNoaW0sIGNhdXNlcyBhbGxcbiAgICAgKiBzaGltbWVkIHN0eWxlcyBpbiB0aGlzIGVsZW1lbnQgKGFuZCBpdHMgc3VidHJlZSkgdG8gYmUgdXBkYXRlZFxuICAgICAqIGJhc2VkIG9uIGN1cnJlbnQgY3VzdG9tIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcHRpb25hbCBwYXJhbWV0ZXIgb3ZlcnJpZGVzIGlubGluZSBjdXN0b20gcHJvcGVydHkgc3R5bGVzIHdpdGggYW5cbiAgICAgKiBvYmplY3Qgb2YgcHJvcGVydGllcyB3aGVyZSB0aGUga2V5cyBhcmUgQ1NTIHByb3BlcnRpZXMsIGFuZCB0aGUgdmFsdWVzXG4gICAgICogYXJlIHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOiBgdGhpcy51cGRhdGVTdHlsZXMoeyctLWNvbG9yJzogJ2JsdWUnfSlgXG4gICAgICpcbiAgICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSByZXRhaW5lZCB1bmxlc3MgYSB2YWx1ZSBvZiBgbnVsbGAgaXMgc2V0LlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBzdXBwb3J0IHVwZGF0aW5nIENTUyBtaXhpbnMuXG4gICAgICogWW91IGNhbiBub3QgZHluYW1pY2FsbHkgY2hhbmdlIHRoZSB2YWx1ZSBvZiBhbiBgQGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllcyBCYWcgb2YgY3VzdG9tIHByb3BlcnR5IGtleS92YWx1ZXMgdG9cbiAgICAgKiAgIGFwcGx5IHRvIHRoaXMgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICAgICAqL1xuICAgIHVwZGF0ZVN0eWxlcyhwcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gICAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZVN1YnRyZWUoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpLCBwcm9wZXJ0aWVzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXdyaXRlcyBhIGdpdmVuIFVSTCByZWxhdGl2ZSB0byBhIGJhc2UgVVJMLiBUaGUgYmFzZSBVUkwgZGVmYXVsdHMgdG9cbiAgICAgKiB0aGUgb3JpZ2luYWwgbG9jYXRpb24gb2YgdGhlIGRvY3VtZW50IGNvbnRhaW5pbmcgdGhlIGBkb20tbW9kdWxlYCBmb3JcbiAgICAgKiB0aGlzIGVsZW1lbnQuIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzYW1lIFVSTCBiZWZvcmUgYW5kIGFmdGVyXG4gICAgICogYnVuZGxpbmcuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBwZXJmb3JtcyBubyByZXNvbHV0aW9uIGZvciBVUkxzIHRoYXQgc3RhcnRcbiAgICAgKiB3aXRoIGAvYCAoYWJzb2x1dGUgVVJMcykgb3IgYCNgIChoYXNoIGlkZW50aWZpZXJzKS4gIEZvciBnZW5lcmFsIHB1cnBvc2VcbiAgICAgKiBVUkwgcmVzb2x1dGlvbiwgdXNlIGB3aW5kb3cuVVJMYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBiYXNlIE9wdGlvbmFsIGJhc2UgVVJMIHRvIHJlc29sdmUgYWdhaW5zdCwgZGVmYXVsdHNcbiAgICAgKiB0byB0aGUgZWxlbWVudCdzIGBpbXBvcnRQYXRoYFxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gUmV3cml0dGVuIFVSTCByZWxhdGl2ZSB0byBiYXNlXG4gICAgICovXG4gICAgcmVzb2x2ZVVybCh1cmwsIGJhc2UpIHtcbiAgICAgIGlmICghYmFzZSAmJiB0aGlzLmltcG9ydFBhdGgpIHtcbiAgICAgICAgYmFzZSA9IHJlc29sdmVVcmwkMCh0aGlzLmltcG9ydFBhdGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmVVcmwkMCh1cmwsIGJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcnNgIHRvIGFkZCBtYXAgb2YgZHluYW1pYyBmdW5jdGlvbnMgb25cbiAgICAgKiB0ZW1wbGF0ZSBpbmZvLCBmb3IgY29uc3VtcHRpb24gYnkgYFByb3BlcnR5RWZmZWN0c2AgdGVtcGxhdGUgYmluZGluZ1xuICAgICAqIGNvZGUuIFRoaXMgbWFwIGRldGVybWluZXMgd2hpY2ggbWV0aG9kIHRlbXBsYXRlcyBzaG91bGQgaGF2ZSBhY2Nlc3NvcnNcbiAgICAgKiBjcmVhdGVkIGZvciB0aGVtLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgdGVtcGxhdGVJbmZvLmR5bmFtaWNGbnMgPSB0ZW1wbGF0ZUluZm8uZHluYW1pY0ZucyB8fCB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgcmV0dXJuIHN1cGVyLl9wYXJzZVRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gUG9seW1lckVsZW1lbnQ7XG59KTtcblxuLyoqXG4gKiBQcm92aWRlcyBiYXNpYyB0cmFja2luZyBvZiBlbGVtZW50IGRlZmluaXRpb25zIChyZWdpc3RyYXRpb25zKSBhbmRcbiAqIGluc3RhbmNlIGNvdW50cy5cbiAqXG4gKiBAc3VtbWFyeSBQcm92aWRlcyBiYXNpYyB0cmFja2luZyBvZiBlbGVtZW50IGRlZmluaXRpb25zIChyZWdpc3RyYXRpb25zKSBhbmRcbiAqIGluc3RhbmNlIGNvdW50cy5cbiAqL1xuYFRPRE8obW9kdWxpemVyKTogQSBuYW1lc3BhY2UgbmFtZWQgUG9seW1lci50ZWxlbWV0cnkgd2FzXG5kZWNsYXJlZCBoZXJlLiBUaGUgc3Vycm91bmRpbmcgY29tbWVudHMgc2hvdWxkIGJlIHJldmlld2VkLFxuYW5kIHRoaXMgc3RyaW5nIGNhbiB0aGVuIGJlIGRlbGV0ZWRgO1xuXG4vKipcbiAqIFRvdGFsIG51bWJlciBvZiBQb2x5bWVyIGVsZW1lbnQgaW5zdGFuY2VzIGNyZWF0ZWQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgbGV0IGluc3RhbmNlQ291bnQgPSAwO1xuXG4vKipcbiAqIEFycmF5IG9mIFBvbHltZXIgZWxlbWVudCBjbGFzc2VzIHRoYXQgaGF2ZSBiZWVuIGZpbmFsaXplZC5cbiAqIEB0eXBlIHtBcnJheTxQb2x5bWVyRWxlbWVudD59XG4gKi9cbmV4cG9ydCBjb25zdCByZWdpc3RyYXRpb25zID0gW107XG5cbi8qKlxuICogQHBhcmFtIHshUG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gcHJvdG90eXBlIEVsZW1lbnQgcHJvdG90eXBlIHRvIGxvZ1xuICogQHRoaXMge3RoaXN9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVnTG9nKHByb3RvdHlwZSkge1xuICBjb25zb2xlLmxvZygnWycgKyBwcm90b3R5cGUuaXMgKyAnXTogcmVnaXN0ZXJlZCcpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIGNsYXNzIHByb3RvdHlwZSBmb3IgdGVsZW1ldHJ5IHB1cnBvc2VzLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcHJvdG90eXBlIEVsZW1lbnQgcHJvdG90eXBlIHRvIHJlZ2lzdGVyXG4gKiBAdGhpcyB7dGhpc31cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKHByb3RvdHlwZSkge1xuICByZWdpc3RyYXRpb25zLnB1c2gocHJvdG90eXBlKTtcbiAgdW5kZWZpbmVkICYmIF9yZWdMb2cocHJvdG90eXBlKTtcbn1cblxuLyoqXG4gKiBMb2dzIGFsbCBlbGVtZW50cyByZWdpc3RlcmVkIHdpdGggYW4gYGlzYCB0byB0aGUgY29uc29sZS5cbiAqIEBwdWJsaWNcbiAqIEB0aGlzIHt0aGlzfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZHVtcFJlZ2lzdHJhdGlvbnMoKSB7XG4gIHJlZ2lzdHJhdGlvbnMuZm9yRWFjaChfcmVnTG9nKTtcbn1cblxuLyoqXG4gKiBXaGVuIHVzaW5nIHRoZSBTaGFkeUNTUyBzY29waW5nIGFuZCBjdXN0b20gcHJvcGVydHkgc2hpbSwgY2F1c2VzIGFsbFxuICogc2hpbW1lZCBgc3R5bGVzYCAodmlhIGBjdXN0b20tc3R5bGVgKSBpbiB0aGUgZG9jdW1lbnQgKGFuZCBpdHMgc3VidHJlZSlcbiAqIHRvIGJlIHVwZGF0ZWQgYmFzZWQgb24gY3VycmVudCBjdXN0b20gcHJvcGVydHkgdmFsdWVzLlxuICpcbiAqIFRoZSBvcHRpb25hbCBwYXJhbWV0ZXIgb3ZlcnJpZGVzIGlubGluZSBjdXN0b20gcHJvcGVydHkgc3R5bGVzIHdpdGggYW5cbiAqIG9iamVjdCBvZiBwcm9wZXJ0aWVzIHdoZXJlIHRoZSBrZXlzIGFyZSBDU1MgcHJvcGVydGllcywgYW5kIHRoZSB2YWx1ZXNcbiAqIGFyZSBzdHJpbmdzLlxuICpcbiAqIEV4YW1wbGU6IGB1cGRhdGVTdHlsZXMoeyctLWNvbG9yJzogJ2JsdWUnfSlgXG4gKlxuICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmV0YWluZWQgdW5sZXNzIGEgdmFsdWUgb2YgYG51bGxgIGlzIHNldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdD19IHByb3BzIEJhZyBvZiBjdXN0b20gcHJvcGVydHkga2V5L3ZhbHVlcyB0b1xuICogICBhcHBseSB0byB0aGUgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3QgdXBkYXRlU3R5bGVzID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZURvY3VtZW50KHByb3BzKTtcbiAgfVxufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgc3RhdGljIHN0cmluZyB2YWx1ZSB3aGljaCBjYW4gYmUgdXNlZCB0byBmaWx0ZXJcbiAqIHN0cmluZ3MgYnkgYXNzZXRpbmcgdGhhdCB0aGV5IGhhdmUgYmVlbiBjcmVhdGVkIHZpYSB0aGlzIGNsYXNzLiBUaGVcbiAqIGB2YWx1ZWAgcHJvcGVydHkgcmV0dXJucyB0aGUgc3RyaW5nIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IuXG4gKi9cbmNsYXNzIExpdGVyYWxTdHJpbmcge1xuICBjb25zdHJ1Y3RvcihzdHJpbmcpIHtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLnZhbHVlID0gc3RyaW5nLnRvU3RyaW5nKCk7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTGl0ZXJhbFN0cmluZyBzdHJpbmcgdmFsdWVcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBPYmplY3QgdG8gc3RyaW5naWZ5IGludG8gSFRNTFxuICogQHJldHVybiB7c3RyaW5nfSBIVE1MIHN0cmluZ2lmaWVkIGZvcm0gb2YgYG9iamBcbiAqL1xuZnVuY3Rpb24gbGl0ZXJhbFZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExpdGVyYWxTdHJpbmcpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTGl0ZXJhbFN0cmluZ30gKi8odmFsdWUpLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYG5vbi1saXRlcmFsIHZhbHVlIHBhc3NlZCB0byBQb2x5bWVyJ3MgaHRtbExpdGVyYWwgZnVuY3Rpb246ICR7dmFsdWV9YFxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IHZhbHVlIE9iamVjdCB0byBzdHJpbmdpZnkgaW50byBIVE1MXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEhUTUwgc3RyaW5naWZpZWQgZm9ybSBvZiBgb2JqYFxuICovXG5mdW5jdGlvbiBodG1sVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSFRNTFRlbXBsYXRlRWxlbWVudCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50IH0gKi8odmFsdWUpLmlubmVySFRNTDtcbiAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExpdGVyYWxTdHJpbmcpIHtcbiAgICByZXR1cm4gbGl0ZXJhbFZhbHVlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBub24tdGVtcGxhdGUgdmFsdWUgcGFzc2VkIHRvIFBvbHltZXIncyBodG1sIGZ1bmN0aW9uOiAke3ZhbHVlfWApO1xuICB9XG59XG5cbi8qKlxuICogQSB0ZW1wbGF0ZSBsaXRlcmFsIHRhZyB0aGF0IGNyZWF0ZXMgYW4gSFRNTCA8dGVtcGxhdGU+IGVsZW1lbnQgZnJvbSB0aGVcbiAqIGNvbnRlbnRzIG9mIHRoZSBzdHJpbmcuXG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHdyaXRlIGEgUG9seW1lciBUZW1wbGF0ZSBpbiBKYXZhU2NyaXB0LlxuICpcbiAqIFRlbXBsYXRlcyBjYW4gYmUgY29tcG9zZWQgYnkgaW50ZXJwb2xhdGluZyBgSFRNTFRlbXBsYXRlRWxlbWVudGBzIGluXG4gKiBleHByZXNzaW9ucyBpbiB0aGUgSmF2YVNjcmlwdCB0ZW1wbGF0ZSBsaXRlcmFsLiBUaGUgbmVzdGVkIHRlbXBsYXRlJ3NcbiAqIGBpbm5lckhUTUxgIGlzIGluY2x1ZGVkIGluIHRoZSBjb250YWluaW5nIHRlbXBsYXRlLiAgVGhlIG9ubHkgb3RoZXJcbiAqIHZhbHVlcyBhbGxvd2VkIGluIGV4cHJlc3Npb25zIGFyZSB0aG9zZSByZXR1cm5lZCBmcm9tIGBodG1sTGl0ZXJhbGBcbiAqIHdoaWNoIGVuc3VyZXMgb25seSBsaXRlcmFsIHZhbHVlcyBmcm9tIEpTIHNvdXJjZSBldmVyIHJlYWNoIHRoZSBIVE1MLCB0b1xuICogZ3VhcmQgYWdhaW5zdCBYU1Mgcmlza3MuXG4gKlxuICogQWxsIG90aGVyIHZhbHVlcyBhcmUgZGlzYWxsb3dlZCBpbiBleHByZXNzaW9ucyB0byBoZWxwIHByZXZlbnQgWFNTXG4gKiBhdHRhY2tzOyBob3dldmVyLCBgaHRtbExpdGVyYWxgIGNhbiBiZSB1c2VkIHRvIGNvbXBvc2Ugc3RhdGljXG4gKiBzdHJpbmcgdmFsdWVzIGludG8gdGVtcGxhdGVzLiBUaGlzIGlzIHVzZWZ1bCB0byBjb21wb3NlIHN0cmluZ3MgaW50b1xuICogcGxhY2VzIHRoYXQgZG8gbm90IGFjY2VwdCBodG1sLCBsaWtlIHRoZSBjc3MgdGV4dCBvZiBhIGBzdHlsZWBcbiAqIGVsZW1lbnQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAqICAgICAgIHJldHVybiBodG1sYFxuICogICAgICAgICA8c3R5bGU+Omhvc3R7IGNvbnRlbnQ6XCIuLi5cIiB9PC9zdHlsZT5cbiAqICAgICAgICAgPGRpdiBjbGFzcz1cInNoYWRvd2VkXCI+JHt0aGlzLnBhcnRpYWxUZW1wbGF0ZX08L2Rpdj5cbiAqICAgICAgICAgJHtzdXBlci50ZW1wbGF0ZX1cbiAqICAgICAgIGA7XG4gKiAgICAgfVxuICogICAgIHN0YXRpYyBnZXQgcGFydGlhbFRlbXBsYXRlKCkgeyByZXR1cm4gaHRtbGA8c3Bhbj5QYXJ0aWFsITwvc3Bhbj5gOyB9XG4gKlxuICogQHBhcmFtIHshSVRlbXBsYXRlQXJyYXl9IHN0cmluZ3MgQ29uc3RhbnQgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSB7Li4uKn0gdmFsdWVzIFZhcmlhYmxlIHBhcnRzIG9mIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXG4gKiBAcmV0dXJuIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gQ29uc3RydWN0ZWQgSFRNTFRlbXBsYXRlRWxlbWVudFxuICovXG5leHBvcnQgY29uc3QgaHRtbCA9IGZ1bmN0aW9uIGh0bWwoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gIGNvbnN0IHRlbXBsYXRlID0gLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKSk7XG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgdiwgaWR4KSA9PlxuICAgICAgYWNjICsgaHRtbFZhbHVlKHYpICsgc3RyaW5nc1tpZHggKyAxXSwgc3RyaW5nc1swXSk7XG4gIHJldHVybiB0ZW1wbGF0ZTtcbn07XG5cbi8qKlxuICogQW4gaHRtbCBsaXRlcmFsIHRhZyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYGh0bWxgIHRvIGNvbXBvc2UuXG4gKiBhIGxpdGVyYWwgc3RyaW5nLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gKiAgICAgICByZXR1cm4gaHRtbGBcbiAqICAgICAgICAgPHN0eWxlPlxuICogICAgICAgICAgIDpob3N0IHsgZGlzcGxheTogYmxvY2s7IH1cbiAqICAgICAgICAgICAke3RoaXMuc3R5bGVUZW1wbGF0ZSgpfVxuICogICAgICAgICA8L3N0eWxlPlxuICogICAgICAgICA8ZGl2IGNsYXNzPVwic2hhZG93ZWRcIj4ke3N0YXRpY1ZhbHVlfTwvZGl2PlxuICogICAgICAgICAke3N1cGVyLnRlbXBsYXRlfVxuICogICAgICAgYDtcbiAqICAgICB9XG4gKiAgICAgc3RhdGljIGdldCBzdHlsZVRlbXBsYXRlKCkge1xuICogICAgICAgIHJldHVybiBodG1sTGl0ZXJhbGAuc2hhZG93ZWQgeyBiYWNrZ3JvdW5kOiBncmF5OyB9YDtcbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHshSVRlbXBsYXRlQXJyYXl9IHN0cmluZ3MgQ29uc3RhbnQgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSB7Li4uKn0gdmFsdWVzIFZhcmlhYmxlIHBhcnRzIG9mIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXG4gKiBAcmV0dXJuIHshTGl0ZXJhbFN0cmluZ30gQ29uc3RydWN0ZWQgbGl0ZXJhbCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWxMaXRlcmFsID0gZnVuY3Rpb24oc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gIHJldHVybiBuZXcgTGl0ZXJhbFN0cmluZyh2YWx1ZXMucmVkdWNlKChhY2MsIHYsIGlkeCkgPT5cbiAgICAgIGFjYyArIGxpdGVyYWxWYWx1ZSh2KSArIHN0cmluZ3NbaWR4ICsgMV0sIHN0cmluZ3NbMF0pKTtcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgeyBFbGVtZW50TWl4aW4gfSBmcm9tICcuL2xpYi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyc7XG5leHBvcnQgeyBodG1sIH0gZnJvbSAnLi9saWIvdXRpbHMvaHRtbC10YWcuanMnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgdGhhdCBwcm92aWRlcyB0aGUgY29yZSBBUEkgZm9yIFBvbHltZXIncyBtZXRhLXByb2dyYW1taW5nXG4gKiBmZWF0dXJlcyBpbmNsdWRpbmcgdGVtcGxhdGUgc3RhbXBpbmcsIGRhdGEtYmluZGluZywgYXR0cmlidXRlIGRlc2VyaWFsaXphdGlvbixcbiAqIGFuZCBwcm9wZXJ0eSBjaGFuZ2Ugb2JzZXJ2YXRpb24uXG4gKlxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBwb2x5bWVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0VsZW1lbnRNaXhpbn1cbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAYXBwbGllc01peGluIEVsZW1lbnRNaXhpblxuICogQHN1bW1hcnkgQ3VzdG9tIGVsZW1lbnQgYmFzZSBjbGFzcyB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzXG4gKiAgIGtleSBtZXRhLXByb2dyYW1taW5nIGZlYXR1cmVzIGluY2x1ZGluZyB0ZW1wbGF0ZSBzdGFtcGluZywgZGF0YS1iaW5kaW5nLFxuICogICBhdHRyaWJ1dGUgZGVzZXJpYWxpemF0aW9uLCBhbmQgcHJvcGVydHkgY2hhbmdlIG9ic2VydmF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBQb2x5bWVyRWxlbWVudCA9IEVsZW1lbnRNaXhpbihIVE1MRWxlbWVudCk7XG5cbiIsImltcG9ydCB7XG4gIGh0bWwsXG4gIFBvbHltZXJFbGVtZW50LFxufSBmcm9tICdAcG9seW1lci9wb2x5bWVyL3BvbHltZXItZWxlbWVudCc7XG5cbi8vIGltcG9ydCAnLi9wb2x5bWVyMy1hcHAtc3R5bGVzLnNjc3M/bmFtZT1wb2x5bWVyMy1hcHAnO1xuLy8gaW1wb3J0ICcuLi9hcHAtMS9hcHAtMS5zY3NzJztcbmltcG9ydCAnLi9wb2x5bWVyMy1hcHAtc3R5bGVzJztcblxuLyoqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQHBvbHltZXJcbiAqL1xuY2xhc3MgUG9seW1lcjNBcHAgZXh0ZW5kcyBQb2x5bWVyRWxlbWVudCB7XG4gIHN0YXRpYyBnZXQgdGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8c3R5bGUgaW5jbHVkZT1cImFwcC0xIHBvbHltZXIzLWFwcC1zdHlsZXMgc3R5bGUtZWxlbWVudFwiPlxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIH1cbiAgICAgIDwvc3R5bGU+XG4gICAgICA8aDI+SGVsbG8ge3twcm9wMX19ITwvaDI+XG4gICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT1cInt7cHJvcDF9fVwiIC8+XG4gICAgICA8ZGl2PlxuICAgICAgICAg8J+YifCfmInwn5iJ8J+YifCfmIlcbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD1cImhlXCI+XG4gICAgICAgIFBvb3BcbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3AxOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgdmFsdWU6ICdwb2x5bWVyMy1hcHAnLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3BvbHltZXIzLWFwcCcsIFBvbHltZXIzQXBwKTtcbiIsIi8vIER1bW15IGZpbGUgdG8gY29udGludWUgdGVzdGluZy5cblxuaW1wb3J0IHtcbiAgaHRtbCxcbiAgUG9seW1lckVsZW1lbnQsXG59IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvcG9seW1lci1lbGVtZW50Jztcbi8vIGltcG9ydCAnLi4vcG9seW1lcjMtYXBwL3BvbHltZXIzLWFwcC1zdHlsZXMuc2Nzcz9uYW1lPWNhY2hpbWJvJztcblxuLyoqXG4gKiBAY3VzdG9tRWxlbWVudFxuICogQHBvbHltZXJcbiAqL1xuY2xhc3MgQXBwMSBleHRlbmRzIFBvbHltZXJFbGVtZW50IHtcbiAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxzdHlsZSBpbmNsdWRlPVwic3R5bGUtZWxlbWVudCBzdHlsZS1lbGVtZW50LTIgcG9seW1lcjMtYXBwLXN0eWxlc1wiPlxuICAgICAgPC9zdHlsZT5cbiAgICAgIDxwPlRoaXMgaXMgYSBkdW1teSBKYXZhU2NyaXB0IGZpbGUuIDwvcD5cbiAgICBgO1xuICB9XG5cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9wMToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiAnYXBwLTEnLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2FwcC0xJywgQXBwMSk7XG4iLCIvLyA8IS0tIFN0YXJ0IFN0eWxlIC0tPlxyXG4vLyA8IS0tIEVuZCBTdHlsZSAtLT5cclxuXHJcbmNvbnN0IHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RvbS1tb2R1bGUnKTtcclxuXHJcbnN0eWxlRWxlbWVudC5pbm5lckhUTUwgPSBgXHJcbiAgICA8dGVtcGxhdGU+XHJcbiAgICAgICAgPHN0eWxlPlxyXG4gICAgICAgICAgICBkaXYge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OjUwMHB4O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6MTAwcHg7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L3N0eWxlPlxyXG4gICAgPC90ZW1wbGF0ZT5cclxuYDtcclxuXHJcbnN0eWxlRWxlbWVudC5yZWdpc3Rlcignc3R5bGUtZWxlbWVudCcpO1xyXG5cclxuY29uc3Qgc3R5bGVFbGVtZW50MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RvbS1tb2R1bGUnKTtcclxuXHJcbnN0eWxlRWxlbWVudDIuaW5uZXJIVE1MID0gYFxyXG4gICAgPHRlbXBsYXRlPlxyXG4gICAgICAgIDxzdHlsZT5cclxuICAgICAgICAgICAgZGl2I2hlIHtcclxuICAgICAgICAgICAgICAgIGhlaWdodDo1MDBweDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOjEwMHB4O1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9zdHlsZT5cclxuICAgIDwvdGVtcGxhdGU+XHJcbmA7XHJcblxyXG5zdHlsZUVsZW1lbnQucmVnaXN0ZXIoJ3N0eWxlLWVsZW1lbnQtMicpO1xyXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIvKipcbkBsaWNlbnNlIEBub2NvbXBpbGVcbkNvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG4oZnVuY3Rpb24oKXsvKlxuXG4gQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciByLGFhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsYyl7YSE9QXJyYXkucHJvdG90eXBlJiZhIT1PYmplY3QucHJvdG90eXBlJiYoYVtiXT1jLnZhbHVlKX0sYmE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93PT09dGhpcz90aGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJm51bGwhPWdsb2JhbD9nbG9iYWw6dGhpcztmdW5jdGlvbiBkYSgpe2RhPWZ1bmN0aW9uKCl7fTtiYS5TeW1ib2x8fChiYS5TeW1ib2w9ZWEpfXZhciBlYT1mdW5jdGlvbigpe3ZhciBhPTA7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVyblwianNjb21wX3N5bWJvbF9cIisoYnx8XCJcIikrYSsrfX0oKTtcbmZ1bmN0aW9uIGZhKCl7ZGEoKTt2YXIgYT1iYS5TeW1ib2wuaXRlcmF0b3I7YXx8KGE9YmEuU3ltYm9sLml0ZXJhdG9yPWJhLlN5bWJvbChcIml0ZXJhdG9yXCIpKTtcImZ1bmN0aW9uXCIhPXR5cGVvZiBBcnJheS5wcm90b3R5cGVbYV0mJmFhKEFycmF5LnByb3RvdHlwZSxhLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gaGEodGhpcyl9fSk7ZmE9ZnVuY3Rpb24oKXt9fWZ1bmN0aW9uIGhhKGEpe3ZhciBiPTA7cmV0dXJuIGlhKGZ1bmN0aW9uKCl7cmV0dXJuIGI8YS5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6YVtiKytdfTp7ZG9uZTohMH19KX1mdW5jdGlvbiBpYShhKXtmYSgpO2E9e25leHQ6YX07YVtiYS5TeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3JldHVybiBhfWZ1bmN0aW9uIGphKGEpe2ZhKCk7dmFyIGI9YVtTeW1ib2wuaXRlcmF0b3JdO3JldHVybiBiP2IuY2FsbChhKTpoYShhKX12YXIga2E7XG5pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2Ypa2E9T2JqZWN0LnNldFByb3RvdHlwZU9mO2Vsc2V7dmFyIGxhO2E6e3ZhciBtYT17VWE6ITB9LG5hPXt9O3RyeXtuYS5fX3Byb3RvX189bWE7bGE9bmEuVWE7YnJlYWsgYX1jYXRjaChhKXt9bGE9ITF9a2E9bGE/ZnVuY3Rpb24oYSxiKXthLl9fcHJvdG9fXz1iO2lmKGEuX19wcm90b19fIT09Yil0aHJvdyBuZXcgVHlwZUVycm9yKGErXCIgaXMgbm90IGV4dGVuc2libGVcIik7cmV0dXJuIGF9Om51bGx9dmFyIG9hPWthO2Z1bmN0aW9uIHBhKCl7dGhpcy5mPSExO3RoaXMuYj1udWxsO3RoaXMuRGE9dm9pZCAwO3RoaXMuYT0xO3RoaXMuUz0wO3RoaXMuYz1udWxsfWZ1bmN0aW9uIHFhKGEpe2lmKGEuZil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTthLmY9ITB9cGEucHJvdG90eXBlLkI9ZnVuY3Rpb24oYSl7dGhpcy5EYT1hfTtcbmZ1bmN0aW9uIHJhKGEsYil7YS5jPXtXYTpiLCRhOiEwfTthLmE9YS5TfXBhLnByb3RvdHlwZS5yZXR1cm49ZnVuY3Rpb24oYSl7dGhpcy5jPXtyZXR1cm46YX07dGhpcy5hPXRoaXMuU307ZnVuY3Rpb24gc2EoYSxiKXthLmE9MztyZXR1cm57dmFsdWU6Yn19ZnVuY3Rpb24gdGEoYSl7dGhpcy5hPW5ldyBwYTt0aGlzLmI9YX1mdW5jdGlvbiB2YShhLGIpe3FhKGEuYSk7dmFyIGM9YS5hLmI7aWYoYylyZXR1cm4gd2EoYSxcInJldHVyblwiaW4gYz9jW1wicmV0dXJuXCJdOmZ1bmN0aW9uKGEpe3JldHVybnt2YWx1ZTphLGRvbmU6ITB9fSxiLGEuYS5yZXR1cm4pO2EuYS5yZXR1cm4oYik7cmV0dXJuIHhhKGEpfVxuZnVuY3Rpb24gd2EoYSxiLGMsZCl7dHJ5e3ZhciBlPWIuY2FsbChhLmEuYixjKTtpZighKGUgaW5zdGFuY2VvZiBPYmplY3QpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJJdGVyYXRvciByZXN1bHQgXCIrZStcIiBpcyBub3QgYW4gb2JqZWN0XCIpO2lmKCFlLmRvbmUpcmV0dXJuIGEuYS5mPSExLGU7dmFyIGY9ZS52YWx1ZX1jYXRjaChnKXtyZXR1cm4gYS5hLmI9bnVsbCxyYShhLmEsZykseGEoYSl9YS5hLmI9bnVsbDtkLmNhbGwoYS5hLGYpO3JldHVybiB4YShhKX1mdW5jdGlvbiB4YShhKXtmb3IoO2EuYS5hOyl0cnl7dmFyIGI9YS5iKGEuYSk7aWYoYilyZXR1cm4gYS5hLmY9ITEse3ZhbHVlOmIudmFsdWUsZG9uZTohMX19Y2F0Y2goYyl7YS5hLkRhPXZvaWQgMCxyYShhLmEsYyl9YS5hLmY9ITE7aWYoYS5hLmMpe2I9YS5hLmM7YS5hLmM9bnVsbDtpZihiLiRhKXRocm93IGIuV2E7cmV0dXJue3ZhbHVlOmIucmV0dXJuLGRvbmU6ITB9fXJldHVybnt2YWx1ZTp2b2lkIDAsZG9uZTohMH19XG5mdW5jdGlvbiB5YShhKXt0aGlzLm5leHQ9ZnVuY3Rpb24oYil7cWEoYS5hKTthLmEuYj9iPXdhKGEsYS5hLmIubmV4dCxiLGEuYS5CKTooYS5hLkIoYiksYj14YShhKSk7cmV0dXJuIGJ9O3RoaXMudGhyb3c9ZnVuY3Rpb24oYil7cWEoYS5hKTthLmEuYj9iPXdhKGEsYS5hLmJbXCJ0aHJvd1wiXSxiLGEuYS5CKToocmEoYS5hLGIpLGI9eGEoYSkpO3JldHVybiBifTt0aGlzLnJldHVybj1mdW5jdGlvbihiKXtyZXR1cm4gdmEoYSxiKX07ZmEoKTt0aGlzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319ZnVuY3Rpb24gemEoYSxiKXtiPW5ldyB5YShuZXcgdGEoYikpO29hJiZvYShiLGEucHJvdG90eXBlKTtyZXR1cm4gYn1mdW5jdGlvbiBBYShhKXtmb3IodmFyIGIsYz1bXTshKGI9YS5uZXh0KCkpLmRvbmU7KWMucHVzaChiLnZhbHVlKTtyZXR1cm4gY31cbihmdW5jdGlvbigpe2lmKCFmdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7YS5pbml0RXZlbnQoXCJmb29cIiwhMCwhMCk7YS5wcmV2ZW50RGVmYXVsdCgpO3JldHVybiBhLmRlZmF1bHRQcmV2ZW50ZWR9KCkpe3ZhciBhPUV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdDtFdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXt0aGlzLmNhbmNlbGFibGUmJihhLmNhbGwodGhpcyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0UHJldmVudGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiEwfSxjb25maWd1cmFibGU6ITB9KSl9fXZhciBiPS9UcmlkZW50Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO2lmKCF3aW5kb3cuQ3VzdG9tRXZlbnR8fGImJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQpd2luZG93LkN1c3RvbUV2ZW50PWZ1bmN0aW9uKGEsYil7Yj1ifHx7fTt2YXIgYz1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuYy5pbml0Q3VzdG9tRXZlbnQoYSwhIWIuYnViYmxlcywhIWIuY2FuY2VsYWJsZSxiLmRldGFpbCk7cmV0dXJuIGN9LHdpbmRvdy5DdXN0b21FdmVudC5wcm90b3R5cGU9d2luZG93LkV2ZW50LnByb3RvdHlwZTtpZighd2luZG93LkV2ZW50fHxiJiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LkV2ZW50KXt2YXIgYz13aW5kb3cuRXZlbnQ7d2luZG93LkV2ZW50PWZ1bmN0aW9uKGEsYil7Yj1ifHx7fTt2YXIgYz1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO2MuaW5pdEV2ZW50KGEsISFiLmJ1YmJsZXMsISFiLmNhbmNlbGFibGUpO3JldHVybiBjfTtpZihjKWZvcih2YXIgZCBpbiBjKXdpbmRvdy5FdmVudFtkXT1jW2RdO3dpbmRvdy5FdmVudC5wcm90b3R5cGU9Yy5wcm90b3R5cGV9aWYoIXdpbmRvdy5Nb3VzZUV2ZW50fHxiJiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQpe2I9d2luZG93Lk1vdXNlRXZlbnQ7d2luZG93Lk1vdXNlRXZlbnQ9ZnVuY3Rpb24oYSxcbmIpe2I9Ynx8e307dmFyIGM9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50XCIpO2MuaW5pdE1vdXNlRXZlbnQoYSwhIWIuYnViYmxlcywhIWIuY2FuY2VsYWJsZSxiLnZpZXd8fHdpbmRvdyxiLmRldGFpbCxiLnNjcmVlblgsYi5zY3JlZW5ZLGIuY2xpZW50WCxiLmNsaWVudFksYi5jdHJsS2V5LGIuYWx0S2V5LGIuc2hpZnRLZXksYi5tZXRhS2V5LGIuYnV0dG9uLGIucmVsYXRlZFRhcmdldCk7cmV0dXJuIGN9O2lmKGIpZm9yKGQgaW4gYil3aW5kb3cuTW91c2VFdmVudFtkXT1iW2RdO3dpbmRvdy5Nb3VzZUV2ZW50LnByb3RvdHlwZT1iLnByb3RvdHlwZX1BcnJheS5mcm9tfHwoQXJyYXkuZnJvbT1mdW5jdGlvbihhKXtyZXR1cm5bXS5zbGljZS5jYWxsKGEpfSk7T2JqZWN0LmFzc2lnbnx8KE9iamVjdC5hc3NpZ249ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksZD0wLGU7ZDxjLmxlbmd0aDtkKyspaWYoZT1jW2RdKWZvcih2YXIgZj1cbmEsbj1lLHA9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobiksRz0wO0c8cC5sZW5ndGg7RysrKWU9cFtHXSxmW2VdPW5bZV07cmV0dXJuIGF9KX0pKHdpbmRvdy5XZWJDb21wb25lbnRzKTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWZ1bmN0aW9uIGIoYSxiKXtpZighYS5jaGlsZE5vZGVzLmxlbmd0aClyZXR1cm5bXTtzd2l0Y2goYS5ub2RlVHlwZSl7Y2FzZSBOb2RlLkRPQ1VNRU5UX05PREU6cmV0dXJuIHVhLmNhbGwoYSxiKTtjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpyZXR1cm4gamYuY2FsbChhLGIpO2RlZmF1bHQ6cmV0dXJuIEEuY2FsbChhLGIpfX12YXIgYz1cInVuZGVmaW5lZFwiPT09dHlwZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQsZD0hKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5jbG9uZU5vZGUoKWluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCksZT0hMTsvVHJpZGVudC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYil7aWYoYSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKHZhciBkO2Q9YS5maXJzdENoaWxkOyljLmNhbGwodGhpcyxkLGIpO2Vsc2UgYy5jYWxsKHRoaXMsXG5hLGIpO3JldHVybiBhfWU9ITA7dmFyIGI9Tm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlO05vZGUucHJvdG90eXBlLmNsb25lTm9kZT1mdW5jdGlvbihhKXthPWIuY2FsbCh0aGlzLGEpO3RoaXMgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50JiYoYS5fX3Byb3RvX189RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUpO3JldHVybiBhfTtEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsPUhUTUxFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsO0RvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3I9SFRNTEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3I7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUse25vZGVUeXBlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFfSxjb25maWd1cmFibGU6ITB9LGxvY2FsTmFtZTp7Z2V0OmZ1bmN0aW9uKCl7fSxcbmNvbmZpZ3VyYWJsZTohMH0sbm9kZU5hbWU6e2dldDpmdW5jdGlvbigpe3JldHVyblwiI2RvY3VtZW50LWZyYWdtZW50XCJ9LGNvbmZpZ3VyYWJsZTohMH19KTt2YXIgYz1Ob2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmU7Tm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlPWE7dmFyIGQ9Tm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQ7Tm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQ9ZnVuY3Rpb24oYil7YiBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ/YS5jYWxsKHRoaXMsYixudWxsKTpkLmNhbGwodGhpcyxiKTtyZXR1cm4gYn07dmFyIGY9Tm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsZz1Ob2RlLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQ7Tm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkPWZ1bmN0aW9uKGIsYyl7YiBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ/KGEuY2FsbCh0aGlzLGIsYyksZi5jYWxsKHRoaXMsYykpOmcuY2FsbCh0aGlzLGIsYyk7cmV0dXJuIGN9O0RvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50PVxuZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNyZWF0ZUVsZW1lbnQoXCJkZlwiKTthLl9fcHJvdG9fXz1Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZTtyZXR1cm4gYX07dmFyIGg9RG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGU7RG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGU9ZnVuY3Rpb24oYSxiKXtiPWguY2FsbCh0aGlzLGEsYnx8ITEpO2EgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50JiYoYi5fX3Byb3RvX189RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUpO3JldHVybiBifX0oKTt2YXIgZj1Ob2RlLnByb3RvdHlwZS5jbG9uZU5vZGUsZz1Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCxoPURvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlLGs9Tm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsbT1Ob2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCxuPU5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZCxwPURPTVBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nLFxuRz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIiksQj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5Ob2RlLnByb3RvdHlwZSxcImNoaWxkTm9kZXNcIiksQT1FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLHVhPURvY3VtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLGpmPURvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwsa2Y9ZnVuY3Rpb24oKXtpZighYyl7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpLGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO2IuY29udGVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTthLmNvbnRlbnQuYXBwZW5kQ2hpbGQoYik7YT1hLmNsb25lTm9kZSghMCk7cmV0dXJuIDA9PT1hLmNvbnRlbnQuY2hpbGROb2Rlcy5sZW5ndGh8fFxuMD09PWEuY29udGVudC5maXJzdENoaWxkLmNvbnRlbnQuY2hpbGROb2Rlcy5sZW5ndGh8fGR9fSgpO2lmKGMpe3ZhciBjYT1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJ0ZW1wbGF0ZVwiKSxFYz0hMCxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtxLnRleHRDb250ZW50PVwidGVtcGxhdGV7ZGlzcGxheTpub25lO31cIjt2YXIgRmM9ZG9jdW1lbnQuaGVhZDtGYy5pbnNlcnRCZWZvcmUocSxGYy5maXJzdEVsZW1lbnRDaGlsZCk7YS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShIVE1MRWxlbWVudC5wcm90b3R5cGUpO3ZhciBsZj0hZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5oYXNPd25Qcm9wZXJ0eShcImlubmVySFRNTFwiKTthLlI9ZnVuY3Rpb24oYil7aWYoIWIuY29udGVudCYmYi5uYW1lc3BhY2VVUkk9PT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJKXtiLmNvbnRlbnQ9Y2EuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuZm9yKHZhciBjO2M9Yi5maXJzdENoaWxkOyltLmNhbGwoYi5jb250ZW50LGMpO2lmKGxmKWIuX19wcm90b19fPWEucHJvdG90eXBlO2Vsc2UgaWYoYi5jbG9uZU5vZGU9ZnVuY3Rpb24oYil7cmV0dXJuIGEuYih0aGlzLGIpfSxFYyl0cnl7bChiKSxEKGIpfWNhdGNoKHBoKXtFYz0hMX1hLmEoYi5jb250ZW50KX19O3ZhciBvYj17b3B0aW9uOltcInNlbGVjdFwiXSx0aGVhZDpbXCJ0YWJsZVwiXSxjb2w6W1wiY29sZ3JvdXBcIixcInRhYmxlXCJdLHRyOltcInRib2R5XCIsXCJ0YWJsZVwiXSx0aDpbXCJ0clwiLFwidGJvZHlcIixcInRhYmxlXCJdLHRkOltcInRyXCIsXCJ0Ym9keVwiLFwidGFibGVcIl19LGw9ZnVuY3Rpb24oYil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIsXCJpbm5lckhUTUxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHBiKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYil7dmFyIGM9b2JbKC88KFthLXpdW14vXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kuZXhlYyhiKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldO2lmKGMpZm9yKHZhciBkPVxuMDtkPGMubGVuZ3RoO2QrKyliPVwiPFwiK2NbZF0rXCI+XCIrYitcIjwvXCIrY1tkXStcIj5cIjtjYS5ib2R5LmlubmVySFRNTD1iO2ZvcihhLmEoY2EpO3RoaXMuY29udGVudC5maXJzdENoaWxkOylrLmNhbGwodGhpcy5jb250ZW50LHRoaXMuY29udGVudC5maXJzdENoaWxkKTtiPWNhLmJvZHk7aWYoYylmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWI9Yi5sYXN0Q2hpbGQ7Zm9yKDtiLmZpcnN0Q2hpbGQ7KW0uY2FsbCh0aGlzLmNvbnRlbnQsYi5maXJzdENoaWxkKX0sY29uZmlndXJhYmxlOiEwfSl9LEQ9ZnVuY3Rpb24oYSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJvdXRlckhUTUxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI8dGVtcGxhdGU+XCIrdGhpcy5pbm5lckhUTUwrXCI8L3RlbXBsYXRlPlwifSxzZXQ6ZnVuY3Rpb24oYSl7aWYodGhpcy5wYXJlbnROb2RlKXtjYS5ib2R5LmlubmVySFRNTD1hO2ZvcihhPXRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7Y2EuYm9keS5maXJzdENoaWxkOyltLmNhbGwoYSxcbmNhLmJvZHkuZmlyc3RDaGlsZCk7bi5jYWxsKHRoaXMucGFyZW50Tm9kZSxhLHRoaXMpfWVsc2UgdGhyb3cgRXJyb3IoXCJGYWlsZWQgdG8gc2V0IHRoZSAnb3V0ZXJIVE1MJyBwcm9wZXJ0eSBvbiAnRWxlbWVudCc6IFRoaXMgZWxlbWVudCBoYXMgbm8gcGFyZW50IG5vZGUuXCIpO30sY29uZmlndXJhYmxlOiEwfSl9O2woYS5wcm90b3R5cGUpO0QoYS5wcm90b3R5cGUpO2EuYT1mdW5jdGlvbihjKXtjPWIoYyxcInRlbXBsYXRlXCIpO2Zvcih2YXIgZD0wLGU9Yy5sZW5ndGgsZjtkPGUmJihmPWNbZF0pO2QrKylhLlIoZil9O2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXthLmEoZG9jdW1lbnQpfSk7RG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgYj1nLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtcInRlbXBsYXRlXCI9PT1iLmxvY2FsTmFtZSYmYS5SKGIpO3JldHVybiBifTtET01QYXJzZXIucHJvdG90eXBlLnBhcnNlRnJvbVN0cmluZz1cbmZ1bmN0aW9uKCl7dmFyIGI9cC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7YS5hKGIpO3JldHVybiBifTtPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwYih0aGlzKX0sc2V0OmZ1bmN0aW9uKGIpe0cuc2V0LmNhbGwodGhpcyxiKTthLmEodGhpcyl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfSk7dmFyIG1mPS9bJlxcdTAwQTBcIl0vZyxuZj0vWyZcXHUwMEEwPD5dL2csR2M9ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgXCImXCI6cmV0dXJuXCImYW1wO1wiO2Nhc2UgXCI8XCI6cmV0dXJuXCImbHQ7XCI7Y2FzZSBcIj5cIjpyZXR1cm5cIiZndDtcIjtjYXNlICdcIic6cmV0dXJuXCImcXVvdDtcIjtjYXNlIFwiXFx1MDBhMFwiOnJldHVyblwiJm5ic3A7XCJ9fTtxPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj17fSxjPTA7YzxhLmxlbmd0aDtjKyspYlthW2NdXT0hMDtyZXR1cm4gYn07dmFyIG9mPXEoXCJhcmVhIGJhc2UgYnIgY29sIGNvbW1hbmQgZW1iZWQgaHIgaW1nIGlucHV0IGtleWdlbiBsaW5rIG1ldGEgcGFyYW0gc291cmNlIHRyYWNrIHdiclwiLnNwbGl0KFwiIFwiKSksXG5wZj1xKFwic3R5bGUgc2NyaXB0IHhtcCBpZnJhbWUgbm9lbWJlZCBub2ZyYW1lcyBwbGFpbnRleHQgbm9zY3JpcHRcIi5zcGxpdChcIiBcIikpLHBiPWZ1bmN0aW9uKGEsYil7XCJ0ZW1wbGF0ZVwiPT09YS5sb2NhbE5hbWUmJihhPWEuY29udGVudCk7Zm9yKHZhciBjPVwiXCIsZD1iP2IoYSk6Qi5nZXQuY2FsbChhKSxlPTAsZj1kLmxlbmd0aCxnO2U8ZiYmKGc9ZFtlXSk7ZSsrKXthOnt2YXIgaD1nO3ZhciBrPWE7dmFyIG09Yjtzd2l0Y2goaC5ub2RlVHlwZSl7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpmb3IodmFyIG49aC5sb2NhbE5hbWUsbD1cIjxcIituLHA9aC5hdHRyaWJ1dGVzLEE9MDtrPXBbQV07QSsrKWwrPVwiIFwiK2submFtZSsnPVwiJytrLnZhbHVlLnJlcGxhY2UobWYsR2MpKydcIic7bCs9XCI+XCI7aD1vZltuXT9sOmwrcGIoaCxtKStcIjwvXCIrbitcIj5cIjticmVhayBhO2Nhc2UgTm9kZS5URVhUX05PREU6aD1oLmRhdGE7aD1rJiZwZltrLmxvY2FsTmFtZV0/aDpoLnJlcGxhY2UobmYsR2MpO2JyZWFrIGE7XG5jYXNlIE5vZGUuQ09NTUVOVF9OT0RFOmg9XCJcXHgzYyEtLVwiK2guZGF0YStcIi0tXFx4M2VcIjticmVhayBhO2RlZmF1bHQ6dGhyb3cgd2luZG93LmNvbnNvbGUuZXJyb3IoaCksRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7fX1jKz1ofXJldHVybiBjfX1pZihjfHxrZil7YS5iPWZ1bmN0aW9uKGEsYil7dmFyIGM9Zi5jYWxsKGEsITEpO3RoaXMuUiYmdGhpcy5SKGMpO2ImJihtLmNhbGwoYy5jb250ZW50LGYuY2FsbChhLmNvbnRlbnQsITApKSxxYihjLmNvbnRlbnQsYS5jb250ZW50KSk7cmV0dXJuIGN9O3ZhciBxYj1mdW5jdGlvbihjLGQpe2lmKGQucXVlcnlTZWxlY3RvckFsbCYmKGQ9YihkLFwidGVtcGxhdGVcIiksMCE9PWQubGVuZ3RoKSl7Yz1iKGMsXCJ0ZW1wbGF0ZVwiKTtmb3IodmFyIGU9MCxmPWMubGVuZ3RoLGcsaDtlPGY7ZSsrKWg9ZFtlXSxnPWNbZV0sYSYmYS5SJiZhLlIoaCksbi5jYWxsKGcucGFyZW50Tm9kZSxxZi5jYWxsKGgsITApLGcpfX0scWY9Tm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlPVxuZnVuY3Rpb24oYil7aWYoIWUmJmQmJnRoaXMgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWlmKGIpdmFyIGM9cmYuY2FsbCh0aGlzLm93bmVyRG9jdW1lbnQsdGhpcywhMCk7ZWxzZSByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtlbHNlIHRoaXMubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmXCJ0ZW1wbGF0ZVwiPT09dGhpcy5sb2NhbE5hbWUmJnRoaXMubmFtZXNwYWNlVVJJPT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJP2M9YS5iKHRoaXMsYik6Yz1mLmNhbGwodGhpcyxiKTtiJiZxYihjLHRoaXMpO3JldHVybiBjfSxyZj1Eb2N1bWVudC5wcm90b3R5cGUuaW1wb3J0Tm9kZT1mdW5jdGlvbihjLGQpe2Q9ZHx8ITE7aWYoXCJ0ZW1wbGF0ZVwiPT09Yy5sb2NhbE5hbWUpcmV0dXJuIGEuYihjLGQpO3ZhciBlPWguY2FsbCh0aGlzLGMsZCk7aWYoZCl7cWIoZSxjKTtjPWIoZSwnc2NyaXB0Om5vdChbdHlwZV0pLHNjcmlwdFt0eXBlPVwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiXSxzY3JpcHRbdHlwZT1cInRleHQvamF2YXNjcmlwdFwiXScpO1xuZm9yKHZhciBmLGs9MDtrPGMubGVuZ3RoO2srKyl7Zj1jW2tdO2Q9Zy5jYWxsKGRvY3VtZW50LFwic2NyaXB0XCIpO2QudGV4dENvbnRlbnQ9Zi50ZXh0Q29udGVudDtmb3IodmFyIG09Zi5hdHRyaWJ1dGVzLGw9MCxwO2w8bS5sZW5ndGg7bCsrKXA9bVtsXSxkLnNldEF0dHJpYnV0ZShwLm5hbWUscC52YWx1ZSk7bi5jYWxsKGYucGFyZW50Tm9kZSxkLGYpfX1yZXR1cm4gZX19YyYmKHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50PWEpfSkoKTt2YXIgQmE9c2V0VGltZW91dDtmdW5jdGlvbiBDYSgpe31mdW5jdGlvbiBEYShhLGIpe3JldHVybiBmdW5jdGlvbigpe2EuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiB0KGEpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlcyBtdXN0IGJlIGNvbnN0cnVjdGVkIHZpYSBuZXdcIik7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGEpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5vdCBhIGZ1bmN0aW9uXCIpO3RoaXMuSj0wO3RoaXMuQWE9ITE7dGhpcy5BPXZvaWQgMDt0aGlzLlY9W107RWEoYSx0aGlzKX1cbmZ1bmN0aW9uIEZhKGEsYil7Zm9yKDszPT09YS5KOylhPWEuQTswPT09YS5KP2EuVi5wdXNoKGIpOihhLkFhPSEwLHQuYShmdW5jdGlvbigpe3ZhciBjPTE9PT1hLko/Yi5iYjpiLmNiO2lmKG51bGw9PT1jKSgxPT09YS5KP0dhOkhhKShiLnZhLGEuQSk7ZWxzZXt0cnl7dmFyIGQ9YyhhLkEpfWNhdGNoKGUpe0hhKGIudmEsZSk7cmV0dXJufUdhKGIudmEsZCl9fSkpfWZ1bmN0aW9uIEdhKGEsYil7dHJ5e2lmKGI9PT1hKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLlwiKTtpZihiJiYoXCJvYmplY3RcIj09PXR5cGVvZiBifHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYikpe3ZhciBjPWIudGhlbjtpZihiIGluc3RhbmNlb2YgdCl7YS5KPTM7YS5BPWI7SWEoYSk7cmV0dXJufWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXtFYShEYShjLGIpLGEpO3JldHVybn19YS5KPTE7YS5BPWI7SWEoYSl9Y2F0Y2goZCl7SGEoYSxkKX19XG5mdW5jdGlvbiBIYShhLGIpe2EuSj0yO2EuQT1iO0lhKGEpfWZ1bmN0aW9uIElhKGEpezI9PT1hLkomJjA9PT1hLlYubGVuZ3RoJiZ0LmEoZnVuY3Rpb24oKXthLkFhfHx0LmIoYS5BKX0pO2Zvcih2YXIgYj0wLGM9YS5WLmxlbmd0aDtiPGM7YisrKUZhKGEsYS5WW2JdKTthLlY9bnVsbH1mdW5jdGlvbiBKYShhLGIsYyl7dGhpcy5iYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGw7dGhpcy5jYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iOm51bGw7dGhpcy52YT1jfWZ1bmN0aW9uIEVhKGEsYil7dmFyIGM9ITE7dHJ5e2EoZnVuY3Rpb24oYSl7Y3x8KGM9ITAsR2EoYixhKSl9LGZ1bmN0aW9uKGEpe2N8fChjPSEwLEhhKGIsYSkpfSl9Y2F0Y2goZCl7Y3x8KGM9ITAsSGEoYixkKSl9fXQucHJvdG90eXBlW1wiY2F0Y2hcIl09ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMudGhlbihudWxsLGEpfTtcbnQucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgdGhpcy5jb25zdHJ1Y3RvcihDYSk7RmEodGhpcyxuZXcgSmEoYSxiLGMpKTtyZXR1cm4gY307dC5wcm90b3R5cGVbXCJmaW5hbGx5XCJdPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuY29uc3RydWN0b3I7cmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYi5yZXNvbHZlKGEoKSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSl9LGZ1bmN0aW9uKGMpe3JldHVybiBiLnJlc29sdmUoYSgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIucmVqZWN0KGMpfSl9KX07XG50LmM9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyB0KGZ1bmN0aW9uKGIsYyl7ZnVuY3Rpb24gZChhLGcpe3RyeXtpZihnJiYoXCJvYmplY3RcIj09PXR5cGVvZiBnfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZykpe3ZhciBoPWcudGhlbjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaCl7aC5jYWxsKGcsZnVuY3Rpb24oYil7ZChhLGIpfSxjKTtyZXR1cm59fWVbYV09ZzswPT09LS1mJiZiKGUpfWNhdGNoKG4pe2Mobil9fWlmKCFhfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEubGVuZ3RoKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlLmFsbCBhY2NlcHRzIGFuIGFycmF5XCIpO3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gYihbXSk7Zm9yKHZhciBmPWUubGVuZ3RoLGc9MDtnPGUubGVuZ3RoO2crKylkKGcsZVtnXSl9KX07XG50LnJlc29sdmU9ZnVuY3Rpb24oYSl7cmV0dXJuIGEmJlwib2JqZWN0XCI9PT10eXBlb2YgYSYmYS5jb25zdHJ1Y3Rvcj09PXQ/YTpuZXcgdChmdW5jdGlvbihiKXtiKGEpfSl9O3QucmVqZWN0PWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgdChmdW5jdGlvbihiLGMpe2MoYSl9KX07dC5mPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgdChmdW5jdGlvbihiLGMpe2Zvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKylhW2RdLnRoZW4oYixjKX0pfTt0LmE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldEltbWVkaWF0ZSYmZnVuY3Rpb24oYSl7c2V0SW1tZWRpYXRlKGEpfXx8ZnVuY3Rpb24oYSl7QmEoYSwwKX07dC5iPWZ1bmN0aW9uKGEpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmY29uc29sZSYmY29uc29sZS53YXJuKFwiUG9zc2libGUgVW5oYW5kbGVkIFByb21pc2UgUmVqZWN0aW9uOlwiLGEpfTsvKlxuXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaWYoIXdpbmRvdy5Qcm9taXNlJiYod2luZG93LlByb21pc2U9dCx0LnByb3RvdHlwZS50aGVuPXQucHJvdG90eXBlLnRoZW4sdC5hbGw9dC5jLHQucmFjZT10LmYsdC5yZXNvbHZlPXQucmVzb2x2ZSx0LnJlamVjdD10LnJlamVjdCwhd2luZG93LnNldEltbWVkaWF0ZSkpe3ZhciBLYT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSxMYT1bXTsobmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGE9TGEubGVuZ3RoLGI9MDtiPGE7YisrKUxhW2JdKCk7TGEuc3BsaWNlKDAsYSl9KSkub2JzZXJ2ZShLYSx7Y2hhcmFjdGVyRGF0YTohMH0pO3QuYT1mdW5jdGlvbihhKXtMYS5wdXNoKGEpO0thLnRleHRDb250ZW50PTA8S2EudGV4dENvbnRlbnQubGVuZ3RoP1wiXCI6XCJhXCJ9fTt2YXIgTWE9e30sTmE9T2JqZWN0LmNyZWF0ZSxPYT1PYmplY3QuZGVmaW5lUHJvcGVydGllcyxQYT1PYmplY3QuZGVmaW5lUHJvcGVydHk7ZnVuY3Rpb24gdShhLGIpe2I9dm9pZCAwPT09Yj97fTpiO3JldHVybnt2YWx1ZTphLGNvbmZpZ3VyYWJsZTohIWIuQmEsd3JpdGFibGU6ISFiLmtiLGVudW1lcmFibGU6ISFiLmV9fXZhciBRYT12b2lkIDA7dHJ5e1FhPTE9PT1QYSh7fSxcInlcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDF9fSkueX1jYXRjaChhKXtRYT0hMX12YXIgUmE9e307ZnVuY3Rpb24gU2EoYSl7YT1TdHJpbmcoYSk7Zm9yKHZhciBiPVwiXCIsYz0wO1JhW2ErYl07KWI9Yys9MTtSYVthK2JdPTE7dmFyIGQ9XCJTeW1ib2woXCIrYStiK1wiKVwiO1FhJiZQYShPYmplY3QucHJvdG90eXBlLGQse2dldDp2b2lkIDAsc2V0OmZ1bmN0aW9uKGEpe1BhKHRoaXMsZCx1KGEse0JhOiEwLGtiOiEwfSkpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMX0pO3JldHVybiBkfXZhciBUYT1OYShudWxsKTtcbmZ1bmN0aW9uIHYoYSl7aWYodGhpcyBpbnN0YW5jZW9mIHYpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKTthPXZvaWQgMD09PWE/XCJcIjpTdHJpbmcoYSk7dmFyIGI9U2EoYSk7cmV0dXJuIFFhP05hKFRhLHt4YTp1KGEpLE5hOnUoYil9KTpifU9hKHYse1wiZm9yXCI6dShmdW5jdGlvbihhKXthPVN0cmluZyhhKTtpZihNYVthXSlyZXR1cm4gTWFbYV07dmFyIGI9dihhKTtyZXR1cm4gTWFbYV09Yn0pLGtleUZvcjp1KGZ1bmN0aW9uKGEpe2lmKFFhJiYoIWF8fFwiU3ltYm9sXCIhPT1hW3YudG9TdHJpbmdUYWddKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiXCIrYStcIiBpcyBub3QgYSBzeW1ib2xcIik7Zm9yKHZhciBiIGluIE1hKWlmKE1hW2JdPT09YSlyZXR1cm4gUWE/TWFbYl0ueGE6TWFbYl0uc3Vic3RyKDcsTWFbYl0ubGVuZ3RoLTgpfSl9KTtcbk9hKHYse0JiOnUodihcImhhc0luc3RhbmNlXCIpKSxDYjp1KHYoXCJpc0NvbmNhdFNwcmVhZGFibGVcIikpLGl0ZXJhdG9yOnUodihcIml0ZXJhdG9yXCIpKSxtYXRjaDp1KHYoXCJtYXRjaFwiKSkscmVwbGFjZTp1KHYoXCJyZXBsYWNlXCIpKSxzZWFyY2g6dSh2KFwic2VhcmNoXCIpKSxFYjp1KHYoXCJzcGVjaWVzXCIpKSxzcGxpdDp1KHYoXCJzcGxpdFwiKSksRmI6dSh2KFwidG9QcmltaXRpdmVcIikpLHRvU3RyaW5nVGFnOnUodihcInRvU3RyaW5nVGFnXCIpKSx1bnNjb3BhYmxlczp1KHYoXCJ1bnNjb3BhYmxlc1wiKSl9KTtPYShUYSx7Y29uc3RydWN0b3I6dSh2KSx0b1N0cmluZzp1KGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuTmF9KSx2YWx1ZU9mOnUoZnVuY3Rpb24oKXtyZXR1cm5cIlN5bWJvbChcIit0aGlzLnhhK1wiKVwifSl9KTtRYSYmUGEoVGEsdi50b1N0cmluZ1RhZyx1KFwiU3ltYm9sXCIse0JhOiEwfSkpO3ZhciBVYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sP1N5bWJvbDp2Oy8qXG5cbkNvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pZighd2luZG93LlN5bWJvbCl7d2luZG93LlN5bWJvbD1VYTt2YXIgVmE9d2luZG93LlN5bWJvbC5pdGVyYXRvcjtBcnJheS5wcm90b3R5cGVbVmFdPWZ1bmN0aW9uIGIoKXt2YXIgYyxkPXRoaXM7cmV0dXJuIHphKGIsZnVuY3Rpb24oYil7MT09Yi5hJiYoYz0wKTtpZigzIT1iLmEpcmV0dXJuIGM8ZC5sZW5ndGg/Yj1zYShiLGRbY10pOihiLmE9MCxiPXZvaWQgMCksYjtjKys7Yi5hPTJ9KX07U2V0LnByb3RvdHlwZVtWYV09ZnVuY3Rpb24gYygpe3ZhciBkLGU9dGhpcyxmO3JldHVybiB6YShjLGZ1bmN0aW9uKGMpezE9PWMuYSYmKGQ9W10sZS5mb3JFYWNoKGZ1bmN0aW9uKGMpe2QucHVzaChjKX0pLGY9MCk7aWYoMyE9Yy5hKXJldHVybiBmPGQubGVuZ3RoP2M9c2EoYyxkW2ZdKTooYy5hPTAsYz12b2lkIDApLGM7ZisrO2MuYT0yfSl9O01hcC5wcm90b3R5cGVbVmFdPWZ1bmN0aW9uIGQoKXt2YXIgZSxmPXRoaXMsZztyZXR1cm4gemEoZCxmdW5jdGlvbihkKXsxPT1kLmEmJihlPVtdLFxuZi5mb3JFYWNoKGZ1bmN0aW9uKGQsZil7ZS5wdXNoKFtmLGRdKX0pLGc9MCk7aWYoMyE9ZC5hKXJldHVybiBnPGUubGVuZ3RoP2Q9c2EoZCxlW2ddKTooZC5hPTAsZD12b2lkIDApLGQ7ZysrO2QuYT0yfSl9O1N0cmluZy5wcm90b3R5cGVbVmFdPWZ1bmN0aW9uIGUoKXt2YXIgZixnPXRoaXM7cmV0dXJuIHphKGUsZnVuY3Rpb24oZSl7MT09ZS5hJiYoZj0wKTtpZigzIT1lLmEpcmV0dXJuIGY8Zy5sZW5ndGg/ZT1zYShlLGdbZl0pOihlLmE9MCxlPXZvaWQgMCksZTtmKys7ZS5hPTJ9KX19Oy8qXG5cbiBDb3B5cmlnaHQgKGMpIDIwMTQgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG53aW5kb3cuV2ViQ29tcG9uZW50cz13aW5kb3cuV2ViQ29tcG9uZW50c3x8e2ZsYWdzOnt9fTt2YXIgV2E9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0W3NyYyo9XCJ3ZWJjb21wb25lbnRzLWJ1bmRsZVwiXScpLFhhPS93Yy0oLispLyx3PXt9O2lmKCF3Lm5vT3B0cyl7bG9jYXRpb24uc2VhcmNoLnNsaWNlKDEpLnNwbGl0KFwiJlwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2E9YS5zcGxpdChcIj1cIik7dmFyIGI7YVswXSYmKGI9YVswXS5tYXRjaChYYSkpJiYod1tiWzFdXT1hWzFdfHwhMCl9KTtpZihXYSlmb3IodmFyIFlhPTAsWmE7WmE9V2EuYXR0cmlidXRlc1tZYV07WWErKylcInNyY1wiIT09WmEubmFtZSYmKHdbWmEubmFtZV09WmEudmFsdWV8fCEwKTtpZih3LmxvZyYmdy5sb2cuc3BsaXQpe3ZhciAkYT13LmxvZy5zcGxpdChcIixcIik7dy5sb2c9e307JGEuZm9yRWFjaChmdW5jdGlvbihhKXt3LmxvZ1thXT0hMH0pfWVsc2Ugdy5sb2c9e319XG53aW5kb3cuV2ViQ29tcG9uZW50cy5mbGFncz13O3ZhciBhYj13LnNoYWR5ZG9tO2FiJiYod2luZG93LlNoYWR5RE9NPXdpbmRvdy5TaGFkeURPTXx8e30sd2luZG93LlNoYWR5RE9NLmZvcmNlPWFiKTt2YXIgYmI9dy5yZWdpc3Rlcnx8dy5jZTtiYiYmd2luZG93LmN1c3RvbUVsZW1lbnRzJiYod2luZG93LmN1c3RvbUVsZW1lbnRzLmZvcmNlUG9seWZpbGw9YmIpOy8qXG5cbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5mdW5jdGlvbiBjYigpe3RoaXMuRmE9dGhpcy5yb290PW51bGw7dGhpcy5mYT0hMTt0aGlzLk49dGhpcy5iYT10aGlzLnFhPXRoaXMuYXNzaWduZWRTbG90PXRoaXMuYXNzaWduZWROb2Rlcz10aGlzLlQ9bnVsbDt0aGlzLmNoaWxkTm9kZXM9dGhpcy5uZXh0U2libGluZz10aGlzLnByZXZpb3VzU2libGluZz10aGlzLmxhc3RDaGlsZD10aGlzLmZpcnN0Q2hpbGQ9dGhpcy5wYXJlbnROb2RlPXRoaXMuVz12b2lkIDA7dGhpcy5KYT10aGlzLnlhPSExO3RoaXMuJD17fX1jYi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue319O2Z1bmN0aW9uIHgoYSl7YS5sYXx8KGEubGE9bmV3IGNiKTtyZXR1cm4gYS5sYX1mdW5jdGlvbiB5KGEpe3JldHVybiBhJiZhLmxhfTt2YXIgej13aW5kb3cuU2hhZHlET018fHt9O3ouWWE9ISghRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoU2hhZG93fHwhTm9kZS5wcm90b3R5cGUuZ2V0Um9vdE5vZGUpO3ZhciBkYj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5vZGUucHJvdG90eXBlLFwiZmlyc3RDaGlsZFwiKTt6Lks9ISEoZGImJmRiLmNvbmZpZ3VyYWJsZSYmZGIuZ2V0KTt6LnRhPXouZm9yY2V8fCF6LllhO3ZhciBlYj1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKFwiVHJpZGVudFwiKSxmYj1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKFwiRWRnZVwiKTt2b2lkIDA9PT16LkhhJiYoei5IYT16LksmJihlYnx8ZmIpKTtmdW5jdGlvbiBnYihhKXtyZXR1cm4oYT15KGEpKSYmdm9pZCAwIT09YS5maXJzdENoaWxkfWZ1bmN0aW9uIEMoYSl7cmV0dXJuXCJTaGFkeVJvb3RcIj09PWEuUWF9ZnVuY3Rpb24gaGIoYSl7YT1hLmdldFJvb3ROb2RlKCk7aWYoQyhhKSlyZXR1cm4gYX1cbnZhciBpYj1FbGVtZW50LnByb3RvdHlwZSxqYj1pYi5tYXRjaGVzfHxpYi5tYXRjaGVzU2VsZWN0b3J8fGliLm1vek1hdGNoZXNTZWxlY3Rvcnx8aWIubXNNYXRjaGVzU2VsZWN0b3J8fGliLm9NYXRjaGVzU2VsZWN0b3J8fGliLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtmdW5jdGlvbiBrYihhLGIpe2lmKGEmJmIpZm9yKHZhciBjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGIpLGQ9MCxlO2Q8Yy5sZW5ndGgmJihlPWNbZF0pO2QrKyl7dmFyIGY9ZSxnPWEsaD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGIsZik7aCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGcsZixoKX19ZnVuY3Rpb24gbGIoYSxiKXtmb3IodmFyIGM9W10sZD0xO2Q8YXJndW1lbnRzLmxlbmd0aDsrK2QpY1tkLTFdPWFyZ3VtZW50c1tkXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWtiKGEsY1tkXSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWIoYSxiKXtmb3IodmFyIGMgaW4gYilhW2NdPWJbY119XG52YXIgbmI9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikscmI9MCxzYj1bXTsobmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKXtmb3IoO3NiLmxlbmd0aDspdHJ5e3NiLnNoaWZ0KCkoKX1jYXRjaChhKXt0aHJvdyBuYi50ZXh0Q29udGVudD1yYisrLGE7fX0pKS5vYnNlcnZlKG5iLHtjaGFyYWN0ZXJEYXRhOiEwfSk7ZnVuY3Rpb24gdGIoYSl7c2IucHVzaChhKTtuYi50ZXh0Q29udGVudD1yYisrfXZhciB1Yj0hIWRvY3VtZW50LmNvbnRhaW5zO2Z1bmN0aW9uIHZiKGEsYil7Zm9yKDtiOyl7aWYoYj09YSlyZXR1cm4hMDtiPWIucGFyZW50Tm9kZX1yZXR1cm4hMX1cbmZ1bmN0aW9uIHdiKGEpe2Zvcih2YXIgYj1hLmxlbmd0aC0xOzA8PWI7Yi0tKXt2YXIgYz1hW2JdLGQ9Yy5nZXRBdHRyaWJ1dGUoXCJpZFwiKXx8Yy5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO2QmJlwibGVuZ3RoXCIhPT1kJiZpc05hTihkKSYmKGFbZF09Yyl9YS5pdGVtPWZ1bmN0aW9uKGIpe3JldHVybiBhW2JdfTthLm5hbWVkSXRlbT1mdW5jdGlvbihiKXtpZihcImxlbmd0aFwiIT09YiYmaXNOYU4oYikmJmFbYl0pcmV0dXJuIGFbYl07Zm9yKHZhciBjPWphKGEpLGQ9Yy5uZXh0KCk7IWQuZG9uZTtkPWMubmV4dCgpKWlmKGQ9ZC52YWx1ZSwoZC5nZXRBdHRyaWJ1dGUoXCJpZFwiKXx8ZC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpKT09YilyZXR1cm4gZDtyZXR1cm4gbnVsbH07cmV0dXJuIGF9O3ZhciB4Yj1bXSx5YjtmdW5jdGlvbiB6YihhKXt5Ynx8KHliPSEwLHRiKEFiKSk7eGIucHVzaChhKX1mdW5jdGlvbiBBYigpe3liPSExO2Zvcih2YXIgYT0hIXhiLmxlbmd0aDt4Yi5sZW5ndGg7KXhiLnNoaWZ0KCkoKTtyZXR1cm4gYX1BYi5saXN0PXhiO2Z1bmN0aW9uIEJiKCl7dGhpcy5hPSExO3RoaXMuYWRkZWROb2Rlcz1bXTt0aGlzLnJlbW92ZWROb2Rlcz1bXTt0aGlzLmVhPW5ldyBTZXR9ZnVuY3Rpb24gQ2IoYSl7YS5hfHwoYS5hPSEwLHRiKGZ1bmN0aW9uKCl7YS5mbHVzaCgpfSkpfUJiLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2lmKHRoaXMuYSl7dGhpcy5hPSExO3ZhciBhPXRoaXMudGFrZVJlY29yZHMoKTthLmxlbmd0aCYmdGhpcy5lYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2IoYSl9KX19O0JiLnByb3RvdHlwZS50YWtlUmVjb3Jkcz1mdW5jdGlvbigpe2lmKHRoaXMuYWRkZWROb2Rlcy5sZW5ndGh8fHRoaXMucmVtb3ZlZE5vZGVzLmxlbmd0aCl7dmFyIGE9W3thZGRlZE5vZGVzOnRoaXMuYWRkZWROb2RlcyxyZW1vdmVkTm9kZXM6dGhpcy5yZW1vdmVkTm9kZXN9XTt0aGlzLmFkZGVkTm9kZXM9W107dGhpcy5yZW1vdmVkTm9kZXM9W107cmV0dXJuIGF9cmV0dXJuW119O1xuZnVuY3Rpb24gRGIoYSxiKXt2YXIgYz14KGEpO2MuVHx8KGMuVD1uZXcgQmIpO2MuVC5lYS5hZGQoYik7dmFyIGQ9Yy5UO3JldHVybntPYTpiLFA6ZCxSYTphLHRha2VSZWNvcmRzOmZ1bmN0aW9uKCl7cmV0dXJuIGQudGFrZVJlY29yZHMoKX19fWZ1bmN0aW9uIEViKGEpe3ZhciBiPWEmJmEuUDtiJiYoYi5lYS5kZWxldGUoYS5PYSksYi5lYS5zaXplfHwoeChhLlJhKS5UPW51bGwpKX1cbmZ1bmN0aW9uIEZiKGEsYil7dmFyIGM9Yi5nZXRSb290Tm9kZSgpO3JldHVybiBhLm1hcChmdW5jdGlvbihhKXt2YXIgYj1jPT09YS50YXJnZXQuZ2V0Um9vdE5vZGUoKTtpZihiJiZhLmFkZGVkTm9kZXMpe2lmKGI9QXJyYXkuZnJvbShhLmFkZGVkTm9kZXMpLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gYz09PWEuZ2V0Um9vdE5vZGUoKX0pLGIubGVuZ3RoKXJldHVybiBhPU9iamVjdC5jcmVhdGUoYSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJhZGRlZE5vZGVzXCIse3ZhbHVlOmIsY29uZmlndXJhYmxlOiEwfSksYX1lbHNlIGlmKGIpcmV0dXJuIGF9KS5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGF9KX07dmFyIEdiPUVsZW1lbnQucHJvdG90eXBlLmluc2VydEJlZm9yZSxIYj1FbGVtZW50LnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQsSWI9RWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsSmI9RWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlLEtiPUVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSxMYj1FbGVtZW50LnByb3RvdHlwZS5jbG9uZU5vZGUsTWI9RG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUsTmI9RWxlbWVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcixPYj1FbGVtZW50LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyLFBiPVdpbmRvdy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcixRYj1XaW5kb3cucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsUmI9RWxlbWVudC5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCxTYj1Ob2RlLnByb3RvdHlwZS5jb250YWluc3x8SFRNTEVsZW1lbnQucHJvdG90eXBlLmNvbnRhaW5zLFRiPURvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZCxcblViPUVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IsVmI9RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvcixXYj1Eb2N1bWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvcixYYj1FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLFliPURvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwsWmI9RG9jdW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwsRT17fTtFLmFwcGVuZENoaWxkPUVsZW1lbnQucHJvdG90eXBlLmFwcGVuZENoaWxkO0UuaW5zZXJ0QmVmb3JlPUdiO0UucmVwbGFjZUNoaWxkPUhiO0UucmVtb3ZlQ2hpbGQ9SWI7RS5zZXRBdHRyaWJ1dGU9SmI7RS5yZW1vdmVBdHRyaWJ1dGU9S2I7RS5jbG9uZU5vZGU9TGI7RS5pbXBvcnROb2RlPU1iO0UuYWRkRXZlbnRMaXN0ZW5lcj1OYjtFLnJlbW92ZUV2ZW50TGlzdGVuZXI9T2I7RS5sYj1QYjtFLm1iPVFiO0UuZGlzcGF0Y2hFdmVudD1SYjtcbkUuY29udGFpbnM9U2I7RS5nZXRFbGVtZW50QnlJZD1UYjtFLnZiPVViO0UuemI9VmI7RS50Yj1XYjtFLnF1ZXJ5U2VsZWN0b3I9ZnVuY3Rpb24oYSl7c3dpdGNoKHRoaXMubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6cmV0dXJuIFViLmNhbGwodGhpcyxhKTtjYXNlIE5vZGUuRE9DVU1FTlRfTk9ERTpyZXR1cm4gV2IuY2FsbCh0aGlzLGEpO2RlZmF1bHQ6cmV0dXJuIFZiLmNhbGwodGhpcyxhKX19O0Uud2I9WGI7RS5BYj1ZYjtFLnViPVpiO0UucXVlcnlTZWxlY3RvckFsbD1mdW5jdGlvbihhKXtzd2l0Y2godGhpcy5ub2RlVHlwZSl7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpyZXR1cm4gWGIuY2FsbCh0aGlzLGEpO2Nhc2UgTm9kZS5ET0NVTUVOVF9OT0RFOnJldHVybiBaYi5jYWxsKHRoaXMsYSk7ZGVmYXVsdDpyZXR1cm4gWWIuY2FsbCh0aGlzLGEpfX07dmFyICRiPS9bJlxcdTAwQTBcIl0vZyxhYz0vWyZcXHUwMEEwPD5dL2c7ZnVuY3Rpb24gYmMoYSl7c3dpdGNoKGEpe2Nhc2UgXCImXCI6cmV0dXJuXCImYW1wO1wiO2Nhc2UgXCI8XCI6cmV0dXJuXCImbHQ7XCI7Y2FzZSBcIj5cIjpyZXR1cm5cIiZndDtcIjtjYXNlICdcIic6cmV0dXJuXCImcXVvdDtcIjtjYXNlIFwiXFx1MDBhMFwiOnJldHVyblwiJm5ic3A7XCJ9fWZ1bmN0aW9uIGNjKGEpe2Zvcih2YXIgYj17fSxjPTA7YzxhLmxlbmd0aDtjKyspYlthW2NdXT0hMDtyZXR1cm4gYn12YXIgZGM9Y2MoXCJhcmVhIGJhc2UgYnIgY29sIGNvbW1hbmQgZW1iZWQgaHIgaW1nIGlucHV0IGtleWdlbiBsaW5rIG1ldGEgcGFyYW0gc291cmNlIHRyYWNrIHdiclwiLnNwbGl0KFwiIFwiKSksZWM9Y2MoXCJzdHlsZSBzY3JpcHQgeG1wIGlmcmFtZSBub2VtYmVkIG5vZnJhbWVzIHBsYWludGV4dCBub3NjcmlwdFwiLnNwbGl0KFwiIFwiKSk7XG5mdW5jdGlvbiBmYyhhLGIpe1widGVtcGxhdGVcIj09PWEubG9jYWxOYW1lJiYoYT1hLmNvbnRlbnQpO2Zvcih2YXIgYz1cIlwiLGQ9Yj9iKGEpOmEuY2hpbGROb2RlcyxlPTAsZj1kLmxlbmd0aCxnO2U8ZiYmKGc9ZFtlXSk7ZSsrKXthOnt2YXIgaD1nO3ZhciBrPWE7dmFyIG09Yjtzd2l0Y2goaC5ub2RlVHlwZSl7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpmb3IodmFyIG49aC5sb2NhbE5hbWUscD1cIjxcIituLEc9aC5hdHRyaWJ1dGVzLEI9MDtrPUdbQl07QisrKXArPVwiIFwiK2submFtZSsnPVwiJytrLnZhbHVlLnJlcGxhY2UoJGIsYmMpKydcIic7cCs9XCI+XCI7aD1kY1tuXT9wOnArZmMoaCxtKStcIjwvXCIrbitcIj5cIjticmVhayBhO2Nhc2UgTm9kZS5URVhUX05PREU6aD1oLmRhdGE7aD1rJiZlY1trLmxvY2FsTmFtZV0/aDpoLnJlcGxhY2UoYWMsYmMpO2JyZWFrIGE7Y2FzZSBOb2RlLkNPTU1FTlRfTk9ERTpoPVwiXFx4M2MhLS1cIitoLmRhdGErXCItLVxceDNlXCI7YnJlYWsgYTtkZWZhdWx0OnRocm93IHdpbmRvdy5jb25zb2xlLmVycm9yKGgpLFxuRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7fX1jKz1ofXJldHVybiBjfTt2YXIgRj1kb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGRvY3VtZW50LE5vZGVGaWx0ZXIuU0hPV19BTEwsbnVsbCwhMSksSD1kb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGRvY3VtZW50LE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5ULG51bGwsITEpO2Z1bmN0aW9uIGdjKGEpe3ZhciBiPVtdO0YuY3VycmVudE5vZGU9YTtmb3IoYT1GLmZpcnN0Q2hpbGQoKTthOyliLnB1c2goYSksYT1GLm5leHRTaWJsaW5nKCk7cmV0dXJuIGJ9XG52YXIgST17cGFyZW50Tm9kZTpmdW5jdGlvbihhKXtGLmN1cnJlbnROb2RlPWE7cmV0dXJuIEYucGFyZW50Tm9kZSgpfSxmaXJzdENoaWxkOmZ1bmN0aW9uKGEpe0YuY3VycmVudE5vZGU9YTtyZXR1cm4gRi5maXJzdENoaWxkKCl9LGxhc3RDaGlsZDpmdW5jdGlvbihhKXtGLmN1cnJlbnROb2RlPWE7cmV0dXJuIEYubGFzdENoaWxkKCl9LHByZXZpb3VzU2libGluZzpmdW5jdGlvbihhKXtGLmN1cnJlbnROb2RlPWE7cmV0dXJuIEYucHJldmlvdXNTaWJsaW5nKCl9LG5leHRTaWJsaW5nOmZ1bmN0aW9uKGEpe0YuY3VycmVudE5vZGU9YTtyZXR1cm4gRi5uZXh0U2libGluZygpfX07SS5jaGlsZE5vZGVzPWdjO0kucGFyZW50RWxlbWVudD1mdW5jdGlvbihhKXtILmN1cnJlbnROb2RlPWE7cmV0dXJuIEgucGFyZW50Tm9kZSgpfTtJLmZpcnN0RWxlbWVudENoaWxkPWZ1bmN0aW9uKGEpe0guY3VycmVudE5vZGU9YTtyZXR1cm4gSC5maXJzdENoaWxkKCl9O1xuSS5sYXN0RWxlbWVudENoaWxkPWZ1bmN0aW9uKGEpe0guY3VycmVudE5vZGU9YTtyZXR1cm4gSC5sYXN0Q2hpbGQoKX07SS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nPWZ1bmN0aW9uKGEpe0guY3VycmVudE5vZGU9YTtyZXR1cm4gSC5wcmV2aW91c1NpYmxpbmcoKX07SS5uZXh0RWxlbWVudFNpYmxpbmc9ZnVuY3Rpb24oYSl7SC5jdXJyZW50Tm9kZT1hO3JldHVybiBILm5leHRTaWJsaW5nKCl9O0kuY2hpbGRyZW49ZnVuY3Rpb24oYSl7dmFyIGI9W107SC5jdXJyZW50Tm9kZT1hO2ZvcihhPUguZmlyc3RDaGlsZCgpO2E7KWIucHVzaChhKSxhPUgubmV4dFNpYmxpbmcoKTtyZXR1cm4gd2IoYil9O0kuaW5uZXJIVE1MPWZ1bmN0aW9uKGEpe3JldHVybiBmYyhhLGZ1bmN0aW9uKGEpe3JldHVybiBnYyhhKX0pfTtcbkkudGV4dENvbnRlbnQ9ZnVuY3Rpb24oYSl7c3dpdGNoKGEubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6Y2FzZSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6YT1kb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGEsTm9kZUZpbHRlci5TSE9XX1RFWFQsbnVsbCwhMSk7Zm9yKHZhciBiPVwiXCIsYztjPWEubmV4dE5vZGUoKTspYis9Yy5ub2RlVmFsdWU7cmV0dXJuIGI7ZGVmYXVsdDpyZXR1cm4gYS5ub2RlVmFsdWV9fTt2YXIgaGM9ei5LLGljPVtOb2RlLnByb3RvdHlwZSxFbGVtZW50LnByb3RvdHlwZSxIVE1MRWxlbWVudC5wcm90b3R5cGVdO2Z1bmN0aW9uIEooYSl7dmFyIGI7YTp7Zm9yKGI9MDtiPGljLmxlbmd0aDtiKyspe3ZhciBjPWljW2JdO2lmKGMuaGFzT3duUHJvcGVydHkoYSkpe2I9YzticmVhayBhfX1iPXZvaWQgMH1pZighYil0aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGRlc2NyaXB0b3IgZm9yIFwiK2EpO3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGIsYSl9XG52YXIgSz1oYz97cGFyZW50Tm9kZTpKKFwicGFyZW50Tm9kZVwiKSxmaXJzdENoaWxkOkooXCJmaXJzdENoaWxkXCIpLGxhc3RDaGlsZDpKKFwibGFzdENoaWxkXCIpLHByZXZpb3VzU2libGluZzpKKFwicHJldmlvdXNTaWJsaW5nXCIpLG5leHRTaWJsaW5nOkooXCJuZXh0U2libGluZ1wiKSxjaGlsZE5vZGVzOkooXCJjaGlsZE5vZGVzXCIpLHBhcmVudEVsZW1lbnQ6SihcInBhcmVudEVsZW1lbnRcIikscHJldmlvdXNFbGVtZW50U2libGluZzpKKFwicHJldmlvdXNFbGVtZW50U2libGluZ1wiKSxuZXh0RWxlbWVudFNpYmxpbmc6SihcIm5leHRFbGVtZW50U2libGluZ1wiKSxpbm5lckhUTUw6SihcImlubmVySFRNTFwiKSx0ZXh0Q29udGVudDpKKFwidGV4dENvbnRlbnRcIiksZmlyc3RFbGVtZW50Q2hpbGQ6SihcImZpcnN0RWxlbWVudENoaWxkXCIpLGxhc3RFbGVtZW50Q2hpbGQ6SihcImxhc3RFbGVtZW50Q2hpbGRcIiksY2hpbGRyZW46SihcImNoaWxkcmVuXCIpfTp7fSxqYz1oYz97Zmlyc3RFbGVtZW50Q2hpbGQ6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSxcblwiZmlyc3RFbGVtZW50Q2hpbGRcIiksbGFzdEVsZW1lbnRDaGlsZDpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLFwibGFzdEVsZW1lbnRDaGlsZFwiKSxjaGlsZHJlbjpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLFwiY2hpbGRyZW5cIil9Ont9LGtjPWhjP3tmaXJzdEVsZW1lbnRDaGlsZDpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKERvY3VtZW50LnByb3RvdHlwZSxcImZpcnN0RWxlbWVudENoaWxkXCIpLGxhc3RFbGVtZW50Q2hpbGQ6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihEb2N1bWVudC5wcm90b3R5cGUsXCJsYXN0RWxlbWVudENoaWxkXCIpLGNoaWxkcmVuOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRG9jdW1lbnQucHJvdG90eXBlLFwiY2hpbGRyZW5cIil9Ont9LGxjPXtFYTpLLHliOmpjLHNiOmtjLHBhcmVudE5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIEsucGFyZW50Tm9kZS5nZXQuY2FsbChhKX0sXG5maXJzdENoaWxkOmZ1bmN0aW9uKGEpe3JldHVybiBLLmZpcnN0Q2hpbGQuZ2V0LmNhbGwoYSl9LGxhc3RDaGlsZDpmdW5jdGlvbihhKXtyZXR1cm4gSy5sYXN0Q2hpbGQuZ2V0LmNhbGwoYSl9LHByZXZpb3VzU2libGluZzpmdW5jdGlvbihhKXtyZXR1cm4gSy5wcmV2aW91c1NpYmxpbmcuZ2V0LmNhbGwoYSl9LG5leHRTaWJsaW5nOmZ1bmN0aW9uKGEpe3JldHVybiBLLm5leHRTaWJsaW5nLmdldC5jYWxsKGEpfSxjaGlsZE5vZGVzOmZ1bmN0aW9uKGEpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChLLmNoaWxkTm9kZXMuZ2V0LmNhbGwoYSkpfSxwYXJlbnRFbGVtZW50OmZ1bmN0aW9uKGEpe3JldHVybiBLLnBhcmVudEVsZW1lbnQuZ2V0LmNhbGwoYSl9LHByZXZpb3VzRWxlbWVudFNpYmxpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuIEsucHJldmlvdXNFbGVtZW50U2libGluZy5nZXQuY2FsbChhKX0sbmV4dEVsZW1lbnRTaWJsaW5nOmZ1bmN0aW9uKGEpe3JldHVybiBLLm5leHRFbGVtZW50U2libGluZy5nZXQuY2FsbChhKX0sXG5pbm5lckhUTUw6ZnVuY3Rpb24oYSl7cmV0dXJuIEsuaW5uZXJIVE1MLmdldC5jYWxsKGEpfSx0ZXh0Q29udGVudDpmdW5jdGlvbihhKXtyZXR1cm4gSy50ZXh0Q29udGVudC5nZXQuY2FsbChhKX0sY2hpbGRyZW46ZnVuY3Rpb24oYSl7c3dpdGNoKGEubm9kZVR5cGUpe2Nhc2UgTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOnJldHVybiBqYy5jaGlsZHJlbi5nZXQuY2FsbChhKTtjYXNlIE5vZGUuRE9DVU1FTlRfTk9ERTpyZXR1cm4ga2MuY2hpbGRyZW4uZ2V0LmNhbGwoYSk7ZGVmYXVsdDpyZXR1cm4gSy5jaGlsZHJlbi5nZXQuY2FsbChhKX19LGZpcnN0RWxlbWVudENoaWxkOmZ1bmN0aW9uKGEpe3N3aXRjaChhLm5vZGVUeXBlKXtjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpyZXR1cm4gamMuZmlyc3RFbGVtZW50Q2hpbGQuZ2V0LmNhbGwoYSk7Y2FzZSBOb2RlLkRPQ1VNRU5UX05PREU6cmV0dXJuIGtjLmZpcnN0RWxlbWVudENoaWxkLmdldC5jYWxsKGEpO2RlZmF1bHQ6cmV0dXJuIEsuZmlyc3RFbGVtZW50Q2hpbGQuZ2V0LmNhbGwoYSl9fSxcbmxhc3RFbGVtZW50Q2hpbGQ6ZnVuY3Rpb24oYSl7c3dpdGNoKGEubm9kZVR5cGUpe2Nhc2UgTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOnJldHVybiBqYy5sYXN0RWxlbWVudENoaWxkLmdldC5jYWxsKGEpO2Nhc2UgTm9kZS5ET0NVTUVOVF9OT0RFOnJldHVybiBrYy5sYXN0RWxlbWVudENoaWxkLmdldC5jYWxsKGEpO2RlZmF1bHQ6cmV0dXJuIEsubGFzdEVsZW1lbnRDaGlsZC5nZXQuY2FsbChhKX19fTt2YXIgTD16LkhhP2xjOkk7ZnVuY3Rpb24gbWMoYSl7Zm9yKDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKX1cbnZhciBuYz16Lkssb2M9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiaW5lcnRcIikscGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSxcImlzQ29ubmVjdGVkXCIpLHFjPXBjJiZwYy5nZXQscmM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihEb2N1bWVudC5wcm90b3R5cGUsXCJhY3RpdmVFbGVtZW50XCIpLHNjPXtwYXJlbnRFbGVtZW50OntnZXQ6ZnVuY3Rpb24oKXt2YXIgYT15KHRoaXMpOyhhPWEmJmEucGFyZW50Tm9kZSkmJmEubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERSYmKGE9bnVsbCk7cmV0dXJuIHZvaWQgMCE9PWE/YTpMLnBhcmVudEVsZW1lbnQodGhpcyl9LGNvbmZpZ3VyYWJsZTohMH0scGFyZW50Tm9kZTp7Z2V0OmZ1bmN0aW9uKCl7dmFyIGE9eSh0aGlzKTthPWEmJmEucGFyZW50Tm9kZTtyZXR1cm4gdm9pZCAwIT09YT9hOkwucGFyZW50Tm9kZSh0aGlzKX0sY29uZmlndXJhYmxlOiEwfSxcbm5leHRTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXt2YXIgYT15KHRoaXMpO2E9YSYmYS5uZXh0U2libGluZztyZXR1cm4gdm9pZCAwIT09YT9hOkwubmV4dFNpYmxpbmcodGhpcyl9LGNvbmZpZ3VyYWJsZTohMH0scHJldmlvdXNTaWJsaW5nOntnZXQ6ZnVuY3Rpb24oKXt2YXIgYT15KHRoaXMpO2E9YSYmYS5wcmV2aW91c1NpYmxpbmc7cmV0dXJuIHZvaWQgMCE9PWE/YTpMLnByZXZpb3VzU2libGluZyh0aGlzKX0sY29uZmlndXJhYmxlOiEwfSxuZXh0RWxlbWVudFNpYmxpbmc6e2dldDpmdW5jdGlvbigpe3ZhciBhPXkodGhpcyk7aWYoYSYmdm9pZCAwIT09YS5uZXh0U2libGluZyl7Zm9yKGE9dGhpcy5uZXh0U2libGluZzthJiZhLm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1yZXR1cm4gTC5uZXh0RWxlbWVudFNpYmxpbmcodGhpcyl9LGNvbmZpZ3VyYWJsZTohMH0scHJldmlvdXNFbGVtZW50U2libGluZzp7Z2V0OmZ1bmN0aW9uKCl7dmFyIGE9XG55KHRoaXMpO2lmKGEmJnZvaWQgMCE9PWEucHJldmlvdXNTaWJsaW5nKXtmb3IoYT10aGlzLnByZXZpb3VzU2libGluZzthJiZhLm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREU7KWE9YS5wcmV2aW91c1NpYmxpbmc7cmV0dXJuIGF9cmV0dXJuIEwucHJldmlvdXNFbGVtZW50U2libGluZyh0aGlzKX0sY29uZmlndXJhYmxlOiEwfX0sdGM9e2NsYXNzTmFtZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCJ9LHNldDpmdW5jdGlvbihhKXt0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsYSl9LGNvbmZpZ3VyYWJsZTohMH19LHVjPXtjaGlsZE5vZGVzOntnZXQ6ZnVuY3Rpb24oKXtpZihnYih0aGlzKSl7dmFyIGE9eSh0aGlzKTtpZighYS5jaGlsZE5vZGVzKXthLmNoaWxkTm9kZXM9W107Zm9yKHZhciBiPXRoaXMuZmlyc3RDaGlsZDtiO2I9Yi5uZXh0U2libGluZylhLmNoaWxkTm9kZXMucHVzaChiKX12YXIgYz1hLmNoaWxkTm9kZXN9ZWxzZSBjPVxuTC5jaGlsZE5vZGVzKHRoaXMpO2MuaXRlbT1mdW5jdGlvbihhKXtyZXR1cm4gY1thXX07cmV0dXJuIGN9LGNvbmZpZ3VyYWJsZTohMH0sY2hpbGRFbGVtZW50Q291bnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aH0sY29uZmlndXJhYmxlOiEwfSxmaXJzdENoaWxkOntnZXQ6ZnVuY3Rpb24oKXt2YXIgYT15KHRoaXMpO2E9YSYmYS5maXJzdENoaWxkO3JldHVybiB2b2lkIDAhPT1hP2E6TC5maXJzdENoaWxkKHRoaXMpfSxjb25maWd1cmFibGU6ITB9LGxhc3RDaGlsZDp7Z2V0OmZ1bmN0aW9uKCl7dmFyIGE9eSh0aGlzKTthPWEmJmEubGFzdENoaWxkO3JldHVybiB2b2lkIDAhPT1hP2E6TC5sYXN0Q2hpbGQodGhpcyl9LGNvbmZpZ3VyYWJsZTohMH0sdGV4dENvbnRlbnQ6e2dldDpmdW5jdGlvbigpe2lmKGdiKHRoaXMpKXtmb3IodmFyIGE9W10sYj0wLGM9dGhpcy5jaGlsZE5vZGVzLGQ7ZD1jW2JdO2IrKylkLm5vZGVUeXBlIT09Tm9kZS5DT01NRU5UX05PREUmJlxuYS5wdXNoKGQudGV4dENvbnRlbnQpO3JldHVybiBhLmpvaW4oXCJcIil9cmV0dXJuIEwudGV4dENvbnRlbnQodGhpcyl9LHNldDpmdW5jdGlvbihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGF8fG51bGw9PT1hKWE9XCJcIjtzd2l0Y2godGhpcy5ub2RlVHlwZSl7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTppZighZ2IodGhpcykmJm5jKXt2YXIgYj10aGlzLmZpcnN0Q2hpbGQ7KGIhPXRoaXMubGFzdENoaWxkfHxiJiZiLm5vZGVUeXBlIT1Ob2RlLlRFWFRfTk9ERSkmJm1jKHRoaXMpO2xjLkVhLnRleHRDb250ZW50LnNldC5jYWxsKHRoaXMsYSl9ZWxzZSBtYyh0aGlzKSwoMDxhLmxlbmd0aHx8dGhpcy5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFKSYmdGhpcy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhKSk7YnJlYWs7ZGVmYXVsdDp0aGlzLm5vZGVWYWx1ZT1hfX0sY29uZmlndXJhYmxlOiEwfSxmaXJzdEVsZW1lbnRDaGlsZDp7Z2V0OmZ1bmN0aW9uKCl7dmFyIGE9XG55KHRoaXMpO2lmKGEmJnZvaWQgMCE9PWEuZmlyc3RDaGlsZCl7Zm9yKGE9dGhpcy5maXJzdENoaWxkO2EmJmEubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfXJldHVybiBMLmZpcnN0RWxlbWVudENoaWxkKHRoaXMpfSxjb25maWd1cmFibGU6ITB9LGxhc3RFbGVtZW50Q2hpbGQ6e2dldDpmdW5jdGlvbigpe3ZhciBhPXkodGhpcyk7aWYoYSYmdm9pZCAwIT09YS5sYXN0Q2hpbGQpe2ZvcihhPXRoaXMubGFzdENoaWxkO2EmJmEubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERTspYT1hLnByZXZpb3VzU2libGluZztyZXR1cm4gYX1yZXR1cm4gTC5sYXN0RWxlbWVudENoaWxkKHRoaXMpfSxjb25maWd1cmFibGU6ITB9LGNoaWxkcmVuOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ2IodGhpcyk/d2IoQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHRoaXMuY2hpbGROb2RlcyxmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFfSkpOlxuTC5jaGlsZHJlbih0aGlzKX0sY29uZmlndXJhYmxlOiEwfSxpbm5lckhUTUw6e2dldDpmdW5jdGlvbigpe3JldHVybiBnYih0aGlzKT9mYyhcInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZT90aGlzLmNvbnRlbnQ6dGhpcyk6TC5pbm5lckhUTUwodGhpcyl9LHNldDpmdW5jdGlvbihhKXt2YXIgYj1cInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZT90aGlzLmNvbnRlbnQ6dGhpczttYyhiKTt2YXIgYz10aGlzLmxvY2FsTmFtZXx8XCJkaXZcIjtjPXRoaXMubmFtZXNwYWNlVVJJJiZ0aGlzLm5hbWVzcGFjZVVSSSE9PW9jLm5hbWVzcGFjZVVSST9vYy5jcmVhdGVFbGVtZW50TlModGhpcy5uYW1lc3BhY2VVUkksYyk6b2MuY3JlYXRlRWxlbWVudChjKTtuYz9sYy5FYS5pbm5lckhUTUwuc2V0LmNhbGwoYyxhKTpjLmlubmVySFRNTD1hO2ZvcihhPVwidGVtcGxhdGVcIj09PXRoaXMubG9jYWxOYW1lP2MuY29udGVudDpjO2EuZmlyc3RDaGlsZDspYi5hcHBlbmRDaGlsZChhLmZpcnN0Q2hpbGQpfSxcbmNvbmZpZ3VyYWJsZTohMH19LHZjPXtzaGFkb3dSb290OntnZXQ6ZnVuY3Rpb24oKXt2YXIgYT15KHRoaXMpO3JldHVybiBhJiZhLkZhfHxudWxsfSxjb25maWd1cmFibGU6ITB9fSx3Yz17YWN0aXZlRWxlbWVudDp7Z2V0OmZ1bmN0aW9uKCl7dmFyIGE9cmMmJnJjLmdldD9yYy5nZXQuY2FsbChkb2N1bWVudCk6ei5LP3ZvaWQgMDpkb2N1bWVudC5hY3RpdmVFbGVtZW50O2lmKGEmJmEubm9kZVR5cGUpe3ZhciBiPSEhQyh0aGlzKTtpZih0aGlzPT09ZG9jdW1lbnR8fGImJnRoaXMuaG9zdCE9PWEmJkUuY29udGFpbnMuY2FsbCh0aGlzLmhvc3QsYSkpe2ZvcihiPWhiKGEpO2ImJmIhPT10aGlzOylhPWIuaG9zdCxiPWhiKGEpO2E9dGhpcz09PWRvY3VtZW50P2I/bnVsbDphOmI9PT10aGlzP2E6bnVsbH1lbHNlIGE9bnVsbH1lbHNlIGE9bnVsbDtyZXR1cm4gYX0sc2V0OmZ1bmN0aW9uKCl7fSxjb25maWd1cmFibGU6ITB9fTtcbmZ1bmN0aW9uIE0oYSxiLGMpe2Zvcih2YXIgZCBpbiBiKXt2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEsZCk7ZSYmZS5jb25maWd1cmFibGV8fCFlJiZjP09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGQsYltkXSk6YyYmY29uc29sZS53YXJuKFwiQ291bGQgbm90IGRlZmluZVwiLGQsXCJvblwiLGEpfX1mdW5jdGlvbiB4YyhhKXtNKGEsc2MpO00oYSx0Yyk7TShhLHVjKTtNKGEsd2MpfVxuZnVuY3Rpb24geWMoKXt2YXIgYT16Yy5wcm90b3R5cGU7YS5fX3Byb3RvX189RG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGU7TShhLHNjLCEwKTtNKGEsdWMsITApO00oYSx3YywhMCk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYSx7bm9kZVR5cGU6e3ZhbHVlOk5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSxjb25maWd1cmFibGU6ITB9LG5vZGVOYW1lOnt2YWx1ZTpcIiNkb2N1bWVudC1mcmFnbWVudFwiLGNvbmZpZ3VyYWJsZTohMH0sbm9kZVZhbHVlOnt2YWx1ZTpudWxsLGNvbmZpZ3VyYWJsZTohMH19KTtbXCJsb2NhbE5hbWVcIixcIm5hbWVzcGFjZVVSSVwiLFwicHJlZml4XCJdLmZvckVhY2goZnVuY3Rpb24oYil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7dmFsdWU6dm9pZCAwLGNvbmZpZ3VyYWJsZTohMH0pfSk7W1wib3duZXJEb2N1bWVudFwiLFwiYmFzZVVSSVwiLFwiaXNDb25uZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ob3N0W2JdfSxcbmNvbmZpZ3VyYWJsZTohMH0pfSl9dmFyIEFjPXouSz9mdW5jdGlvbigpe306ZnVuY3Rpb24oYSl7dmFyIGI9eChhKTtiLnlhfHwoYi55YT0hMCxNKGEsc2MsITApLE0oYSx0YywhMCkpfSxCYz16Lks/ZnVuY3Rpb24oKXt9OmZ1bmN0aW9uKGEpe3goYSkuSmF8fChNKGEsdWMsITApLE0oYSx2YywhMCkpfTt2YXIgQ2M9TC5jaGlsZE5vZGVzO2Z1bmN0aW9uIERjKGEsYixjKXtBYyhhKTtjPWN8fG51bGw7dmFyIGQ9eChhKSxlPXgoYiksZj1jP3goYyk6bnVsbDtkLnByZXZpb3VzU2libGluZz1jP2YucHJldmlvdXNTaWJsaW5nOmIubGFzdENoaWxkO2lmKGY9eShkLnByZXZpb3VzU2libGluZykpZi5uZXh0U2libGluZz1hO2lmKGY9eShkLm5leHRTaWJsaW5nPWMpKWYucHJldmlvdXNTaWJsaW5nPWE7ZC5wYXJlbnROb2RlPWI7Yz9jPT09ZS5maXJzdENoaWxkJiYoZS5maXJzdENoaWxkPWEpOihlLmxhc3RDaGlsZD1hLGUuZmlyc3RDaGlsZHx8KGUuZmlyc3RDaGlsZD1hKSk7ZS5jaGlsZE5vZGVzPW51bGx9XG5mdW5jdGlvbiBIYyhhKXt2YXIgYj14KGEpO2lmKHZvaWQgMD09PWIuZmlyc3RDaGlsZCl7Yi5jaGlsZE5vZGVzPW51bGw7dmFyIGM9Q2MoYSk7Yi5maXJzdENoaWxkPWNbMF18fG51bGw7Yi5sYXN0Q2hpbGQ9Y1tjLmxlbmd0aC0xXXx8bnVsbDtCYyhhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdLGU9eChkKTtlLnBhcmVudE5vZGU9YTtlLm5leHRTaWJsaW5nPWNbYisxXXx8bnVsbDtlLnByZXZpb3VzU2libGluZz1jW2ItMV18fG51bGw7QWMoZCl9fX07dmFyIEljPUwucGFyZW50Tm9kZTtcbmZ1bmN0aW9uIEpjKGEsYixjKXtpZihiPT09YSl0aHJvdyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdhcHBlbmRDaGlsZCcgb24gJ05vZGUnOiBUaGUgbmV3IGNoaWxkIGVsZW1lbnQgY29udGFpbnMgdGhlIHBhcmVudC5cIik7aWYoYyl7dmFyIGQ9eShjKTtkPWQmJmQucGFyZW50Tm9kZTtpZih2b2lkIDAhPT1kJiZkIT09YXx8dm9pZCAwPT09ZCYmSWMoYykhPT1hKXRocm93IEVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ2luc2VydEJlZm9yZScgb24gJ05vZGUnOiBUaGUgbm9kZSBiZWZvcmUgd2hpY2ggdGhlIG5ldyBub2RlIGlzIHRvIGJlIGluc2VydGVkIGlzIG5vdCBhIGNoaWxkIG9mIHRoaXMgbm9kZS5cIik7fWlmKGM9PT1iKXJldHVybiBiO2IucGFyZW50Tm9kZSYmS2MoYi5wYXJlbnROb2RlLGIpO3ZhciBlLGY7aWYoIWIuX19ub0luc2VydGlvblBvaW50KXtpZihmPWU9aGIoYSkpe3ZhciBnO1wic2xvdFwiPT09Yi5sb2NhbE5hbWU/Zz1bYl06Yi5xdWVyeVNlbGVjdG9yQWxsJiZcbihnPWIucXVlcnlTZWxlY3RvckFsbChcInNsb3RcIikpO2Y9ZyYmZy5sZW5ndGg/Zzp2b2lkIDB9ZiYmKGc9ZSxkPWYsZy5hPWcuYXx8W10sZy5tPWcubXx8W10sZy52PWcudnx8e30sZy5hLnB1c2guYXBwbHkoZy5hLGQgaW5zdGFuY2VvZiBBcnJheT9kOkFhKGphKGQpKSkpfShcInNsb3RcIj09PWEubG9jYWxOYW1lfHxmKSYmKGU9ZXx8aGIoYSkpJiZMYyhlKTtpZihnYihhKSl7ZT1jO0JjKGEpO2Y9eChhKTt2b2lkIDAhPT1mLmZpcnN0Q2hpbGQmJihmLmNoaWxkTm9kZXM9bnVsbCk7aWYoYi5ub2RlVHlwZT09PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7Zj1iLmNoaWxkTm9kZXM7Zm9yKGc9MDtnPGYubGVuZ3RoO2crKylEYyhmW2ddLGEsZSk7ZT14KGIpO2Y9dm9pZCAwIT09ZS5maXJzdENoaWxkP251bGw6dm9pZCAwO2UuZmlyc3RDaGlsZD1lLmxhc3RDaGlsZD1mO2UuY2hpbGROb2Rlcz1mfWVsc2UgRGMoYixhLGUpO2U9eShhKTtpZihNYyhhKSl7TGMoZS5yb290KTt2YXIgaD1cbiEwfWVsc2UgZS5yb290JiYoaD0hMCl9aHx8KGg9QyhhKT9hLmhvc3Q6YSxjPyhjPU5jKGMpLEUuaW5zZXJ0QmVmb3JlLmNhbGwoaCxiLGMpKTpFLmFwcGVuZENoaWxkLmNhbGwoaCxiKSk7T2MoYSxiKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEtjKGEsYil7aWYoYi5wYXJlbnROb2RlIT09YSl0aHJvdyBFcnJvcihcIlRoZSBub2RlIHRvIGJlIHJlbW92ZWQgaXMgbm90IGEgY2hpbGQgb2YgdGhpcyBub2RlOiBcIitiKTt2YXIgYz1oYihiKSxkPXkoYSk7aWYoZ2IoYSkpe3ZhciBlPXgoYiksZj14KGEpO2I9PT1mLmZpcnN0Q2hpbGQmJihmLmZpcnN0Q2hpbGQ9ZS5uZXh0U2libGluZyk7Yj09PWYubGFzdENoaWxkJiYoZi5sYXN0Q2hpbGQ9ZS5wcmV2aW91c1NpYmxpbmcpO3ZhciBnPWUucHJldmlvdXNTaWJsaW5nLGg9ZS5uZXh0U2libGluZztnJiYoeChnKS5uZXh0U2libGluZz1oKTtoJiYoeChoKS5wcmV2aW91c1NpYmxpbmc9Zyk7ZS5wYXJlbnROb2RlPWUucHJldmlvdXNTaWJsaW5nPWUubmV4dFNpYmxpbmc9dm9pZCAwO3ZvaWQgMCE9PWYuY2hpbGROb2RlcyYmKGYuY2hpbGROb2Rlcz1udWxsKTtpZihNYyhhKSl7TGMoZC5yb290KTt2YXIgaz0hMH19UGMoYik7aWYoYyl7KGU9YSYmXCJzbG90XCI9PT1hLmxvY2FsTmFtZSkmJlxuKGs9ITApO2lmKGMubSl7UWMoYyk7Zj1jLnY7Zm9yKEEgaW4gZilmb3IoZz1mW0FdLGg9MDtoPGcubGVuZ3RoO2grKyl7dmFyIG09Z1toXTtpZih2YihiLG0pKXtnLnNwbGljZShoLDEpO3ZhciBuPWMubS5pbmRleE9mKG0pOzA8PW4mJmMubS5zcGxpY2UobiwxKTtoLS07bj15KG0pO2lmKG09bi5OKWZvcih2YXIgcD0wO3A8bS5sZW5ndGg7cCsrKXt2YXIgRz1tW3BdLEI9UmMoRyk7QiYmRS5yZW1vdmVDaGlsZC5jYWxsKEIsRyl9bi5OPVtdO24uYXNzaWduZWROb2Rlcz1bXTtuPSEwfX12YXIgQT1ufWVsc2UgQT12b2lkIDA7KEF8fGUpJiZMYyhjKX1rfHwoaz1DKGEpP2EuaG9zdDphLCghZC5yb290JiZcInNsb3RcIiE9PWIubG9jYWxOYW1lfHxrPT09SWMoYikpJiZFLnJlbW92ZUNoaWxkLmNhbGwoayxiKSk7T2MoYSxudWxsLGIpO3JldHVybiBifVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9eShhKTtpZihiJiZ2b2lkIDAhPT1iLlcpe2I9YS5jaGlsZE5vZGVzO2Zvcih2YXIgYz0wLGQ9Yi5sZW5ndGgsZTtjPGQmJihlPWJbY10pO2MrKylQYyhlKX1pZihhPXkoYSkpYS5XPXZvaWQgMH1mdW5jdGlvbiBOYyhhKXt2YXIgYj1hO2EmJlwic2xvdFwiPT09YS5sb2NhbE5hbWUmJihiPShiPShiPXkoYSkpJiZiLk4pJiZiLmxlbmd0aD9iWzBdOk5jKGEubmV4dFNpYmxpbmcpKTtyZXR1cm4gYn1mdW5jdGlvbiBNYyhhKXtyZXR1cm4oYT0oYT15KGEpKSYmYS5yb290KSYmU2MoYSl9XG5mdW5jdGlvbiBUYyhhLGIpe2lmKFwic2xvdFwiPT09YilhPWEucGFyZW50Tm9kZSxNYyhhKSYmTGMoeShhKS5yb290KTtlbHNlIGlmKFwic2xvdFwiPT09YS5sb2NhbE5hbWUmJlwibmFtZVwiPT09YiYmKGI9aGIoYSkpKXtpZihiLm0pe3ZhciBjPWEuTWEsZD1VYyhhKTtpZihkIT09Yyl7Yz1iLnZbY107dmFyIGU9Yy5pbmRleE9mKGEpOzA8PWUmJmMuc3BsaWNlKGUsMSk7Yz1iLnZbZF18fChiLnZbZF09W10pO2MucHVzaChhKTsxPGMubGVuZ3RoJiYoYi52W2RdPVZjKGMpKX19TGMoYil9fWZ1bmN0aW9uIE9jKGEsYixjKXtpZihhPShhPXkoYSkpJiZhLlQpYiYmYS5hZGRlZE5vZGVzLnB1c2goYiksYyYmYS5yZW1vdmVkTm9kZXMucHVzaChjKSxDYihhKX1cbmZ1bmN0aW9uIFdjKGEpe2lmKGEmJmEubm9kZVR5cGUpe3ZhciBiPXgoYSksYz1iLlc7dm9pZCAwPT09YyYmKEMoYSk/KGM9YSxiLlc9Yyk6KGM9KGM9YS5wYXJlbnROb2RlKT9XYyhjKTphLEUuY29udGFpbnMuY2FsbChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYSkmJihiLlc9YykpKTtyZXR1cm4gY319ZnVuY3Rpb24gWGMoYSxiLGMpe3ZhciBkPVtdO1ljKGEuY2hpbGROb2RlcyxiLGMsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gWWMoYSxiLGMsZCl7Zm9yKHZhciBlPTAsZj1hLmxlbmd0aCxnO2U8ZiYmKGc9YVtlXSk7ZSsrKXt2YXIgaDtpZihoPWcubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSl7aD1nO3ZhciBrPWIsbT1jLG49ZCxwPWsoaCk7cCYmbi5wdXNoKGgpO20mJm0ocCk/aD1wOihZYyhoLmNoaWxkTm9kZXMsayxtLG4pLGg9dm9pZCAwKX1pZihoKWJyZWFrfX12YXIgWmM9bnVsbDtcbmZ1bmN0aW9uICRjKGEsYixjKXtaY3x8KFpjPXdpbmRvdy5TaGFkeUNTUyYmd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltKTtaYyYmXCJjbGFzc1wiPT09Yj9aYy5zZXRFbGVtZW50Q2xhc3MoYSxjKTooRS5zZXRBdHRyaWJ1dGUuY2FsbChhLGIsYyksVGMoYSxiKSl9ZnVuY3Rpb24gYWQoYSxiKXtpZihhLm93bmVyRG9jdW1lbnQhPT1kb2N1bWVudHx8XCJ0ZW1wbGF0ZVwiPT09YS5sb2NhbE5hbWUpcmV0dXJuIEUuaW1wb3J0Tm9kZS5jYWxsKGRvY3VtZW50LGEsYik7dmFyIGM9RS5pbXBvcnROb2RlLmNhbGwoZG9jdW1lbnQsYSwhMSk7aWYoYil7YT1hLmNoaWxkTm9kZXM7Yj0wO2Zvcih2YXIgZDtiPGEubGVuZ3RoO2IrKylkPWFkKGFbYl0sITApLGMuYXBwZW5kQ2hpbGQoZCl9cmV0dXJuIGN9O3ZhciBiZD1cIl9fZXZlbnRXcmFwcGVyc1wiK0RhdGUubm93KCksY2Q9ZnVuY3Rpb24oKXt2YXIgYT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV2ZW50LnByb3RvdHlwZSxcImNvbXBvc2VkXCIpO3JldHVybiBhP2Z1bmN0aW9uKGIpe3JldHVybiBhLmdldC5jYWxsKGIpfTpudWxsfSgpLGRkPXtibHVyOiEwLGZvY3VzOiEwLGZvY3VzaW46ITAsZm9jdXNvdXQ6ITAsY2xpY2s6ITAsZGJsY2xpY2s6ITAsbW91c2Vkb3duOiEwLG1vdXNlZW50ZXI6ITAsbW91c2VsZWF2ZTohMCxtb3VzZW1vdmU6ITAsbW91c2VvdXQ6ITAsbW91c2VvdmVyOiEwLG1vdXNldXA6ITAsd2hlZWw6ITAsYmVmb3JlaW5wdXQ6ITAsaW5wdXQ6ITAsa2V5ZG93bjohMCxrZXl1cDohMCxjb21wb3NpdGlvbnN0YXJ0OiEwLGNvbXBvc2l0aW9udXBkYXRlOiEwLGNvbXBvc2l0aW9uZW5kOiEwLHRvdWNoc3RhcnQ6ITAsdG91Y2hlbmQ6ITAsdG91Y2htb3ZlOiEwLHRvdWNoY2FuY2VsOiEwLHBvaW50ZXJvdmVyOiEwLFxucG9pbnRlcmVudGVyOiEwLHBvaW50ZXJkb3duOiEwLHBvaW50ZXJtb3ZlOiEwLHBvaW50ZXJ1cDohMCxwb2ludGVyY2FuY2VsOiEwLHBvaW50ZXJvdXQ6ITAscG9pbnRlcmxlYXZlOiEwLGdvdHBvaW50ZXJjYXB0dXJlOiEwLGxvc3Rwb2ludGVyY2FwdHVyZTohMCxkcmFnc3RhcnQ6ITAsZHJhZzohMCxkcmFnZW50ZXI6ITAsZHJhZ2xlYXZlOiEwLGRyYWdvdmVyOiEwLGRyb3A6ITAsZHJhZ2VuZDohMCxET01BY3RpdmF0ZTohMCxET01Gb2N1c0luOiEwLERPTUZvY3VzT3V0OiEwLGtleXByZXNzOiEwfSxlZD17RE9NQXR0ck1vZGlmaWVkOiEwLERPTUF0dHJpYnV0ZU5hbWVDaGFuZ2VkOiEwLERPTUNoYXJhY3RlckRhdGFNb2RpZmllZDohMCxET01FbGVtZW50TmFtZUNoYW5nZWQ6ITAsRE9NTm9kZUluc2VydGVkOiEwLERPTU5vZGVJbnNlcnRlZEludG9Eb2N1bWVudDohMCxET01Ob2RlUmVtb3ZlZDohMCxET01Ob2RlUmVtb3ZlZEZyb21Eb2N1bWVudDohMCxET01TdWJ0cmVlTW9kaWZpZWQ6ITB9O1xuZnVuY3Rpb24gZmQoYSxiKXt2YXIgYz1bXSxkPWE7Zm9yKGE9YT09PXdpbmRvdz93aW5kb3c6YS5nZXRSb290Tm9kZSgpO2Q7KWMucHVzaChkKSxkPWQuYXNzaWduZWRTbG90P2QuYXNzaWduZWRTbG90OmQubm9kZVR5cGU9PT1Ob2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUmJmQuaG9zdCYmKGJ8fGQhPT1hKT9kLmhvc3Q6ZC5wYXJlbnROb2RlO2NbYy5sZW5ndGgtMV09PT1kb2N1bWVudCYmYy5wdXNoKHdpbmRvdyk7cmV0dXJuIGN9ZnVuY3Rpb24gZ2QoYSxiKXtpZighQylyZXR1cm4gYTthPWZkKGEsITApO2Zvcih2YXIgYz0wLGQsZSxmLGc7YzxiLmxlbmd0aDtjKyspaWYoZD1iW2NdLGY9ZD09PXdpbmRvdz93aW5kb3c6ZC5nZXRSb290Tm9kZSgpLGYhPT1lJiYoZz1hLmluZGV4T2YoZiksZT1mKSwhQyhmKXx8LTE8ZylyZXR1cm4gZH1cbnZhciBoZD17Z2V0IGNvbXBvc2VkKCl7dm9pZCAwPT09dGhpcy5aJiYoY2Q/dGhpcy5aPWNkKHRoaXMpOiExIT09dGhpcy5pc1RydXN0ZWQmJih0aGlzLlo9ZGRbdGhpcy50eXBlXSkpO3JldHVybiB0aGlzLlp8fCExfSxjb21wb3NlZFBhdGg6ZnVuY3Rpb24oKXt0aGlzLndhfHwodGhpcy53YT1mZCh0aGlzLl9fdGFyZ2V0LHRoaXMuY29tcG9zZWQpKTtyZXR1cm4gdGhpcy53YX0sZ2V0IHRhcmdldCgpe3JldHVybiBnZCh0aGlzLmN1cnJlbnRUYXJnZXQsdGhpcy5jb21wb3NlZFBhdGgoKSl9LGdldCByZWxhdGVkVGFyZ2V0KCl7aWYoIXRoaXMua2EpcmV0dXJuIG51bGw7dGhpcy56YXx8KHRoaXMuemE9ZmQodGhpcy5rYSwhMCkpO3JldHVybiBnZCh0aGlzLmN1cnJlbnRUYXJnZXQsdGhpcy56YSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe0V2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24uY2FsbCh0aGlzKTt0aGlzLmphPSEwfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXtFdmVudC5wcm90b3R5cGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwodGhpcyk7XG50aGlzLmphPXRoaXMuSWE9ITB9fTtmdW5jdGlvbiBpZChhKXtmdW5jdGlvbiBiKGIsZCl7Yj1uZXcgYShiLGQpO2IuWj1kJiYhIWQuY29tcG9zZWQ7cmV0dXJuIGJ9bWIoYixhKTtiLnByb3RvdHlwZT1hLnByb3RvdHlwZTtyZXR1cm4gYn12YXIgamQ9e2ZvY3VzOiEwLGJsdXI6ITB9O2Z1bmN0aW9uIGtkKGEpe3JldHVybiBhLl9fdGFyZ2V0IT09YS50YXJnZXR8fGEua2EhPT1hLnJlbGF0ZWRUYXJnZXR9ZnVuY3Rpb24gbGQoYSxiLGMpe2lmKGM9Yi5fX2hhbmRsZXJzJiZiLl9faGFuZGxlcnNbYS50eXBlXSYmYi5fX2hhbmRsZXJzW2EudHlwZV1bY10pZm9yKHZhciBkPTAsZTsoZT1jW2RdKSYmKCFrZChhKXx8YS50YXJnZXQhPT1hLnJlbGF0ZWRUYXJnZXQpJiYoZS5jYWxsKGIsYSksIWEuSWEpO2QrKyk7fVxuZnVuY3Rpb24gbWQoYSl7dmFyIGI9YS5jb21wb3NlZFBhdGgoKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcImN1cnJlbnRUYXJnZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LGNvbmZpZ3VyYWJsZTohMH0pO2Zvcih2YXIgYz1iLmxlbmd0aC0xOzA8PWM7Yy0tKXt2YXIgZD1iW2NdO2xkKGEsZCxcImNhcHR1cmVcIik7aWYoYS5qYSlyZXR1cm59T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJldmVudFBoYXNlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBFdmVudC5BVF9UQVJHRVR9fSk7dmFyIGU7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKyl7ZD1iW2NdO3ZhciBmPXkoZCk7Zj1mJiZmLnJvb3Q7aWYoMD09PWN8fGYmJmY9PT1lKWlmKGxkKGEsZCxcImJ1YmJsZVwiKSxkIT09d2luZG93JiYoZT1kLmdldFJvb3ROb2RlKCkpLGEuamEpYnJlYWt9fVxuZnVuY3Rpb24gbmQoYSxiLGMsZCxlLGYpe2Zvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXt2YXIgaD1hW2ddLGs9aC50eXBlLG09aC5jYXB0dXJlLG49aC5vbmNlLHA9aC5wYXNzaXZlO2lmKGI9PT1oLm5vZGUmJmM9PT1rJiZkPT09bSYmZT09PW4mJmY9PT1wKXJldHVybiBnfXJldHVybi0xfVxuZnVuY3Rpb24gb2QoYSxiLGMpe2lmKGIpe3ZhciBkPXR5cGVvZiBiO2lmKFwiZnVuY3Rpb25cIj09PWR8fFwib2JqZWN0XCI9PT1kKWlmKFwib2JqZWN0XCIhPT1kfHxiLmhhbmRsZUV2ZW50JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5oYW5kbGVFdmVudCl7dmFyIGU9dGhpcyBpbnN0YW5jZW9mIFdpbmRvdz9FLmxiOkUuYWRkRXZlbnRMaXN0ZW5lcjtpZihlZFthXSlyZXR1cm4gZS5jYWxsKHRoaXMsYSxiLGMpO2lmKGMmJlwib2JqZWN0XCI9PT10eXBlb2YgYyl7dmFyIGY9ISFjLmNhcHR1cmU7dmFyIGc9ISFjLm9uY2U7dmFyIGg9ISFjLnBhc3NpdmV9ZWxzZSBmPSEhYyxoPWc9ITE7dmFyIGs9YyYmYy5tYXx8dGhpcyxtPWJbYmRdO2lmKG0pe2lmKC0xPG5kKG0sayxhLGYsZyxoKSlyZXR1cm59ZWxzZSBiW2JkXT1bXTttPWZ1bmN0aW9uKGUpe2cmJnRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGIsYyk7ZS5fX3RhcmdldHx8cGQoZSk7aWYoayE9PXRoaXMpe3ZhciBmPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxcblwiY3VycmVudFRhcmdldFwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImN1cnJlbnRUYXJnZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LGNvbmZpZ3VyYWJsZTohMH0pfWlmKCFDKGspfHwtMSE9ZS5jb21wb3NlZFBhdGgoKS5pbmRleE9mKGspKWlmKGUuY29tcG9zZWR8fC0xPGUuY29tcG9zZWRQYXRoKCkuaW5kZXhPZihrKSlpZihrZChlKSYmZS50YXJnZXQ9PT1lLnJlbGF0ZWRUYXJnZXQpZS5ldmVudFBoYXNlPT09RXZlbnQuQlVCQkxJTkdfUEhBU0UmJmUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7ZWxzZSBpZihlLmV2ZW50UGhhc2U9PT1FdmVudC5DQVBUVVJJTkdfUEhBU0V8fGUuYnViYmxlc3x8ZS50YXJnZXQ9PT1rfHxrIGluc3RhbmNlb2YgV2luZG93KXt2YXIgaD1cImZ1bmN0aW9uXCI9PT1kP2IuY2FsbChrLGUpOmIuaGFuZGxlRXZlbnQmJmIuaGFuZGxlRXZlbnQoZSk7ayE9PXRoaXMmJihmPyhPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImN1cnJlbnRUYXJnZXRcIixcbmYpLGY9bnVsbCk6ZGVsZXRlIGUuY3VycmVudFRhcmdldCk7cmV0dXJuIGh9fTtiW2JkXS5wdXNoKHtub2RlOmssdHlwZTphLGNhcHR1cmU6ZixvbmNlOmcscGFzc2l2ZTpoLG5iOm19KTtqZFthXT8odGhpcy5fX2hhbmRsZXJzPXRoaXMuX19oYW5kbGVyc3x8e30sdGhpcy5fX2hhbmRsZXJzW2FdPXRoaXMuX19oYW5kbGVyc1thXXx8e2NhcHR1cmU6W10sYnViYmxlOltdfSx0aGlzLl9faGFuZGxlcnNbYV1bZj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiXS5wdXNoKG0pKTplLmNhbGwodGhpcyxhLG0sYyl9fX1cbmZ1bmN0aW9uIHFkKGEsYixjKXtpZihiKXt2YXIgZD10aGlzIGluc3RhbmNlb2YgV2luZG93P0UubWI6RS5yZW1vdmVFdmVudExpc3RlbmVyO2lmKGVkW2FdKXJldHVybiBkLmNhbGwodGhpcyxhLGIsYyk7aWYoYyYmXCJvYmplY3RcIj09PXR5cGVvZiBjKXt2YXIgZT0hIWMuY2FwdHVyZTt2YXIgZj0hIWMub25jZTt2YXIgZz0hIWMucGFzc2l2ZX1lbHNlIGU9ISFjLGc9Zj0hMTt2YXIgaD1jJiZjLm1hfHx0aGlzLGs9dm9pZCAwO3ZhciBtPW51bGw7dHJ5e209YltiZF19Y2F0Y2gobil7fW0mJihmPW5kKG0saCxhLGUsZixnKSwtMTxmJiYoaz1tLnNwbGljZShmLDEpWzBdLm5iLG0ubGVuZ3RofHwoYltiZF09dm9pZCAwKSkpO2QuY2FsbCh0aGlzLGEsa3x8YixjKTtrJiZqZFthXSYmdGhpcy5fX2hhbmRsZXJzJiZ0aGlzLl9faGFuZGxlcnNbYV0mJihhPXRoaXMuX19oYW5kbGVyc1thXVtlP1wiY2FwdHVyZVwiOlwiYnViYmxlXCJdLGs9YS5pbmRleE9mKGspLC0xPGsmJmEuc3BsaWNlKGssMSkpfX1cbmZ1bmN0aW9uIHJkKCl7Zm9yKHZhciBhIGluIGpkKXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGEsZnVuY3Rpb24oYSl7YS5fX3RhcmdldHx8KHBkKGEpLG1kKGEpKX0sITApfWZ1bmN0aW9uIHBkKGEpe2EuX190YXJnZXQ9YS50YXJnZXQ7YS5rYT1hLnJlbGF0ZWRUYXJnZXQ7aWYoei5LKXt2YXIgYj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoYSk7aWYoIWIuaGFzT3duUHJvcGVydHkoXCJfX3BhdGNoUHJvdG9cIikpe3ZhciBjPU9iamVjdC5jcmVhdGUoYik7Yy5wYj1iO2tiKGMsaGQpO2IuX19wYXRjaFByb3RvPWN9YS5fX3Byb3RvX189Yi5fX3BhdGNoUHJvdG99ZWxzZSBrYihhLGhkKX12YXIgc2Q9aWQod2luZG93LkV2ZW50KSx0ZD1pZCh3aW5kb3cuQ3VzdG9tRXZlbnQpLHVkPWlkKHdpbmRvdy5Nb3VzZUV2ZW50KTtcbmZ1bmN0aW9uIHZkKCl7d2luZG93LkV2ZW50PXNkO3dpbmRvdy5DdXN0b21FdmVudD10ZDt3aW5kb3cuTW91c2VFdmVudD11ZDtyZCgpO2lmKCFjZCYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFdmVudC5wcm90b3R5cGUsXCJpc1RydXN0ZWRcIikpe3ZhciBhPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiLHtidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY29tcG9zZWQ6ITB9KTt0aGlzLmRpc3BhdGNoRXZlbnQoYSl9O0VsZW1lbnQucHJvdG90eXBlLmNsaWNrP0VsZW1lbnQucHJvdG90eXBlLmNsaWNrPWE6SFRNTEVsZW1lbnQucHJvdG90eXBlLmNsaWNrJiYoSFRNTEVsZW1lbnQucHJvdG90eXBlLmNsaWNrPWEpfX07ZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm57aW5kZXg6YSxYOltdLGRhOmJ9fVxuZnVuY3Rpb24geGQoYSxiLGMsZCl7dmFyIGU9MCxmPTAsZz0wLGg9MCxrPU1hdGgubWluKGItZSxkLWYpO2lmKDA9PWUmJjA9PWYpYTp7Zm9yKGc9MDtnPGs7ZysrKWlmKGFbZ10hPT1jW2ddKWJyZWFrIGE7Zz1rfWlmKGI9PWEubGVuZ3RoJiZkPT1jLmxlbmd0aCl7aD1hLmxlbmd0aDtmb3IodmFyIG09Yy5sZW5ndGgsbj0wO248ay1nJiZ5ZChhWy0taF0sY1stLW1dKTspbisrO2g9bn1lKz1nO2YrPWc7Yi09aDtkLT1oO2lmKDA9PWItZSYmMD09ZC1mKXJldHVybltdO2lmKGU9PWIpe2ZvcihiPXdkKGUsMCk7ZjxkOyliLlgucHVzaChjW2YrK10pO3JldHVybltiXX1pZihmPT1kKXJldHVyblt3ZChlLGItZSldO2s9ZTtnPWY7ZD1kLWcrMTtoPWItaysxO2I9QXJyYXkoZCk7Zm9yKG09MDttPGQ7bSsrKWJbbV09QXJyYXkoaCksYlttXVswXT1tO2ZvcihtPTA7bTxoO20rKyliWzBdW21dPW07Zm9yKG09MTttPGQ7bSsrKWZvcihuPTE7bjxoO24rKylpZihhW2srbi0xXT09PWNbZyttLTFdKWJbbV1bbl09XG5iW20tMV1bbi0xXTtlbHNle3ZhciBwPWJbbS0xXVtuXSsxLEc9YlttXVtuLTFdKzE7YlttXVtuXT1wPEc/cDpHfWs9Yi5sZW5ndGgtMTtnPWJbMF0ubGVuZ3RoLTE7ZD1iW2tdW2ddO2ZvcihhPVtdOzA8a3x8MDxnOykwPT1rPyhhLnB1c2goMiksZy0tKTowPT1nPyhhLnB1c2goMyksay0tKTooaD1iW2stMV1bZy0xXSxtPWJbay0xXVtnXSxuPWJba11bZy0xXSxwPW08bj9tPGg/bTpoOm48aD9uOmgscD09aD8oaD09ZD9hLnB1c2goMCk6KGEucHVzaCgxKSxkPWgpLGstLSxnLS0pOnA9PW0/KGEucHVzaCgzKSxrLS0sZD1tKTooYS5wdXNoKDIpLGctLSxkPW4pKTthLnJldmVyc2UoKTtiPXZvaWQgMDtrPVtdO2ZvcihnPTA7ZzxhLmxlbmd0aDtnKyspc3dpdGNoKGFbZ10pe2Nhc2UgMDpiJiYoay5wdXNoKGIpLGI9dm9pZCAwKTtlKys7ZisrO2JyZWFrO2Nhc2UgMTpifHwoYj13ZChlLDApKTtiLmRhKys7ZSsrO2IuWC5wdXNoKGNbZl0pO2YrKzticmVhaztjYXNlIDI6Ynx8KGI9d2QoZSxcbjApKTtiLmRhKys7ZSsrO2JyZWFrO2Nhc2UgMzpifHwoYj13ZChlLDApKSxiLlgucHVzaChjW2ZdKSxmKyt9YiYmay5wdXNoKGIpO3JldHVybiBrfWZ1bmN0aW9uIHlkKGEsYil7cmV0dXJuIGE9PT1ifTt2YXIgUmM9TC5wYXJlbnROb2RlLHpkPUwuY2hpbGROb2RlcyxBZD17fSxCZD16LmRlZmVyQ29ubmVjdGlvbkNhbGxiYWNrcyYmXCJsb2FkaW5nXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlLENkO2Z1bmN0aW9uIERkKGEpe3ZhciBiPVtdO2RvIGIudW5zaGlmdChhKTt3aGlsZShhPWEucGFyZW50Tm9kZSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB6YyhhLGIsYyl7aWYoYSE9PUFkKXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGNvbnN0cnVjdG9yXCIpO3RoaXMuUWE9XCJTaGFkeVJvb3RcIjt0aGlzLmhvc3Q9Yjt0aGlzLmM9YyYmYy5tb2RlO0hjKGIpO2E9eChiKTthLnJvb3Q9dGhpczthLkZhPVwiY2xvc2VkXCIhPT10aGlzLmM/dGhpczpudWxsO2E9eCh0aGlzKTthLmZpcnN0Q2hpbGQ9YS5sYXN0Q2hpbGQ9YS5wYXJlbnROb2RlPWEubmV4dFNpYmxpbmc9YS5wcmV2aW91c1NpYmxpbmc9bnVsbDthLmNoaWxkTm9kZXM9W107dGhpcy5iPXRoaXMuY2E9ITE7dGhpcy5hPXRoaXMudj10aGlzLm09bnVsbDtMYyh0aGlzKX1mdW5jdGlvbiBMYyhhKXthLmNhfHwoYS5jYT0hMCx6YihmdW5jdGlvbigpe3JldHVybiBFZChhKX0pKX1cbmZ1bmN0aW9uIEVkKGEpe2Zvcih2YXIgYjthOyl7YS5jYSYmKGI9YSk7YTp7dmFyIGM9YTthPWMuaG9zdC5nZXRSb290Tm9kZSgpO2lmKEMoYSkpZm9yKHZhciBkPWMuaG9zdC5jaGlsZE5vZGVzLGU9MDtlPGQubGVuZ3RoO2UrKylpZihjPWRbZV0sXCJzbG90XCI9PWMubG9jYWxOYW1lKWJyZWFrIGE7YT12b2lkIDB9fWImJmIuX3JlbmRlclJvb3QoKX1cbnpjLnByb3RvdHlwZS5fcmVuZGVyUm9vdD1mdW5jdGlvbigpe3ZhciBhPUJkO0JkPSEwO3RoaXMuY2E9ITE7aWYodGhpcy5tKXtRYyh0aGlzKTtmb3IodmFyIGI9MCxjO2I8dGhpcy5tLmxlbmd0aDtiKyspe2M9dGhpcy5tW2JdO3ZhciBkPXkoYyksZT1kLmFzc2lnbmVkTm9kZXM7ZC5hc3NpZ25lZE5vZGVzPVtdO2QuTj1bXTtpZihkLnFhPWUpZm9yKGQ9MDtkPGUubGVuZ3RoO2QrKyl7dmFyIGY9eShlW2RdKTtmLmJhPWYuYXNzaWduZWRTbG90O2YuYXNzaWduZWRTbG90PT09YyYmKGYuYXNzaWduZWRTbG90PW51bGwpfX1mb3IoYz10aGlzLmhvc3QuZmlyc3RDaGlsZDtjO2M9Yy5uZXh0U2libGluZylGZCh0aGlzLGMpO2ZvcihiPTA7Yjx0aGlzLm0ubGVuZ3RoO2IrKyl7Yz10aGlzLm1bYl07ZT15KGMpO2lmKCFlLmFzc2lnbmVkTm9kZXMubGVuZ3RoKWZvcihkPWMuZmlyc3RDaGlsZDtkO2Q9ZC5uZXh0U2libGluZylGZCh0aGlzLGQsYyk7KGQ9KGQ9eShjLnBhcmVudE5vZGUpKSYmZC5yb290KSYmXG5TYyhkKSYmZC5fcmVuZGVyUm9vdCgpO0dkKHRoaXMsZS5OLGUuYXNzaWduZWROb2Rlcyk7aWYoZD1lLnFhKXtmb3IoZj0wO2Y8ZC5sZW5ndGg7ZisrKXkoZFtmXSkuYmE9bnVsbDtlLnFhPW51bGw7ZC5sZW5ndGg+ZS5hc3NpZ25lZE5vZGVzLmxlbmd0aCYmKGUuZmE9ITApfWUuZmEmJihlLmZhPSExLEhkKHRoaXMsYykpfWI9dGhpcy5tO2M9W107Zm9yKGU9MDtlPGIubGVuZ3RoO2UrKylkPWJbZV0ucGFyZW50Tm9kZSwoZj15KGQpKSYmZi5yb290fHwhKDA+Yy5pbmRleE9mKGQpKXx8Yy5wdXNoKGQpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe2U9Y1tiXTtkPWU9PT10aGlzP3RoaXMuaG9zdDplO2Y9W107ZT1lLmNoaWxkTm9kZXM7Zm9yKHZhciBnPTA7ZzxlLmxlbmd0aDtnKyspe3ZhciBoPWVbZ107aWYoXCJzbG90XCI9PWgubG9jYWxOYW1lKXtoPXkoaCkuTjtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKylmLnB1c2goaFtrXSl9ZWxzZSBmLnB1c2goaCl9ZT12b2lkIDA7Zz16ZChkKTtcbmg9eGQoZixmLmxlbmd0aCxnLGcubGVuZ3RoKTtmb3IodmFyIG09az0wO2s8aC5sZW5ndGgmJihlPWhba10pO2srKyl7Zm9yKHZhciBuPTAscDtuPGUuWC5sZW5ndGgmJihwPWUuWFtuXSk7bisrKVJjKHApPT09ZCYmRS5yZW1vdmVDaGlsZC5jYWxsKGQscCksZy5zcGxpY2UoZS5pbmRleCttLDEpO20tPWUuZGF9Zm9yKG09MDttPGgubGVuZ3RoJiYoZT1oW21dKTttKyspZm9yKGs9Z1tlLmluZGV4XSxuPWUuaW5kZXg7bjxlLmluZGV4K2UuZGE7bisrKXA9ZltuXSxFLmluc2VydEJlZm9yZS5jYWxsKGQscCxrKSxnLnNwbGljZShuLDAscCl9fWlmKCF0aGlzLmIpZm9yKHA9dGhpcy5ob3N0LmNoaWxkTm9kZXMsYz0wLGI9cC5sZW5ndGg7YzxiO2MrKyllPXBbY10sZD15KGUpLFJjKGUpIT09dGhpcy5ob3N0fHxcInNsb3RcIiE9PWUubG9jYWxOYW1lJiZkLmFzc2lnbmVkU2xvdHx8RS5yZW1vdmVDaGlsZC5jYWxsKHRoaXMuaG9zdCxlKTt0aGlzLmI9ITA7QmQ9YTtDZCYmQ2QoKX07XG5mdW5jdGlvbiBGZChhLGIsYyl7dmFyIGQ9eChiKSxlPWQuYmE7ZC5iYT1udWxsO2N8fChjPShhPWEudltiLnNsb3R8fFwiX19jYXRjaGFsbFwiXSkmJmFbMF0pO2M/KHgoYykuYXNzaWduZWROb2Rlcy5wdXNoKGIpLGQuYXNzaWduZWRTbG90PWMpOmQuYXNzaWduZWRTbG90PXZvaWQgMDtlIT09ZC5hc3NpZ25lZFNsb3QmJmQuYXNzaWduZWRTbG90JiYoeChkLmFzc2lnbmVkU2xvdCkuZmE9ITApfWZ1bmN0aW9uIEdkKGEsYixjKXtmb3IodmFyIGQ9MCxlO2Q8Yy5sZW5ndGgmJihlPWNbZF0pO2QrKylpZihcInNsb3RcIj09ZS5sb2NhbE5hbWUpe3ZhciBmPXkoZSkuYXNzaWduZWROb2RlcztmJiZmLmxlbmd0aCYmR2QoYSxiLGYpfWVsc2UgYi5wdXNoKGNbZF0pfWZ1bmN0aW9uIEhkKGEsYil7RS5kaXNwYXRjaEV2ZW50LmNhbGwoYixuZXcgRXZlbnQoXCJzbG90Y2hhbmdlXCIpKTtiPXkoYik7Yi5hc3NpZ25lZFNsb3QmJkhkKGEsYi5hc3NpZ25lZFNsb3QpfVxuZnVuY3Rpb24gUWMoYSl7aWYoYS5hJiZhLmEubGVuZ3RoKXtmb3IodmFyIGI9YS5hLGMsZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO0hjKGUpO0hjKGUucGFyZW50Tm9kZSk7dmFyIGY9VWMoZSk7YS52W2ZdPyhjPWN8fHt9LGNbZl09ITAsYS52W2ZdLnB1c2goZSkpOmEudltmXT1bZV07YS5tLnB1c2goZSl9aWYoYylmb3IodmFyIGcgaW4gYylhLnZbZ109VmMoYS52W2ddKTthLmE9W119fWZ1bmN0aW9uIFVjKGEpe3ZhciBiPWEubmFtZXx8YS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpfHxcIl9fY2F0Y2hhbGxcIjtyZXR1cm4gYS5NYT1ifWZ1bmN0aW9uIFZjKGEpe3JldHVybiBhLnNvcnQoZnVuY3Rpb24oYSxjKXthPURkKGEpO2Zvcih2YXIgYj1EZChjKSxlPTA7ZTxhLmxlbmd0aDtlKyspe2M9YVtlXTt2YXIgZj1iW2VdO2lmKGMhPT1mKXJldHVybiBhPUFycmF5LmZyb20oYy5wYXJlbnROb2RlLmNoaWxkTm9kZXMpLGEuaW5kZXhPZihjKS1hLmluZGV4T2YoZil9fSl9XG5mdW5jdGlvbiBTYyhhKXtRYyhhKTtyZXR1cm4hKCFhLm18fCFhLm0ubGVuZ3RoKX1cbmlmKHdpbmRvdy5jdXN0b21FbGVtZW50cyYmei50YSl7dmFyIElkPW5ldyBNYXA7Q2Q9ZnVuY3Rpb24oKXt2YXIgYT1BcnJheS5mcm9tKElkKTtJZC5jbGVhcigpO2E9amEoYSk7Zm9yKHZhciBiPWEubmV4dCgpOyFiLmRvbmU7Yj1hLm5leHQoKSl7Yj1qYShiLnZhbHVlKTt2YXIgYz1iLm5leHQoKS52YWx1ZTtiLm5leHQoKS52YWx1ZT9jLkthKCk6Yy5MYSgpfX07QmQmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsZnVuY3Rpb24oKXtCZD0hMTtDZCgpfSx7b25jZTohMH0pO3ZhciBKZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9MCxlPVwiX19pc0Nvbm5lY3RlZFwiK2QrKztpZihifHxjKWEucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrPWEucHJvdG90eXBlLkthPWZ1bmN0aW9uKCl7QmQ/SWQuc2V0KHRoaXMsITApOnRoaXNbZV18fCh0aGlzW2VdPSEwLGImJmIuY2FsbCh0aGlzKSl9LGEucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrPWEucHJvdG90eXBlLkxhPVxuZnVuY3Rpb24oKXtCZD90aGlzLmlzQ29ubmVjdGVkfHxJZC5zZXQodGhpcywhMSk6dGhpc1tlXSYmKHRoaXNbZV09ITEsYyYmYy5jYWxsKHRoaXMpKX07cmV0dXJuIGF9LGRlZmluZT13aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZSxcImRlZmluZVwiLHt2YWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPWIucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrLGQ9Yi5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s7ZGVmaW5lLmNhbGwod2luZG93LmN1c3RvbUVsZW1lbnRzLGEsSmQoYixjLGQpKTtiLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaz1jO2IucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrPWR9fSl9O2Z1bmN0aW9uIEtkKGEpe3ZhciBiPWEuZ2V0Um9vdE5vZGUoKTtDKGIpJiZFZChiKTtyZXR1cm4oYT15KGEpKSYmYS5hc3NpZ25lZFNsb3R8fG51bGx9XG52YXIgTGQ9e2FkZEV2ZW50TGlzdGVuZXI6b2QuYmluZCh3aW5kb3cpLHJlbW92ZUV2ZW50TGlzdGVuZXI6cWQuYmluZCh3aW5kb3cpfSxNZD17YWRkRXZlbnRMaXN0ZW5lcjpvZCxyZW1vdmVFdmVudExpc3RlbmVyOnFkLGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEpe3JldHVybiBKYyh0aGlzLGEpfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gSmModGhpcyxhLGIpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhKXtyZXR1cm4gS2ModGhpcyxhKX0scmVwbGFjZUNoaWxkOmZ1bmN0aW9uKGEsYil7SmModGhpcyxhLGIpO0tjKHRoaXMsYik7cmV0dXJuIGF9LGNsb25lTm9kZTpmdW5jdGlvbihhKXtpZihcInRlbXBsYXRlXCI9PXRoaXMubG9jYWxOYW1lKXZhciBiPUUuY2xvbmVOb2RlLmNhbGwodGhpcyxhKTtlbHNlIGlmKGI9RS5jbG9uZU5vZGUuY2FsbCh0aGlzLCExKSxhJiZiLm5vZGVUeXBlIT09Tm9kZS5BVFRSSUJVVEVfTk9ERSl7YT10aGlzLmNoaWxkTm9kZXM7Zm9yKHZhciBjPVxuMCxkO2M8YS5sZW5ndGg7YysrKWQ9YVtjXS5jbG9uZU5vZGUoITApLGIuYXBwZW5kQ2hpbGQoZCl9cmV0dXJuIGJ9LGdldFJvb3ROb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIFdjKHRoaXMpfSxjb250YWluczpmdW5jdGlvbihhKXtyZXR1cm4gdmIodGhpcyxhKX0sZGlzcGF0Y2hFdmVudDpmdW5jdGlvbihhKXtBYigpO3JldHVybiBFLmRpc3BhdGNoRXZlbnQuY2FsbCh0aGlzLGEpfX07XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhNZCx7aXNDb25uZWN0ZWQ6e2dldDpmdW5jdGlvbigpe2lmKHFjJiZxYy5jYWxsKHRoaXMpKXJldHVybiEwO2lmKHRoaXMubm9kZVR5cGU9PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSlyZXR1cm4hMTt2YXIgYT10aGlzLm93bmVyRG9jdW1lbnQ7aWYodWIpe2lmKEUuY29udGFpbnMuY2FsbChhLHRoaXMpKXJldHVybiEwfWVsc2UgaWYoYS5kb2N1bWVudEVsZW1lbnQmJkUuY29udGFpbnMuY2FsbChhLmRvY3VtZW50RWxlbWVudCx0aGlzKSlyZXR1cm4hMDtmb3IoYT10aGlzO2EmJiEoYSBpbnN0YW5jZW9mIERvY3VtZW50KTspYT1hLnBhcmVudE5vZGV8fChDKGEpP2EuaG9zdDp2b2lkIDApO3JldHVybiEhKGEmJmEgaW5zdGFuY2VvZiBEb2N1bWVudCl9LGNvbmZpZ3VyYWJsZTohMH19KTtcbnZhciBOZD17Z2V0IGFzc2lnbmVkU2xvdCgpe3JldHVybiBLZCh0aGlzKX19LE9kPXtxdWVyeVNlbGVjdG9yOmZ1bmN0aW9uKGEpe3JldHVybiBYYyh0aGlzLGZ1bmN0aW9uKGIpe3JldHVybiBqYi5jYWxsKGIsYSl9LGZ1bmN0aW9uKGEpe3JldHVybiEhYX0pWzBdfHxudWxsfSxxdWVyeVNlbGVjdG9yQWxsOmZ1bmN0aW9uKGEsYil7aWYoYil7Yj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChFLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbCh0aGlzLGEpKTt2YXIgYz10aGlzLmdldFJvb3ROb2RlKCk7cmV0dXJuIGIuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLmdldFJvb3ROb2RlKCk9PWN9KX1yZXR1cm4gWGModGhpcyxmdW5jdGlvbihiKXtyZXR1cm4gamIuY2FsbChiLGEpfSl9fSxQZD17YXNzaWduZWROb2RlczpmdW5jdGlvbihhKXtpZihcInNsb3RcIj09PXRoaXMubG9jYWxOYW1lKXt2YXIgYj10aGlzLmdldFJvb3ROb2RlKCk7QyhiKSYmRWQoYik7cmV0dXJuKGI9eSh0aGlzKSk/XG4oYSYmYS5mbGF0dGVuP2IuTjpiLmFzc2lnbmVkTm9kZXMpfHxbXTpbXX19fSxRZD1sYih7c2V0QXR0cmlidXRlOmZ1bmN0aW9uKGEsYil7JGModGhpcyxhLGIpfSxyZW1vdmVBdHRyaWJ1dGU6ZnVuY3Rpb24oYSl7RS5yZW1vdmVBdHRyaWJ1dGUuY2FsbCh0aGlzLGEpO1RjKHRoaXMsYSl9LGF0dGFjaFNoYWRvdzpmdW5jdGlvbihhKXtpZighdGhpcyl0aHJvd1wiTXVzdCBwcm92aWRlIGEgaG9zdC5cIjtpZighYSl0aHJvd1wiTm90IGVub3VnaCBhcmd1bWVudHMuXCI7cmV0dXJuIG5ldyB6YyhBZCx0aGlzLGEpfSxnZXQgc2xvdCgpe3JldHVybiB0aGlzLmdldEF0dHJpYnV0ZShcInNsb3RcIil9LHNldCBzbG90KGEpeyRjKHRoaXMsXCJzbG90XCIsYSl9LGdldCBhc3NpZ25lZFNsb3QoKXtyZXR1cm4gS2QodGhpcyl9fSxPZCxQZCk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUWQsdmMpO1xudmFyIFJkPWxiKHtpbXBvcnROb2RlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGFkKGEsYil9LGdldEVsZW1lbnRCeUlkOmZ1bmN0aW9uKGEpe3JldHVybiBYYyh0aGlzLGZ1bmN0aW9uKGIpe3JldHVybiBiLmlkPT1hfSxmdW5jdGlvbihhKXtyZXR1cm4hIWF9KVswXXx8bnVsbH19LE9kKTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZCx7X2FjdGl2ZUVsZW1lbnQ6d2MuYWN0aXZlRWxlbWVudH0pO1xuZm9yKHZhciBTZD1IVE1MRWxlbWVudC5wcm90b3R5cGUuYmx1cixUZD17Ymx1cjpmdW5jdGlvbigpe3ZhciBhPXkodGhpcyk7KGE9KGE9YSYmYS5yb290KSYmYS5hY3RpdmVFbGVtZW50KT9hLmJsdXIoKTpTZC5jYWxsKHRoaXMpfX0sVWQ9e30sVmQ9amEoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoRG9jdW1lbnQucHJvdG90eXBlKSksV2Q9VmQubmV4dCgpOyFXZC5kb25lO1VkPXtIOlVkLkh9LFdkPVZkLm5leHQoKSlVZC5IPVdkLnZhbHVlLFwib25cIj09PVVkLkguc3Vic3RyaW5nKDAsMikmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZCxVZC5ILHtzZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPXgodGhpcyksZD1hLkguc3Vic3RyaW5nKDIpO2MuJFthLkhdJiZ0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZCxjLiRbYS5IXSk7dGhpcy5hZGRFdmVudExpc3RlbmVyKGQsYix7fSk7Yy4kW2EuSF09Yn19KFVkKSxnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGI9XG55KHRoaXMpO3JldHVybiBiJiZiLiRbYS5IXX19KFVkKSxjb25maWd1cmFibGU6ITB9KTt2YXIgWGQ9e2FkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiLGMpe1wib2JqZWN0XCIhPT10eXBlb2YgYyYmKGM9e2NhcHR1cmU6ISFjfSk7Yy5tYT10aGlzO3RoaXMuaG9zdC5hZGRFdmVudExpc3RlbmVyKGEsYixjKX0scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIsYyl7XCJvYmplY3RcIiE9PXR5cGVvZiBjJiYoYz17Y2FwdHVyZTohIWN9KTtjLm1hPXRoaXM7dGhpcy5ob3N0LnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxiLGMpfSxnZXRFbGVtZW50QnlJZDpmdW5jdGlvbihhKXtyZXR1cm4gWGModGhpcyxmdW5jdGlvbihiKXtyZXR1cm4gYi5pZD09YX0sZnVuY3Rpb24oYSl7cmV0dXJuISFhfSlbMF18fG51bGx9fTtcbmZ1bmN0aW9uIE4oYSxiKXtmb3IodmFyIGM9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYiksZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiLGUpO2YudmFsdWU/YVtlXT1mLnZhbHVlOk9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGUsZil9fTtpZih6LnRhKXt2YXIgU2hhZHlET009e2luVXNlOnoudGEscGF0Y2g6ZnVuY3Rpb24oYSl7QmMoYSk7QWMoYSk7cmV0dXJuIGF9LGlzU2hhZHlSb290OkMsZW5xdWV1ZTp6YixmbHVzaDpBYixzZXR0aW5nczp6LGZpbHRlck11dGF0aW9uczpGYixvYnNlcnZlQ2hpbGRyZW46RGIsdW5vYnNlcnZlQ2hpbGRyZW46RWIsbmF0aXZlTWV0aG9kczpFLG5hdGl2ZVRyZWU6TCxkZWZlckNvbm5lY3Rpb25DYWxsYmFja3M6ei5kZWZlckNvbm5lY3Rpb25DYWxsYmFja3N9O3dpbmRvdy5TaGFkeURPTT1TaGFkeURPTTt2ZCgpO3ZhciBZZD13aW5kb3cuY3VzdG9tRWxlbWVudHMmJndpbmRvdy5jdXN0b21FbGVtZW50cy5uYXRpdmVIVE1MRWxlbWVudHx8SFRNTEVsZW1lbnQ7Tih6Yy5wcm90b3R5cGUsWGQpO04od2luZG93Lk5vZGUucHJvdG90eXBlLE1kKTtOKHdpbmRvdy5XaW5kb3cucHJvdG90eXBlLExkKTtOKHdpbmRvdy5UZXh0LnByb3RvdHlwZSxOZCk7Tih3aW5kb3cuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsXG5PZCk7Tih3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUsUWQpO04od2luZG93LkRvY3VtZW50LnByb3RvdHlwZSxSZCk7d2luZG93LkhUTUxTbG90RWxlbWVudCYmTih3aW5kb3cuSFRNTFNsb3RFbGVtZW50LnByb3RvdHlwZSxQZCk7TihZZC5wcm90b3R5cGUsVGQpO3ouSyYmKHhjKHdpbmRvdy5Ob2RlLnByb3RvdHlwZSkseGMod2luZG93LlRleHQucHJvdG90eXBlKSx4Yyh3aW5kb3cuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUpLHhjKHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZSkseGMoWWQucHJvdG90eXBlKSx4Yyh3aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlKSx3aW5kb3cuSFRNTFNsb3RFbGVtZW50JiZ4Yyh3aW5kb3cuSFRNTFNsb3RFbGVtZW50LnByb3RvdHlwZSkpO3ljKCk7d2luZG93LlNoYWRvd1Jvb3Q9emN9O3ZhciBaZD1uZXcgU2V0KFwiYW5ub3RhdGlvbi14bWwgY29sb3ItcHJvZmlsZSBmb250LWZhY2UgZm9udC1mYWNlLXNyYyBmb250LWZhY2UtdXJpIGZvbnQtZmFjZS1mb3JtYXQgZm9udC1mYWNlLW5hbWUgbWlzc2luZy1nbHlwaFwiLnNwbGl0KFwiIFwiKSk7ZnVuY3Rpb24gJGQoYSl7dmFyIGI9WmQuaGFzKGEpO2E9L15bYS16XVsuMC05X2Etel0qLVtcXC0uMC05X2Etel0qJC8udGVzdChhKTtyZXR1cm4hYiYmYX1mdW5jdGlvbiBPKGEpe3ZhciBiPWEuaXNDb25uZWN0ZWQ7aWYodm9pZCAwIT09YilyZXR1cm4gYjtmb3IoO2EmJiEoYS5fX0NFX2lzSW1wb3J0RG9jdW1lbnR8fGEgaW5zdGFuY2VvZiBEb2N1bWVudCk7KWE9YS5wYXJlbnROb2RlfHwod2luZG93LlNoYWRvd1Jvb3QmJmEgaW5zdGFuY2VvZiBTaGFkb3dSb290P2EuaG9zdDp2b2lkIDApO3JldHVybiEoIWF8fCEoYS5fX0NFX2lzSW1wb3J0RG9jdW1lbnR8fGEgaW5zdGFuY2VvZiBEb2N1bWVudCkpfVxuZnVuY3Rpb24gYWUoYSxiKXtmb3IoO2ImJmIhPT1hJiYhYi5uZXh0U2libGluZzspYj1iLnBhcmVudE5vZGU7cmV0dXJuIGImJmIhPT1hP2IubmV4dFNpYmxpbmc6bnVsbH1cbmZ1bmN0aW9uIGJlKGEsYixjKXtjPXZvaWQgMD09PWM/bmV3IFNldDpjO2Zvcih2YXIgZD1hO2Q7KXtpZihkLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciBlPWQ7YihlKTt2YXIgZj1lLmxvY2FsTmFtZTtpZihcImxpbmtcIj09PWYmJlwiaW1wb3J0XCI9PT1lLmdldEF0dHJpYnV0ZShcInJlbFwiKSl7ZD1lLmltcG9ydDtpZihkIGluc3RhbmNlb2YgTm9kZSYmIWMuaGFzKGQpKWZvcihjLmFkZChkKSxkPWQuZmlyc3RDaGlsZDtkO2Q9ZC5uZXh0U2libGluZyliZShkLGIsYyk7ZD1hZShhLGUpO2NvbnRpbnVlfWVsc2UgaWYoXCJ0ZW1wbGF0ZVwiPT09Zil7ZD1hZShhLGUpO2NvbnRpbnVlfWlmKGU9ZS5fX0NFX3NoYWRvd1Jvb3QpZm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKWJlKGUsYixjKX1kPWQuZmlyc3RDaGlsZD9kLmZpcnN0Q2hpbGQ6YWUoYSxkKX19ZnVuY3Rpb24gUChhLGIsYyl7YVtiXT1jfTtmdW5jdGlvbiBjZSgpe3RoaXMuYT1uZXcgTWFwO3RoaXMuQj1uZXcgTWFwO3RoaXMuZj1bXTt0aGlzLmM9ITF9ZnVuY3Rpb24gZGUoYSxiLGMpe2EuYS5zZXQoYixjKTthLkIuc2V0KGMuY29uc3RydWN0b3IsYyl9ZnVuY3Rpb24gZWUoYSxiKXthLmM9ITA7YS5mLnB1c2goYil9ZnVuY3Rpb24gZmUoYSxiKXthLmMmJmJlKGIsZnVuY3Rpb24oYil7cmV0dXJuIGEuYihiKX0pfWNlLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEpe2lmKHRoaXMuYyYmIWEuX19DRV9wYXRjaGVkKXthLl9fQ0VfcGF0Y2hlZD0hMDtmb3IodmFyIGI9MDtiPHRoaXMuZi5sZW5ndGg7YisrKXRoaXMuZltiXShhKX19O2Z1bmN0aW9uIFEoYSxiKXt2YXIgYz1bXTtiZShiLGZ1bmN0aW9uKGEpe3JldHVybiBjLnB1c2goYSl9KTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdOzE9PT1kLl9fQ0Vfc3RhdGU/YS5jb25uZWN0ZWRDYWxsYmFjayhkKTpnZShhLGQpfX1cbmZ1bmN0aW9uIFIoYSxiKXt2YXIgYz1bXTtiZShiLGZ1bmN0aW9uKGEpe3JldHVybiBjLnB1c2goYSl9KTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdOzE9PT1kLl9fQ0Vfc3RhdGUmJmEuZGlzY29ubmVjdGVkQ2FsbGJhY2soZCl9fVxuZnVuY3Rpb24gUyhhLGIsYyl7Yz12b2lkIDA9PT1jP3t9OmM7dmFyIGQ9Yy5qYnx8bmV3IFNldCxlPWMuaWF8fGZ1bmN0aW9uKGIpe3JldHVybiBnZShhLGIpfSxmPVtdO2JlKGIsZnVuY3Rpb24oYil7aWYoXCJsaW5rXCI9PT1iLmxvY2FsTmFtZSYmXCJpbXBvcnRcIj09PWIuZ2V0QXR0cmlidXRlKFwicmVsXCIpKXt2YXIgYz1iLmltcG9ydDtjIGluc3RhbmNlb2YgTm9kZSYmKGMuX19DRV9pc0ltcG9ydERvY3VtZW50PSEwLGMuX19DRV9oYXNSZWdpc3RyeT0hMCk7YyYmXCJjb21wbGV0ZVwiPT09Yy5yZWFkeVN0YXRlP2MuX19DRV9kb2N1bWVudExvYWRIYW5kbGVkPSEwOmIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbigpe3ZhciBjPWIuaW1wb3J0O2lmKCFjLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZCl7Yy5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQ9ITA7dmFyIGY9bmV3IFNldChkKTtmLmRlbGV0ZShjKTtTKGEsYyx7amI6ZixpYTplfSl9fSl9ZWxzZSBmLnB1c2goYil9LGQpO1xuaWYoYS5jKWZvcihiPTA7YjxmLmxlbmd0aDtiKyspYS5iKGZbYl0pO2ZvcihiPTA7YjxmLmxlbmd0aDtiKyspZShmW2JdKX1cbmZ1bmN0aW9uIGdlKGEsYil7aWYodm9pZCAwPT09Yi5fX0NFX3N0YXRlKXt2YXIgYz1iLm93bmVyRG9jdW1lbnQ7aWYoYy5kZWZhdWx0Vmlld3x8Yy5fX0NFX2lzSW1wb3J0RG9jdW1lbnQmJmMuX19DRV9oYXNSZWdpc3RyeSlpZihjPWEuYS5nZXQoYi5sb2NhbE5hbWUpKXtjLmNvbnN0cnVjdGlvblN0YWNrLnB1c2goYik7dmFyIGQ9Yy5jb25zdHJ1Y3Rvcjt0cnl7dHJ5e2lmKG5ldyBkIT09Yil0aHJvdyBFcnJvcihcIlRoZSBjdXN0b20gZWxlbWVudCBjb25zdHJ1Y3RvciBkaWQgbm90IHByb2R1Y2UgdGhlIGVsZW1lbnQgYmVpbmcgdXBncmFkZWQuXCIpO31maW5hbGx5e2MuY29uc3RydWN0aW9uU3RhY2sucG9wKCl9fWNhdGNoKGcpe3Rocm93IGIuX19DRV9zdGF0ZT0yLGc7fWIuX19DRV9zdGF0ZT0xO2IuX19DRV9kZWZpbml0aW9uPWM7aWYoYy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2spZm9yKGM9Yy5vYnNlcnZlZEF0dHJpYnV0ZXMsZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLFxuZj1iLmdldEF0dHJpYnV0ZShlKTtudWxsIT09ZiYmYS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYixlLG51bGwsZixudWxsKX1PKGIpJiZhLmNvbm5lY3RlZENhbGxiYWNrKGIpfX19Y2UucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEuX19DRV9kZWZpbml0aW9uO2IuY29ubmVjdGVkQ2FsbGJhY2smJmIuY29ubmVjdGVkQ2FsbGJhY2suY2FsbChhKX07Y2UucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEuX19DRV9kZWZpbml0aW9uO2IuZGlzY29ubmVjdGVkQ2FsbGJhY2smJmIuZGlzY29ubmVjdGVkQ2FsbGJhY2suY2FsbChhKX07XG5jZS5wcm90b3R5cGUuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5fX0NFX2RlZmluaXRpb247Zi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2smJi0xPGYub2JzZXJ2ZWRBdHRyaWJ1dGVzLmluZGV4T2YoYikmJmYuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLmNhbGwoYSxiLGMsZCxlKX07ZnVuY3Rpb24gaGUoYSl7dmFyIGI9ZG9jdW1lbnQ7dGhpcy53PWE7dGhpcy5hPWI7dGhpcy5QPXZvaWQgMDtTKHRoaXMudyx0aGlzLmEpO1wibG9hZGluZ1wiPT09dGhpcy5hLnJlYWR5U3RhdGUmJih0aGlzLlA9bmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5iLmJpbmQodGhpcykpLHRoaXMuUC5vYnNlcnZlKHRoaXMuYSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KSl9ZnVuY3Rpb24gaWUoYSl7YS5QJiZhLlAuZGlzY29ubmVjdCgpfWhlLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYS5yZWFkeVN0YXRlO1wiaW50ZXJhY3RpdmVcIiE9PWImJlwiY29tcGxldGVcIiE9PWJ8fGllKHRoaXMpO2ZvcihiPTA7YjxhLmxlbmd0aDtiKyspZm9yKHZhciBjPWFbYl0uYWRkZWROb2RlcyxkPTA7ZDxjLmxlbmd0aDtkKyspUyh0aGlzLncsY1tkXSl9O2Z1bmN0aW9uIGplKCl7dmFyIGE9dGhpczt0aGlzLmE9dGhpcy5BPXZvaWQgMDt0aGlzLmI9bmV3IFByb21pc2UoZnVuY3Rpb24oYil7YS5hPWI7YS5BJiZiKGEuQSl9KX1qZS5wcm90b3R5cGUucmVzb2x2ZT1mdW5jdGlvbihhKXtpZih0aGlzLkEpdGhyb3cgRXJyb3IoXCJBbHJlYWR5IHJlc29sdmVkLlwiKTt0aGlzLkE9YTt0aGlzLmEmJnRoaXMuYShhKX07ZnVuY3Rpb24gVChhKXt0aGlzLm5hPSExO3RoaXMudz1hO3RoaXMuc2E9bmV3IE1hcDt0aGlzLm9hPWZ1bmN0aW9uKGEpe3JldHVybiBhKCl9O3RoaXMuYWE9ITE7dGhpcy5wYT1bXTt0aGlzLlBhPW5ldyBoZShhKX1yPVQucHJvdG90eXBlO1xuci5kZWZpbmU9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO2lmKCEoYiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3JzIG11c3QgYmUgZnVuY3Rpb25zLlwiKTtpZighJGQoYSkpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIGVsZW1lbnQgbmFtZSAnXCIrYStcIicgaXMgbm90IHZhbGlkLlwiKTtpZih0aGlzLncuYS5nZXQoYSkpdGhyb3cgRXJyb3IoXCJBIGN1c3RvbSBlbGVtZW50IHdpdGggbmFtZSAnXCIrYStcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtpZih0aGlzLm5hKXRocm93IEVycm9yKFwiQSBjdXN0b20gZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIGRlZmluZWQuXCIpO3RoaXMubmE9ITA7dHJ5e3ZhciBkPWZ1bmN0aW9uKGEpe3ZhciBiPWVbYV07aWYodm9pZCAwIT09YiYmIShiIGluc3RhbmNlb2YgRnVuY3Rpb24pKXRocm93IEVycm9yKFwiVGhlICdcIithK1wiJyBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uXCIpO1xucmV0dXJuIGJ9LGU9Yi5wcm90b3R5cGU7aWYoIShlIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yJ3MgcHJvdG90eXBlIGlzIG5vdCBhbiBvYmplY3QuXCIpO3ZhciBmPWQoXCJjb25uZWN0ZWRDYWxsYmFja1wiKTt2YXIgZz1kKFwiZGlzY29ubmVjdGVkQ2FsbGJhY2tcIik7dmFyIGg9ZChcImFkb3B0ZWRDYWxsYmFja1wiKTt2YXIgaz1kKFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIpO3ZhciBtPWIub2JzZXJ2ZWRBdHRyaWJ1dGVzfHxbXX1jYXRjaChuKXtyZXR1cm59ZmluYWxseXt0aGlzLm5hPSExfWI9e2xvY2FsTmFtZTphLGNvbnN0cnVjdG9yOmIsY29ubmVjdGVkQ2FsbGJhY2s6ZixkaXNjb25uZWN0ZWRDYWxsYmFjazpnLGFkb3B0ZWRDYWxsYmFjazpoLGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazprLG9ic2VydmVkQXR0cmlidXRlczptLGNvbnN0cnVjdGlvblN0YWNrOltdfTtkZSh0aGlzLncsYSxiKTt0aGlzLnBhLnB1c2goYik7XG50aGlzLmFhfHwodGhpcy5hYT0hMCx0aGlzLm9hKGZ1bmN0aW9uKCl7cmV0dXJuIGtlKGMpfSkpfTtyLmlhPWZ1bmN0aW9uKGEpe1ModGhpcy53LGEpfTtcbmZ1bmN0aW9uIGtlKGEpe2lmKCExIT09YS5hYSl7YS5hYT0hMTtmb3IodmFyIGI9YS5wYSxjPVtdLGQ9bmV3IE1hcCxlPTA7ZTxiLmxlbmd0aDtlKyspZC5zZXQoYltlXS5sb2NhbE5hbWUsW10pO1MoYS53LGRvY3VtZW50LHtpYTpmdW5jdGlvbihiKXtpZih2b2lkIDA9PT1iLl9fQ0Vfc3RhdGUpe3ZhciBlPWIubG9jYWxOYW1lLGY9ZC5nZXQoZSk7Zj9mLnB1c2goYik6YS53LmEuZ2V0KGUpJiZjLnB1c2goYil9fX0pO2ZvcihlPTA7ZTxjLmxlbmd0aDtlKyspZ2UoYS53LGNbZV0pO2Zvcig7MDxiLmxlbmd0aDspe3ZhciBmPWIuc2hpZnQoKTtlPWYubG9jYWxOYW1lO2Y9ZC5nZXQoZi5sb2NhbE5hbWUpO2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWdlKGEudyxmW2ddKTsoZT1hLnNhLmdldChlKSkmJmUucmVzb2x2ZSh2b2lkIDApfX19ci5nZXQ9ZnVuY3Rpb24oYSl7aWYoYT10aGlzLncuYS5nZXQoYSkpcmV0dXJuIGEuY29uc3RydWN0b3J9O1xuci53aGVuRGVmaW5lZD1mdW5jdGlvbihhKXtpZighJGQoYSkpcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBTeW50YXhFcnJvcihcIidcIithK1wiJyBpcyBub3QgYSB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lLlwiKSk7dmFyIGI9dGhpcy5zYS5nZXQoYSk7aWYoYilyZXR1cm4gYi5iO2I9bmV3IGplO3RoaXMuc2Euc2V0KGEsYik7dGhpcy53LmEuZ2V0KGEpJiYhdGhpcy5wYS5zb21lKGZ1bmN0aW9uKGIpe3JldHVybiBiLmxvY2FsTmFtZT09PWF9KSYmYi5yZXNvbHZlKHZvaWQgMCk7cmV0dXJuIGIuYn07ci5lYj1mdW5jdGlvbihhKXtpZSh0aGlzLlBhKTt2YXIgYj10aGlzLm9hO3RoaXMub2E9ZnVuY3Rpb24oYyl7cmV0dXJuIGEoZnVuY3Rpb24oKXtyZXR1cm4gYihjKX0pfX07d2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeT1UO1QucHJvdG90eXBlLmRlZmluZT1ULnByb3RvdHlwZS5kZWZpbmU7VC5wcm90b3R5cGUudXBncmFkZT1ULnByb3RvdHlwZS5pYTtcblQucHJvdG90eXBlLmdldD1ULnByb3RvdHlwZS5nZXQ7VC5wcm90b3R5cGUud2hlbkRlZmluZWQ9VC5wcm90b3R5cGUud2hlbkRlZmluZWQ7VC5wcm90b3R5cGUucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjaz1ULnByb3RvdHlwZS5lYjt2YXIgbGU9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50LG1lPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudE5TLG5lPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuaW1wb3J0Tm9kZSxvZT13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLnByZXBlbmQscGU9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5hcHBlbmQscWU9d2luZG93LkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnByZXBlbmQscmU9d2luZG93LkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLmFwcGVuZCxzZT13aW5kb3cuTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlLHRlPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCx1ZT13aW5kb3cuTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlLHZlPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCx3ZT13aW5kb3cuTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkLHhlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93Lk5vZGUucHJvdG90eXBlLFxuXCJ0ZXh0Q29udGVudFwiKSx5ZT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoU2hhZG93LHplPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpLEFlPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUsQmU9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZSxDZT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlLERlPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOUyxFZT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMsRmU9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZU5TLEdlPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudEVsZW1lbnQsSGU9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50SFRNTCxJZT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucHJlcGVuZCxcbkplPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmQsS2U9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmJlZm9yZSxMZT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYWZ0ZXIsTWU9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoLE5lPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmUsT2U9d2luZG93LkhUTUxFbGVtZW50LFBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZSxcImlubmVySFRNTFwiKSxRZT13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudCxSZT13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50SFRNTDt2YXIgU2U9bmV3IGZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBUZSgpe3ZhciBhPVVlO3dpbmRvdy5IVE1MRWxlbWVudD1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoKXt2YXIgYj10aGlzLmNvbnN0cnVjdG9yLGQ9YS5CLmdldChiKTtpZighZCl0aHJvdyBFcnJvcihcIlRoZSBjdXN0b20gZWxlbWVudCBiZWluZyBjb25zdHJ1Y3RlZCB3YXMgbm90IHJlZ2lzdGVyZWQgd2l0aCBgY3VzdG9tRWxlbWVudHNgLlwiKTt2YXIgZT1kLmNvbnN0cnVjdGlvblN0YWNrO2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gZT1sZS5jYWxsKGRvY3VtZW50LGQubG9jYWxOYW1lKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoZSxiLnByb3RvdHlwZSksZS5fX0NFX3N0YXRlPTEsZS5fX0NFX2RlZmluaXRpb249ZCxhLmIoZSksZTtkPWUubGVuZ3RoLTE7dmFyIGY9ZVtkXTtpZihmPT09U2UpdGhyb3cgRXJyb3IoXCJUaGUgSFRNTEVsZW1lbnQgY29uc3RydWN0b3Igd2FzIGVpdGhlciBjYWxsZWQgcmVlbnRyYW50bHkgZm9yIHRoaXMgY29uc3RydWN0b3Igb3IgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlwiKTtcbmVbZF09U2U7T2JqZWN0LnNldFByb3RvdHlwZU9mKGYsYi5wcm90b3R5cGUpO2EuYihmKTtyZXR1cm4gZn1iLnByb3RvdHlwZT1PZS5wcm90b3R5cGU7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwiY29uc3RydWN0b3JcIix7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6Yn0pO3JldHVybiBifSgpfTtmdW5jdGlvbiBWZShhLGIsYyl7ZnVuY3Rpb24gZChiKXtyZXR1cm4gZnVuY3Rpb24oYyl7Zm9yKHZhciBkPVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7KytlKWRbZV09YXJndW1lbnRzW2VdO2U9W107Zm9yKHZhciBmPVtdLG09MDttPGQubGVuZ3RoO20rKyl7dmFyIG49ZFttXTtuIGluc3RhbmNlb2YgRWxlbWVudCYmTyhuKSYmZi5wdXNoKG4pO2lmKG4gaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihuPW4uZmlyc3RDaGlsZDtuO249bi5uZXh0U2libGluZyllLnB1c2gobik7ZWxzZSBlLnB1c2gobil9Yi5hcHBseSh0aGlzLGQpO2ZvcihkPTA7ZDxmLmxlbmd0aDtkKyspUihhLGZbZF0pO2lmKE8odGhpcykpZm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylmPWVbZF0sZiBpbnN0YW5jZW9mIEVsZW1lbnQmJlEoYSxmKX19dm9pZCAwIT09Yy5oYSYmKGIucHJlcGVuZD1kKGMuaGEpKTt2b2lkIDAhPT1jLmFwcGVuZCYmKGIuYXBwZW5kPWQoYy5hcHBlbmQpKX07ZnVuY3Rpb24gV2UoKXt2YXIgYT1VZTtQKERvY3VtZW50LnByb3RvdHlwZSxcImNyZWF0ZUVsZW1lbnRcIixmdW5jdGlvbihiKXtpZih0aGlzLl9fQ0VfaGFzUmVnaXN0cnkpe3ZhciBjPWEuYS5nZXQoYik7aWYoYylyZXR1cm4gbmV3IGMuY29uc3RydWN0b3J9Yj1sZS5jYWxsKHRoaXMsYik7YS5iKGIpO3JldHVybiBifSk7UChEb2N1bWVudC5wcm90b3R5cGUsXCJpbXBvcnROb2RlXCIsZnVuY3Rpb24oYixjKXtiPW5lLmNhbGwodGhpcyxiLGMpO3RoaXMuX19DRV9oYXNSZWdpc3RyeT9TKGEsYik6ZmUoYSxiKTtyZXR1cm4gYn0pO1AoRG9jdW1lbnQucHJvdG90eXBlLFwiY3JlYXRlRWxlbWVudE5TXCIsZnVuY3Rpb24oYixjKXtpZih0aGlzLl9fQ0VfaGFzUmVnaXN0cnkmJihudWxsPT09Ynx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1iKSl7dmFyIGQ9YS5hLmdldChjKTtpZihkKXJldHVybiBuZXcgZC5jb25zdHJ1Y3Rvcn1iPW1lLmNhbGwodGhpcyxiLGMpO2EuYihiKTtyZXR1cm4gYn0pO1xuVmUoYSxEb2N1bWVudC5wcm90b3R5cGUse2hhOm9lLGFwcGVuZDpwZX0pfTtmdW5jdGlvbiBYZSgpe2Z1bmN0aW9uIGEoYSxkKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcInRleHRDb250ZW50XCIse2VudW1lcmFibGU6ZC5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZC5nZXQsc2V0OmZ1bmN0aW9uKGEpe2lmKHRoaXMubm9kZVR5cGU9PT1Ob2RlLlRFWFRfTk9ERSlkLnNldC5jYWxsKHRoaXMsYSk7ZWxzZXt2YXIgYz12b2lkIDA7aWYodGhpcy5maXJzdENoaWxkKXt2YXIgZT10aGlzLmNoaWxkTm9kZXMsaD1lLmxlbmd0aDtpZigwPGgmJk8odGhpcykpe2M9QXJyYXkoaCk7Zm9yKHZhciBrPTA7azxoO2srKyljW2tdPWVba119fWQuc2V0LmNhbGwodGhpcyxhKTtpZihjKWZvcihhPTA7YTxjLmxlbmd0aDthKyspUihiLGNbYV0pfX19KX12YXIgYj1VZTtQKE5vZGUucHJvdG90eXBlLFwiaW5zZXJ0QmVmb3JlXCIsZnVuY3Rpb24oYSxkKXtpZihhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGEuY2hpbGROb2Rlcyk7XG5hPXVlLmNhbGwodGhpcyxhLGQpO2lmKE8odGhpcykpZm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylRKGIsY1tkXSk7cmV0dXJuIGF9Yz1PKGEpO2Q9dWUuY2FsbCh0aGlzLGEsZCk7YyYmUihiLGEpO08odGhpcykmJlEoYixhKTtyZXR1cm4gZH0pO1AoTm9kZS5wcm90b3R5cGUsXCJhcHBlbmRDaGlsZFwiLGZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYS5jaGlsZE5vZGVzKTthPXRlLmNhbGwodGhpcyxhKTtpZihPKHRoaXMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKVEoYixjW2VdKTtyZXR1cm4gYX1jPU8oYSk7ZT10ZS5jYWxsKHRoaXMsYSk7YyYmUihiLGEpO08odGhpcykmJlEoYixhKTtyZXR1cm4gZX0pO1AoTm9kZS5wcm90b3R5cGUsXCJjbG9uZU5vZGVcIixmdW5jdGlvbihhKXthPXNlLmNhbGwodGhpcyxhKTt0aGlzLm93bmVyRG9jdW1lbnQuX19DRV9oYXNSZWdpc3RyeT9TKGIsYSk6XG5mZShiLGEpO3JldHVybiBhfSk7UChOb2RlLnByb3RvdHlwZSxcInJlbW92ZUNoaWxkXCIsZnVuY3Rpb24oYSl7dmFyIGM9TyhhKSxlPXZlLmNhbGwodGhpcyxhKTtjJiZSKGIsYSk7cmV0dXJuIGV9KTtQKE5vZGUucHJvdG90eXBlLFwicmVwbGFjZUNoaWxkXCIsZnVuY3Rpb24oYSxkKXtpZihhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGEuY2hpbGROb2Rlcyk7YT13ZS5jYWxsKHRoaXMsYSxkKTtpZihPKHRoaXMpKWZvcihSKGIsZCksZD0wO2Q8Yy5sZW5ndGg7ZCsrKVEoYixjW2RdKTtyZXR1cm4gYX1jPU8oYSk7dmFyIGY9d2UuY2FsbCh0aGlzLGEsZCksZz1PKHRoaXMpO2cmJlIoYixkKTtjJiZSKGIsYSk7ZyYmUShiLGEpO3JldHVybiBmfSk7eGUmJnhlLmdldD9hKE5vZGUucHJvdG90eXBlLHhlKTplZShiLGZ1bmN0aW9uKGIpe2EoYix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBhPVxuW10sYj0wO2I8dGhpcy5jaGlsZE5vZGVzLmxlbmd0aDtiKyspYS5wdXNoKHRoaXMuY2hpbGROb2Rlc1tiXS50ZXh0Q29udGVudCk7cmV0dXJuIGEuam9pbihcIlwiKX0sc2V0OmZ1bmN0aW9uKGEpe2Zvcig7dGhpcy5maXJzdENoaWxkOyl2ZS5jYWxsKHRoaXMsdGhpcy5maXJzdENoaWxkKTt0ZS5jYWxsKHRoaXMsZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYSkpfX0pfSl9O2Z1bmN0aW9uIFllKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGZ1bmN0aW9uKGMpe2Zvcih2YXIgZD1bXSxlPTA7ZTxhcmd1bWVudHMubGVuZ3RoOysrZSlkW2VdPWFyZ3VtZW50c1tlXTtlPVtdO2Zvcih2YXIgaD1bXSxrPTA7azxkLmxlbmd0aDtrKyspe3ZhciBtPWRba107bSBpbnN0YW5jZW9mIEVsZW1lbnQmJk8obSkmJmgucHVzaChtKTtpZihtIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3IobT1tLmZpcnN0Q2hpbGQ7bTttPW0ubmV4dFNpYmxpbmcpZS5wdXNoKG0pO2Vsc2UgZS5wdXNoKG0pfWIuYXBwbHkodGhpcyxkKTtmb3IoZD0wO2Q8aC5sZW5ndGg7ZCsrKVIoYSxoW2RdKTtpZihPKHRoaXMpKWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspaD1lW2RdLGggaW5zdGFuY2VvZiBFbGVtZW50JiZRKGEsaCl9fXZhciBjPUVsZW1lbnQucHJvdG90eXBlO3ZvaWQgMCE9PUtlJiYoYy5iZWZvcmU9YihLZSkpO3ZvaWQgMCE9PUtlJiYoYy5hZnRlcj1iKExlKSk7dm9pZCAwIT09TWUmJlxuUChjLFwicmVwbGFjZVdpdGhcIixmdW5jdGlvbihiKXtmb3IodmFyIGM9W10sZD0wO2Q8YXJndW1lbnRzLmxlbmd0aDsrK2QpY1tkXT1hcmd1bWVudHNbZF07ZD1bXTtmb3IodmFyIGc9W10saD0wO2g8Yy5sZW5ndGg7aCsrKXt2YXIgaz1jW2hdO2sgaW5zdGFuY2VvZiBFbGVtZW50JiZPKGspJiZnLnB1c2goayk7aWYoayBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKGs9ay5maXJzdENoaWxkO2s7az1rLm5leHRTaWJsaW5nKWQucHVzaChrKTtlbHNlIGQucHVzaChrKX1oPU8odGhpcyk7TWUuYXBwbHkodGhpcyxjKTtmb3IoYz0wO2M8Zy5sZW5ndGg7YysrKVIoYSxnW2NdKTtpZihoKWZvcihSKGEsdGhpcyksYz0wO2M8ZC5sZW5ndGg7YysrKWc9ZFtjXSxnIGluc3RhbmNlb2YgRWxlbWVudCYmUShhLGcpfSk7dm9pZCAwIT09TmUmJlAoYyxcInJlbW92ZVwiLGZ1bmN0aW9uKCl7dmFyIGI9Tyh0aGlzKTtOZS5jYWxsKHRoaXMpO2ImJlIoYSx0aGlzKX0pfTtmdW5jdGlvbiBaZSgpe2Z1bmN0aW9uIGEoYSxiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcImlubmVySFRNTFwiLHtlbnVtZXJhYmxlOmIuZW51bWVyYWJsZSxjb25maWd1cmFibGU6ITAsZ2V0OmIuZ2V0LHNldDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLGU9dm9pZCAwO08odGhpcykmJihlPVtdLGJlKHRoaXMsZnVuY3Rpb24oYSl7YSE9PWMmJmUucHVzaChhKX0pKTtiLnNldC5jYWxsKHRoaXMsYSk7aWYoZSlmb3IodmFyIGY9MDtmPGUubGVuZ3RoO2YrKyl7dmFyIGc9ZVtmXTsxPT09Zy5fX0NFX3N0YXRlJiZkLmRpc2Nvbm5lY3RlZENhbGxiYWNrKGcpfXRoaXMub3duZXJEb2N1bWVudC5fX0NFX2hhc1JlZ2lzdHJ5P1MoZCx0aGlzKTpmZShkLHRoaXMpO3JldHVybiBhfX0pfWZ1bmN0aW9uIGIoYSxiKXtQKGEsXCJpbnNlcnRBZGphY2VudEVsZW1lbnRcIixmdW5jdGlvbihhLGMpe3ZhciBlPU8oYyk7YT1iLmNhbGwodGhpcyxhLGMpO2UmJlIoZCxjKTtPKGEpJiZRKGQsYyk7cmV0dXJuIGF9KX1cbmZ1bmN0aW9uIGMoYSxiKXtmdW5jdGlvbiBjKGEsYil7Zm9yKHZhciBjPVtdO2EhPT1iO2E9YS5uZXh0U2libGluZyljLnB1c2goYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylTKGQsY1tiXSl9UChhLFwiaW5zZXJ0QWRqYWNlbnRIVE1MXCIsZnVuY3Rpb24oYSxkKXthPWEudG9Mb3dlckNhc2UoKTtpZihcImJlZm9yZWJlZ2luXCI9PT1hKXt2YXIgZT10aGlzLnByZXZpb3VzU2libGluZztiLmNhbGwodGhpcyxhLGQpO2MoZXx8dGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQsdGhpcyl9ZWxzZSBpZihcImFmdGVyYmVnaW5cIj09PWEpZT10aGlzLmZpcnN0Q2hpbGQsYi5jYWxsKHRoaXMsYSxkKSxjKHRoaXMuZmlyc3RDaGlsZCxlKTtlbHNlIGlmKFwiYmVmb3JlZW5kXCI9PT1hKWU9dGhpcy5sYXN0Q2hpbGQsYi5jYWxsKHRoaXMsYSxkKSxjKGV8fHRoaXMuZmlyc3RDaGlsZCxudWxsKTtlbHNlIGlmKFwiYWZ0ZXJlbmRcIj09PWEpZT10aGlzLm5leHRTaWJsaW5nLGIuY2FsbCh0aGlzLGEsZCksYyh0aGlzLm5leHRTaWJsaW5nLFxuZSk7ZWxzZSB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgdmFsdWUgcHJvdmlkZWQgKFwiK1N0cmluZyhhKStcIikgaXMgbm90IG9uZSBvZiAnYmVmb3JlYmVnaW4nLCAnYWZ0ZXJiZWdpbicsICdiZWZvcmVlbmQnLCBvciAnYWZ0ZXJlbmQnLlwiKTt9KX12YXIgZD1VZTt5ZSYmUChFbGVtZW50LnByb3RvdHlwZSxcImF0dGFjaFNoYWRvd1wiLGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9fQ0Vfc2hhZG93Um9vdD1hPXllLmNhbGwodGhpcyxhKX0pO3plJiZ6ZS5nZXQ/YShFbGVtZW50LnByb3RvdHlwZSx6ZSk6UGUmJlBlLmdldD9hKEhUTUxFbGVtZW50LnByb3RvdHlwZSxQZSk6ZWUoZCxmdW5jdGlvbihiKXthKGIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzZS5jYWxsKHRoaXMsITApLmlubmVySFRNTH0sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPVwidGVtcGxhdGVcIj09PXRoaXMubG9jYWxOYW1lLGM9Yj90aGlzLmNvbnRlbnQ6dGhpcyxkPW1lLmNhbGwoZG9jdW1lbnQsXG50aGlzLm5hbWVzcGFjZVVSSSx0aGlzLmxvY2FsTmFtZSk7Zm9yKGQuaW5uZXJIVE1MPWE7MDxjLmNoaWxkTm9kZXMubGVuZ3RoOyl2ZS5jYWxsKGMsYy5jaGlsZE5vZGVzWzBdKTtmb3IoYT1iP2QuY29udGVudDpkOzA8YS5jaGlsZE5vZGVzLmxlbmd0aDspdGUuY2FsbChjLGEuY2hpbGROb2Rlc1swXSl9fSl9KTtQKEVsZW1lbnQucHJvdG90eXBlLFwic2V0QXR0cmlidXRlXCIsZnVuY3Rpb24oYSxiKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBCZS5jYWxsKHRoaXMsYSxiKTt2YXIgYz1BZS5jYWxsKHRoaXMsYSk7QmUuY2FsbCh0aGlzLGEsYik7Yj1BZS5jYWxsKHRoaXMsYSk7ZC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxhLGMsYixudWxsKX0pO1AoRWxlbWVudC5wcm90b3R5cGUsXCJzZXRBdHRyaWJ1dGVOU1wiLGZ1bmN0aW9uKGEsYixjKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBFZS5jYWxsKHRoaXMsYSxiLGMpO3ZhciBlPURlLmNhbGwodGhpcyxhLFxuYik7RWUuY2FsbCh0aGlzLGEsYixjKTtjPURlLmNhbGwodGhpcyxhLGIpO2QuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYixlLGMsYSl9KTtQKEVsZW1lbnQucHJvdG90eXBlLFwicmVtb3ZlQXR0cmlidXRlXCIsZnVuY3Rpb24oYSl7aWYoMSE9PXRoaXMuX19DRV9zdGF0ZSlyZXR1cm4gQ2UuY2FsbCh0aGlzLGEpO3ZhciBiPUFlLmNhbGwodGhpcyxhKTtDZS5jYWxsKHRoaXMsYSk7bnVsbCE9PWImJmQuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYSxiLG51bGwsbnVsbCl9KTtQKEVsZW1lbnQucHJvdG90eXBlLFwicmVtb3ZlQXR0cmlidXRlTlNcIixmdW5jdGlvbihhLGIpe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIEZlLmNhbGwodGhpcyxhLGIpO3ZhciBjPURlLmNhbGwodGhpcyxhLGIpO0ZlLmNhbGwodGhpcyxhLGIpO3ZhciBlPURlLmNhbGwodGhpcyxhLGIpO2MhPT1lJiZkLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLGIsYyxlLGEpfSk7UWU/YihIVE1MRWxlbWVudC5wcm90b3R5cGUsXG5RZSk6R2U/YihFbGVtZW50LnByb3RvdHlwZSxHZSk6Y29uc29sZS53YXJuKFwiQ3VzdG9tIEVsZW1lbnRzOiBgRWxlbWVudCNpbnNlcnRBZGphY2VudEVsZW1lbnRgIHdhcyBub3QgcGF0Y2hlZC5cIik7UmU/YyhIVE1MRWxlbWVudC5wcm90b3R5cGUsUmUpOkhlP2MoRWxlbWVudC5wcm90b3R5cGUsSGUpOmNvbnNvbGUud2FybihcIkN1c3RvbSBFbGVtZW50czogYEVsZW1lbnQjaW5zZXJ0QWRqYWNlbnRIVE1MYCB3YXMgbm90IHBhdGNoZWQuXCIpO1ZlKGQsRWxlbWVudC5wcm90b3R5cGUse2hhOkllLGFwcGVuZDpKZX0pO1llKGQpfTt2YXIgJGU9d2luZG93LmN1c3RvbUVsZW1lbnRzO2lmKCEkZXx8JGUuZm9yY2VQb2x5ZmlsbHx8XCJmdW5jdGlvblwiIT10eXBlb2YgJGUuZGVmaW5lfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiAkZS5nZXQpe3ZhciBVZT1uZXcgY2U7VGUoKTtXZSgpO1ZlKFVlLERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLHtoYTpxZSxhcHBlbmQ6cmV9KTtYZSgpO1plKCk7ZG9jdW1lbnQuX19DRV9oYXNSZWdpc3RyeT0hMDt2YXIgY3VzdG9tRWxlbWVudHM9bmV3IFQoVWUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csXCJjdXN0b21FbGVtZW50c1wiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx2YWx1ZTpjdXN0b21FbGVtZW50c30pfTtmdW5jdGlvbiBhZigpe3RoaXMuZW5kPXRoaXMuc3RhcnQ9MDt0aGlzLnJ1bGVzPXRoaXMucGFyZW50PXRoaXMucHJldmlvdXM9bnVsbDt0aGlzLmNzc1RleHQ9dGhpcy5wYXJzZWRDc3NUZXh0PVwiXCI7dGhpcy5hdFJ1bGU9ITE7dGhpcy50eXBlPTA7dGhpcy5wYXJzZWRTZWxlY3Rvcj10aGlzLnNlbGVjdG9yPXRoaXMua2V5ZnJhbWVzTmFtZT1cIlwifVxuZnVuY3Rpb24gYmYoYSl7YT1hLnJlcGxhY2UoY2YsXCJcIikucmVwbGFjZShkZixcIlwiKTt2YXIgYj1lZixjPWEsZD1uZXcgYWY7ZC5zdGFydD0wO2QuZW5kPWMubGVuZ3RoO2Zvcih2YXIgZT1kLGY9MCxnPWMubGVuZ3RoO2Y8ZztmKyspaWYoXCJ7XCI9PT1jW2ZdKXtlLnJ1bGVzfHwoZS5ydWxlcz1bXSk7dmFyIGg9ZSxrPWgucnVsZXNbaC5ydWxlcy5sZW5ndGgtMV18fG51bGw7ZT1uZXcgYWY7ZS5zdGFydD1mKzE7ZS5wYXJlbnQ9aDtlLnByZXZpb3VzPWs7aC5ydWxlcy5wdXNoKGUpfWVsc2VcIn1cIj09PWNbZl0mJihlLmVuZD1mKzEsZT1lLnBhcmVudHx8ZCk7cmV0dXJuIGIoZCxhKX1cbmZ1bmN0aW9uIGVmKGEsYil7dmFyIGM9Yi5zdWJzdHJpbmcoYS5zdGFydCxhLmVuZC0xKTthLnBhcnNlZENzc1RleHQ9YS5jc3NUZXh0PWMudHJpbSgpO2EucGFyZW50JiYoYz1iLnN1YnN0cmluZyhhLnByZXZpb3VzP2EucHJldmlvdXMuZW5kOmEucGFyZW50LnN0YXJ0LGEuc3RhcnQtMSksYz1mZihjKSxjPWMucmVwbGFjZShnZixcIiBcIiksYz1jLnN1YnN0cmluZyhjLmxhc3RJbmRleE9mKFwiO1wiKSsxKSxjPWEucGFyc2VkU2VsZWN0b3I9YS5zZWxlY3Rvcj1jLnRyaW0oKSxhLmF0UnVsZT0wPT09Yy5pbmRleE9mKFwiQFwiKSxhLmF0UnVsZT8wPT09Yy5pbmRleE9mKFwiQG1lZGlhXCIpP2EudHlwZT1oZjpjLm1hdGNoKHNmKSYmKGEudHlwZT10ZixhLmtleWZyYW1lc05hbWU9YS5zZWxlY3Rvci5zcGxpdChnZikucG9wKCkpOmEudHlwZT0wPT09Yy5pbmRleE9mKFwiLS1cIik/dWY6dmYpO2lmKGM9YS5ydWxlcylmb3IodmFyIGQ9MCxlPWMubGVuZ3RoLGY7ZDxlJiYoZj1jW2RdKTtkKyspZWYoZixcbmIpO3JldHVybiBhfWZ1bmN0aW9uIGZmKGEpe3JldHVybiBhLnJlcGxhY2UoL1xcXFwoWzAtOWEtZl17MSw2fSlcXHMvZ2ksZnVuY3Rpb24oYSxjKXthPWM7Zm9yKGM9Ni1hLmxlbmd0aDtjLS07KWE9XCIwXCIrYTtyZXR1cm5cIlxcXFxcIithfSl9XG5mdW5jdGlvbiB3ZihhLGIsYyl7Yz12b2lkIDA9PT1jP1wiXCI6Yzt2YXIgZD1cIlwiO2lmKGEuY3NzVGV4dHx8YS5ydWxlcyl7dmFyIGU9YS5ydWxlcyxmO2lmKGY9ZSlmPWVbMF0sZj0hKGYmJmYuc2VsZWN0b3ImJjA9PT1mLnNlbGVjdG9yLmluZGV4T2YoXCItLVwiKSk7aWYoZil7Zj0wO2Zvcih2YXIgZz1lLmxlbmd0aCxoO2Y8ZyYmKGg9ZVtmXSk7ZisrKWQ9d2YoaCxiLGQpfWVsc2UgYj9iPWEuY3NzVGV4dDooYj1hLmNzc1RleHQsYj1iLnJlcGxhY2UoeGYsXCJcIikucmVwbGFjZSh5ZixcIlwiKSxiPWIucmVwbGFjZSh6ZixcIlwiKS5yZXBsYWNlKEFmLFwiXCIpKSwoZD1iLnRyaW0oKSkmJihkPVwiICBcIitkK1wiXFxuXCIpfWQmJihhLnNlbGVjdG9yJiYoYys9YS5zZWxlY3RvcitcIiB7XFxuXCIpLGMrPWQsYS5zZWxlY3RvciYmKGMrPVwifVxcblxcblwiKSk7cmV0dXJuIGN9XG52YXIgdmY9MSx0Zj03LGhmPTQsdWY9MUUzLGNmPS9cXC9cXCpbXipdKlxcKisoW14vKl1bXipdKlxcKispKlxcLy9naW0sZGY9L0BpbXBvcnRbXjtdKjsvZ2ltLHhmPS8oPzpeW147XFwtXFxzfV0rKT8tLVteO3t9XSo/Oltee307XSo/KD86WztcXG5dfCQpL2dpbSx5Zj0vKD86XlteO1xcLVxcc31dKyk/LS1bXjt7fV0qPzpbXnt9O10qP3tbXn1dKj99KD86WztcXG5dfCQpPy9naW0semY9L0BhcHBseVxccypcXCg/W14pO10qXFwpP1xccyooPzpbO1xcbl18JCk/L2dpbSxBZj0vW147Ol0qPzpbXjtdKj92YXJcXChbXjtdKlxcKSg/Ols7XFxuXXwkKT8vZ2ltLHNmPS9eQFteXFxzXSprZXlmcmFtZXMvLGdmPS9cXHMrL2c7dmFyIFU9ISh3aW5kb3cuU2hhZHlET00mJndpbmRvdy5TaGFkeURPTS5pblVzZSksQmY7ZnVuY3Rpb24gQ2YoYSl7QmY9YSYmYS5zaGltY3NzcHJvcGVydGllcz8hMTpVfHwhKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvNjAxfEVkZ2VcXC8xNS8pfHwhd2luZG93LkNTU3x8IUNTUy5zdXBwb3J0c3x8IUNTUy5zdXBwb3J0cyhcImJveC1zaGFkb3dcIixcIjAgMCAwIHZhcigtLWZvbylcIikpfXdpbmRvdy5TaGFkeUNTUyYmdm9pZCAwIT09d2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzcz9CZj13aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzOndpbmRvdy5TaGFkeUNTUz8oQ2Yod2luZG93LlNoYWR5Q1NTKSx3aW5kb3cuU2hhZHlDU1M9dm9pZCAwKTpDZih3aW5kb3cuV2ViQ29tcG9uZW50cyYmd2luZG93LldlYkNvbXBvbmVudHMuZmxhZ3MpO3ZhciBWPUJmO3ZhciBEZj0vKD86XnxbO1xcc3tdXFxzKikoLS1bXFx3LV0qPylcXHMqOlxccyooPzooKD86Jyg/OlxcXFwnfC4pKj8nfFwiKD86XFxcXFwifC4pKj9cInxcXChbXildKj9cXCl8W159O3tdKSspfFxceyhbXn1dKilcXH0oPzooPz1bO1xcc31dKXwkKSkvZ2ksRWY9Lyg/Ol58XFxXKylAYXBwbHlcXHMqXFwoPyhbXik7XFxuXSopXFwpPy9naSxGZj0vKC0tW1xcdy1dKylcXHMqKFs6LDspXXwkKS9naSxHZj0vKGFuaW1hdGlvblxccyo6KXwoYW5pbWF0aW9uLW5hbWVcXHMqOikvLEhmPS9AbWVkaWFcXHMoLiopLyxJZj0vXFx7W159XSpcXH0vZzt2YXIgSmY9bmV3IFNldDtmdW5jdGlvbiBLZihhLGIpe2lmKCFhKXJldHVyblwiXCI7XCJzdHJpbmdcIj09PXR5cGVvZiBhJiYoYT1iZihhKSk7YiYmTGYoYSxiKTtyZXR1cm4gd2YoYSxWKX1mdW5jdGlvbiBNZihhKXshYS5fX2Nzc1J1bGVzJiZhLnRleHRDb250ZW50JiYoYS5fX2Nzc1J1bGVzPWJmKGEudGV4dENvbnRlbnQpKTtyZXR1cm4gYS5fX2Nzc1J1bGVzfHxudWxsfWZ1bmN0aW9uIE5mKGEpe3JldHVybiEhYS5wYXJlbnQmJmEucGFyZW50LnR5cGU9PT10Zn1mdW5jdGlvbiBMZihhLGIsYyxkKXtpZihhKXt2YXIgZT0hMSxmPWEudHlwZTtpZihkJiZmPT09aGYpe3ZhciBnPWEuc2VsZWN0b3IubWF0Y2goSGYpO2cmJih3aW5kb3cubWF0Y2hNZWRpYShnWzFdKS5tYXRjaGVzfHwoZT0hMCkpfWY9PT12Zj9iKGEpOmMmJmY9PT10Zj9jKGEpOmY9PT11ZiYmKGU9ITApO2lmKChhPWEucnVsZXMpJiYhZSl7ZT0wO2Y9YS5sZW5ndGg7Zm9yKHZhciBoO2U8ZiYmKGg9YVtlXSk7ZSsrKUxmKGgsYixjLGQpfX19XG5mdW5jdGlvbiBPZihhLGIsYyxkKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7YiYmZS5zZXRBdHRyaWJ1dGUoXCJzY29wZVwiLGIpO2UudGV4dENvbnRlbnQ9YTtQZihlLGMsZCk7cmV0dXJuIGV9dmFyIFFmPW51bGw7ZnVuY3Rpb24gUGYoYSxiLGMpe2I9Ynx8ZG9jdW1lbnQuaGVhZDtiLmluc2VydEJlZm9yZShhLGMmJmMubmV4dFNpYmxpbmd8fGIuZmlyc3RDaGlsZCk7UWY/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihRZik9PT1Ob2RlLkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyYmKFFmPWEpOlFmPWF9XG5mdW5jdGlvbiBSZihhLGIpe3ZhciBjPWEuaW5kZXhPZihcInZhcihcIik7aWYoLTE9PT1jKXJldHVybiBiKGEsXCJcIixcIlwiLFwiXCIpO2E6e3ZhciBkPTA7dmFyIGU9YyszO2Zvcih2YXIgZj1hLmxlbmd0aDtlPGY7ZSsrKWlmKFwiKFwiPT09YVtlXSlkKys7ZWxzZSBpZihcIilcIj09PWFbZV0mJjA9PT0tLWQpYnJlYWsgYTtlPS0xfWQ9YS5zdWJzdHJpbmcoYys0LGUpO2M9YS5zdWJzdHJpbmcoMCxjKTthPVJmKGEuc3Vic3RyaW5nKGUrMSksYik7ZT1kLmluZGV4T2YoXCIsXCIpO3JldHVybi0xPT09ZT9iKGMsZC50cmltKCksXCJcIixhKTpiKGMsZC5zdWJzdHJpbmcoMCxlKS50cmltKCksZC5zdWJzdHJpbmcoZSsxKS50cmltKCksYSl9ZnVuY3Rpb24gU2YoYSxiKXtVP2Euc2V0QXR0cmlidXRlKFwiY2xhc3NcIixiKTp3aW5kb3cuU2hhZHlET00ubmF0aXZlTWV0aG9kcy5zZXRBdHRyaWJ1dGUuY2FsbChhLFwiY2xhc3NcIixiKX1cbmZ1bmN0aW9uIFRmKGEpe3ZhciBiPWEubG9jYWxOYW1lLGM9XCJcIjtiPy0xPGIuaW5kZXhPZihcIi1cIil8fChjPWIsYj1hLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJpc1wiKXx8XCJcIik6KGI9YS5pcyxjPWEuZXh0ZW5kcyk7cmV0dXJue2lzOmIsWTpjfX07ZnVuY3Rpb24gVWYoKXt9ZnVuY3Rpb24gVmYoYSxiLGMpe3ZhciBkPVc7YS5fX3N0eWxlU2NvcGVkP2EuX19zdHlsZVNjb3BlZD1udWxsOldmKGQsYSxifHxcIlwiLGMpfWZ1bmN0aW9uIFdmKGEsYixjLGQpe2Iubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmWGYoYixjLGQpO2lmKGI9XCJ0ZW1wbGF0ZVwiPT09Yi5sb2NhbE5hbWU/KGIuY29udGVudHx8Yi5xYnx8YikuY2hpbGROb2RlczpiLmNoaWxkcmVufHxiLmNoaWxkTm9kZXMpZm9yKHZhciBlPTA7ZTxiLmxlbmd0aDtlKyspV2YoYSxiW2VdLGMsZCl9XG5mdW5jdGlvbiBYZihhLGIsYyl7aWYoYilpZihhLmNsYXNzTGlzdCljPyhhLmNsYXNzTGlzdC5yZW1vdmUoXCJzdHlsZS1zY29wZVwiKSxhLmNsYXNzTGlzdC5yZW1vdmUoYikpOihhLmNsYXNzTGlzdC5hZGQoXCJzdHlsZS1zY29wZVwiKSxhLmNsYXNzTGlzdC5hZGQoYikpO2Vsc2UgaWYoYS5nZXRBdHRyaWJ1dGUpe3ZhciBkPWEuZ2V0QXR0cmlidXRlKFlmKTtjP2QmJihiPWQucmVwbGFjZShcInN0eWxlLXNjb3BlXCIsXCJcIikucmVwbGFjZShiLFwiXCIpLFNmKGEsYikpOlNmKGEsKGQ/ZCtcIiBcIjpcIlwiKStcInN0eWxlLXNjb3BlIFwiK2IpfX1mdW5jdGlvbiBaZihhLGIsYyl7dmFyIGQ9VyxlPWEuX19jc3NCdWlsZDtVfHxcInNoYWR5XCI9PT1lP2I9S2YoYixjKTooYT1UZihhKSxiPSRmKGQsYixhLmlzLGEuWSxjKStcIlxcblxcblwiKTtyZXR1cm4gYi50cmltKCl9XG5mdW5jdGlvbiAkZihhLGIsYyxkLGUpe3ZhciBmPWFnKGMsZCk7Yz1jP2JnK2M6XCJcIjtyZXR1cm4gS2YoYixmdW5jdGlvbihiKXtiLmN8fChiLnNlbGVjdG9yPWIuRz1jZyhhLGIsYS5iLGMsZiksYi5jPSEwKTtlJiZlKGIsYyxmKX0pfWZ1bmN0aW9uIGFnKGEsYil7cmV0dXJuIGI/XCJbaXM9XCIrYStcIl1cIjphfWZ1bmN0aW9uIGNnKGEsYixjLGQsZSl7dmFyIGY9Yi5zZWxlY3Rvci5zcGxpdChkZyk7aWYoIU5mKGIpKXtiPTA7Zm9yKHZhciBnPWYubGVuZ3RoLGg7YjxnJiYoaD1mW2JdKTtiKyspZltiXT1jLmNhbGwoYSxoLGQsZSl9cmV0dXJuIGYuam9pbihkZyl9ZnVuY3Rpb24gZWcoYSl7cmV0dXJuIGEucmVwbGFjZShmZyxmdW5jdGlvbihhLGMsZCl7LTE8ZC5pbmRleE9mKFwiK1wiKT9kPWQucmVwbGFjZSgvXFwrL2csXCJfX19cIik6LTE8ZC5pbmRleE9mKFwiX19fXCIpJiYoZD1kLnJlcGxhY2UoL19fXy9nLFwiK1wiKSk7cmV0dXJuXCI6XCIrYytcIihcIitkK1wiKVwifSl9XG5VZi5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ITE7YT1hLnRyaW0oKTt2YXIgZT1mZy50ZXN0KGEpO2UmJihhPWEucmVwbGFjZShmZyxmdW5jdGlvbihhLGIsYyl7cmV0dXJuXCI6XCIrYitcIihcIitjLnJlcGxhY2UoL1xccy9nLFwiXCIpK1wiKVwifSksYT1lZyhhKSk7YT1hLnJlcGxhY2UoZ2csaGcrXCIgJDFcIik7YT1hLnJlcGxhY2UoaWcsZnVuY3Rpb24oYSxlLGgpe2R8fChhPWpnKGgsZSxiLGMpLGQ9ZHx8YS5zdG9wLGU9YS5WYSxoPWEudmFsdWUpO3JldHVybiBlK2h9KTtlJiYoYT1lZyhhKSk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gamcoYSxiLGMsZCl7dmFyIGU9YS5pbmRleE9mKGtnKTswPD1hLmluZGV4T2YoaGcpP2E9bGcoYSxkKTowIT09ZSYmKGE9Yz9tZyhhLGMpOmEpO2M9ITE7MDw9ZSYmKGI9XCJcIixjPSEwKTtpZihjKXt2YXIgZj0hMDtjJiYoYT1hLnJlcGxhY2UobmcsZnVuY3Rpb24oYSxiKXtyZXR1cm5cIiA+IFwiK2J9KSl9YT1hLnJlcGxhY2Uob2csZnVuY3Rpb24oYSxiLGMpe3JldHVybidbZGlyPVwiJytjKydcIl0gJytiK1wiLCBcIitiKydbZGlyPVwiJytjKydcIl0nfSk7cmV0dXJue3ZhbHVlOmEsVmE6YixzdG9wOmZ9fWZ1bmN0aW9uIG1nKGEsYil7YT1hLnNwbGl0KHBnKTthWzBdKz1iO3JldHVybiBhLmpvaW4ocGcpfVxuZnVuY3Rpb24gbGcoYSxiKXt2YXIgYz1hLm1hdGNoKHFnKTtyZXR1cm4oYz1jJiZjWzJdLnRyaW0oKXx8XCJcIik/Y1swXS5tYXRjaChyZyk/YS5yZXBsYWNlKHFnLGZ1bmN0aW9uKGEsYyxmKXtyZXR1cm4gYitmfSk6Yy5zcGxpdChyZylbMF09PT1iP2M6c2c6YS5yZXBsYWNlKGhnLGIpfWZ1bmN0aW9uIHRnKGEpe2Euc2VsZWN0b3I9PT11ZyYmKGEuc2VsZWN0b3I9XCJodG1sXCIpfVVmLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEpe3JldHVybiBhLm1hdGNoKGtnKT90aGlzLmIoYSx2Zyk6bWcoYS50cmltKCksdmcpfTtiYS5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhVZi5wcm90b3R5cGUse2E6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVyblwic3R5bGUtc2NvcGVcIn19fSk7XG52YXIgZmc9LzoobnRoWy1cXHddKylcXCgoW14pXSspXFwpLyx2Zz1cIjpub3QoLnN0eWxlLXNjb3BlKVwiLGRnPVwiLFwiLGlnPS8oXnxbXFxzPit+XSspKCg/OlxcWy4rP1xcXXxbXlxccz4rfj1bXSkrKS9nLHJnPS9bWy46IypdLyxoZz1cIjpob3N0XCIsdWc9XCI6cm9vdFwiLGtnPVwiOjpzbG90dGVkXCIsZ2c9bmV3IFJlZ0V4cChcIl4oXCIra2crXCIpXCIpLHFnPS8oOmhvc3QpKD86XFwoKCg/OlxcKFteKShdKlxcKXxbXikoXSopKz8pXFwpKS8sbmc9Lyg/Ojo6c2xvdHRlZCkoPzpcXCgoKD86XFwoW14pKF0qXFwpfFteKShdKikrPylcXCkpLyxvZz0vKC4qKTpkaXJcXCgoPzoobHRyfHJ0bCkpXFwpLyxiZz1cIi5cIixwZz1cIjpcIixZZj1cImNsYXNzXCIsc2c9XCJzaG91bGRfbm90X21hdGNoXCIsVz1uZXcgVWY7ZnVuY3Rpb24gd2coYSxiLGMsZCl7dGhpcy5NPWF8fG51bGw7dGhpcy5iPWJ8fG51bGw7dGhpcy51YT1jfHxbXTt0aGlzLlU9bnVsbDt0aGlzLlk9ZHx8XCJcIjt0aGlzLmE9dGhpcy5JPXRoaXMuTz1udWxsfWZ1bmN0aW9uIFgoYSl7cmV0dXJuIGE/YS5fX3N0eWxlSW5mbzpudWxsfWZ1bmN0aW9uIHhnKGEsYil7cmV0dXJuIGEuX19zdHlsZUluZm89Yn13Zy5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLk19O3dnLnByb3RvdHlwZS5fZ2V0U3R5bGVSdWxlcz13Zy5wcm90b3R5cGUuYztmdW5jdGlvbiB5ZyhhKXt2YXIgYj10aGlzLm1hdGNoZXN8fHRoaXMubWF0Y2hlc1NlbGVjdG9yfHx0aGlzLm1vek1hdGNoZXNTZWxlY3Rvcnx8dGhpcy5tc01hdGNoZXNTZWxlY3Rvcnx8dGhpcy5vTWF0Y2hlc1NlbGVjdG9yfHx0aGlzLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtyZXR1cm4gYiYmYi5jYWxsKHRoaXMsYSl9dmFyIHpnPW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goXCJUcmlkZW50XCIpO2Z1bmN0aW9uIEFnKCl7fWZ1bmN0aW9uIEJnKGEpe3ZhciBiPXt9LGM9W10sZD0wO0xmKGEsZnVuY3Rpb24oYSl7Q2coYSk7YS5pbmRleD1kKys7YT1hLkMuY3NzVGV4dDtmb3IodmFyIGM7Yz1GZi5leGVjKGEpOyl7dmFyIGU9Y1sxXTtcIjpcIiE9PWNbMl0mJihiW2VdPSEwKX19LGZ1bmN0aW9uKGEpe2MucHVzaChhKX0pO2EuYj1jO2E9W107Zm9yKHZhciBlIGluIGIpYS5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gQ2coYSl7aWYoIWEuQyl7dmFyIGI9e30sYz17fTtEZyhhLGMpJiYoYi5MPWMsYS5ydWxlcz1udWxsKTtiLmNzc1RleHQ9YS5wYXJzZWRDc3NUZXh0LnJlcGxhY2UoSWYsXCJcIikucmVwbGFjZShEZixcIlwiKTthLkM9Yn19ZnVuY3Rpb24gRGcoYSxiKXt2YXIgYz1hLkM7aWYoYyl7aWYoYy5MKXJldHVybiBPYmplY3QuYXNzaWduKGIsYy5MKSwhMH1lbHNle2M9YS5wYXJzZWRDc3NUZXh0O2Zvcih2YXIgZDthPURmLmV4ZWMoYyk7KXtkPShhWzJdfHxhWzNdKS50cmltKCk7aWYoXCJpbmhlcml0XCIhPT1kfHxcInVuc2V0XCIhPT1kKWJbYVsxXS50cmltKCldPWQ7ZD0hMH1yZXR1cm4gZH19XG5mdW5jdGlvbiBFZyhhLGIsYyl7YiYmKGI9MDw9Yi5pbmRleE9mKFwiO1wiKT9GZyhhLGIsYyk6UmYoYixmdW5jdGlvbihiLGUsZixnKXtpZighZSlyZXR1cm4gYitnOyhlPUVnKGEsY1tlXSxjKSkmJlwiaW5pdGlhbFwiIT09ZT9cImFwcGx5LXNoaW0taW5oZXJpdFwiPT09ZSYmKGU9XCJpbmhlcml0XCIpOmU9RWcoYSxjW2ZdfHxmLGMpfHxmO3JldHVybiBiKyhlfHxcIlwiKStnfSkpO3JldHVybiBiJiZiLnRyaW0oKXx8XCJcIn1cbmZ1bmN0aW9uIEZnKGEsYixjKXtiPWIuc3BsaXQoXCI7XCIpO2Zvcih2YXIgZD0wLGUsZjtkPGIubGVuZ3RoO2QrKylpZihlPWJbZF0pe0VmLmxhc3RJbmRleD0wO2lmKGY9RWYuZXhlYyhlKSllPUVnKGEsY1tmWzFdXSxjKTtlbHNlIGlmKGY9ZS5pbmRleE9mKFwiOlwiKSwtMSE9PWYpe3ZhciBnPWUuc3Vic3RyaW5nKGYpO2c9Zy50cmltKCk7Zz1FZyhhLGcsYyl8fGc7ZT1lLnN1YnN0cmluZygwLGYpK2d9YltkXT1lJiZlLmxhc3RJbmRleE9mKFwiO1wiKT09PWUubGVuZ3RoLTE/ZS5zbGljZSgwLC0xKTplfHxcIlwifXJldHVybiBiLmpvaW4oXCI7XCIpfVxuZnVuY3Rpb24gR2coYSxiKXt2YXIgYz17fSxkPVtdO0xmKGEsZnVuY3Rpb24oYSl7YS5DfHxDZyhhKTt2YXIgZT1hLkd8fGEucGFyc2VkU2VsZWN0b3I7YiYmYS5DLkwmJmUmJnlnLmNhbGwoYixlKSYmKERnKGEsYyksYT1hLmluZGV4LGU9cGFyc2VJbnQoYS8zMiwxMCksZFtlXT0oZFtlXXx8MCl8MTw8YSUzMil9LG51bGwsITApO3JldHVybntMOmMsa2V5OmR9fVxuZnVuY3Rpb24gSGcoYSxiLGMsZCl7Yi5DfHxDZyhiKTtpZihiLkMuTCl7dmFyIGU9VGYoYSk7YT1lLmlzO2U9ZS5ZO2U9YT9hZyhhLGUpOlwiaHRtbFwiO3ZhciBmPWIucGFyc2VkU2VsZWN0b3IsZz1cIjpob3N0ID4gKlwiPT09Znx8XCJodG1sXCI9PT1mLGg9MD09PWYuaW5kZXhPZihcIjpob3N0XCIpJiYhZztcInNoYWR5XCI9PT1jJiYoZz1mPT09ZStcIiA+ICouXCIrZXx8LTEhPT1mLmluZGV4T2YoXCJodG1sXCIpLGg9IWcmJjA9PT1mLmluZGV4T2YoZSkpO1wic2hhZG93XCI9PT1jJiYoZz1cIjpob3N0ID4gKlwiPT09Znx8XCJodG1sXCI9PT1mLGg9aCYmIWcpO2lmKGd8fGgpYz1lLGgmJihiLkd8fChiLkc9Y2coVyxiLFcuYixhP2JnK2E6XCJcIixlKSksYz1iLkd8fGUpLGQoe2diOmMsYWI6aCxEYjpnfSl9fVxuZnVuY3Rpb24gSWcoYSxiKXt2YXIgYz17fSxkPXt9LGU9YiYmYi5fX2Nzc0J1aWxkO0xmKGIsZnVuY3Rpb24oYil7SGcoYSxiLGUsZnVuY3Rpb24oZSl7eWcuY2FsbChhLnJifHxhLGUuZ2IpJiYoZS5hYj9EZyhiLGMpOkRnKGIsZCkpfSl9LG51bGwsITApO3JldHVybntmYjpkLFphOmN9fVxuZnVuY3Rpb24gSmcoYSxiLGMsZCl7dmFyIGU9VGYoYiksZj1hZyhlLmlzLGUuWSksZz1uZXcgUmVnRXhwKFwiKD86XnxbXi4jWzpdKVwiKyhiLmV4dGVuZHM/XCJcXFxcXCIrZi5zbGljZSgwLC0xKStcIlxcXFxdXCI6ZikrXCIoJHxbLjpbXFxcXHM+K35dKVwiKTtlPVgoYikuTTt2YXIgaD1LZyhlLGQpO3JldHVybiBaZihiLGUsZnVuY3Rpb24oYil7dmFyIGU9XCJcIjtiLkN8fENnKGIpO2IuQy5jc3NUZXh0JiYoZT1GZyhhLGIuQy5jc3NUZXh0LGMpKTtiLmNzc1RleHQ9ZTtpZighVSYmIU5mKGIpJiZiLmNzc1RleHQpe3ZhciBrPWU9Yi5jc3NUZXh0O251bGw9PWIuQ2EmJihiLkNhPUdmLnRlc3QoZSkpO2lmKGIuQ2EpaWYobnVsbD09Yi5nYSl7Yi5nYT1bXTtmb3IodmFyIHAgaW4gaClrPWhbcF0saz1rKGUpLGUhPT1rJiYoZT1rLGIuZ2EucHVzaChwKSl9ZWxzZXtmb3IocD0wO3A8Yi5nYS5sZW5ndGg7KytwKWs9aFtiLmdhW3BdXSxlPWsoZSk7az1lfWIuY3NzVGV4dD1rO2IuRz1iLkd8fGIuc2VsZWN0b3I7ZT1cblwiLlwiK2Q7cD1iLkcuc3BsaXQoXCIsXCIpO2s9MDtmb3IodmFyIEc9cC5sZW5ndGgsQjtrPEcmJihCPXBba10pO2srKylwW2tdPUIubWF0Y2goZyk/Qi5yZXBsYWNlKGYsZSk6ZStcIiBcIitCO2Iuc2VsZWN0b3I9cC5qb2luKFwiLFwiKX19KX1mdW5jdGlvbiBLZyhhLGIpe2E9YS5iO3ZhciBjPXt9O2lmKCFVJiZhKWZvcih2YXIgZD0wLGU9YVtkXTtkPGEubGVuZ3RoO2U9YVsrK2RdKXt2YXIgZj1lLGc9YjtmLmY9bmV3IFJlZ0V4cChcIlxcXFxiXCIrZi5rZXlmcmFtZXNOYW1lK1wiKD8hXFxcXEJ8LSlcIixcImdcIik7Zi5hPWYua2V5ZnJhbWVzTmFtZStcIi1cIitnO2YuRz1mLkd8fGYuc2VsZWN0b3I7Zi5zZWxlY3Rvcj1mLkcucmVwbGFjZShmLmtleWZyYW1lc05hbWUsZi5hKTtjW2Uua2V5ZnJhbWVzTmFtZV09TGcoZSl9cmV0dXJuIGN9ZnVuY3Rpb24gTGcoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBiLnJlcGxhY2UoYS5mLGEuYSl9fVxuZnVuY3Rpb24gTWcoYSxiKXt2YXIgYz1OZyxkPU1mKGEpO2EudGV4dENvbnRlbnQ9S2YoZCxmdW5jdGlvbihhKXt2YXIgZD1hLmNzc1RleHQ9YS5wYXJzZWRDc3NUZXh0O2EuQyYmYS5DLmNzc1RleHQmJihkPWQucmVwbGFjZSh4ZixcIlwiKS5yZXBsYWNlKHlmLFwiXCIpLGEuY3NzVGV4dD1GZyhjLGQsYikpfSl9YmEuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQWcucHJvdG90eXBlLHthOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIngtc2NvcGVcIn19fSk7dmFyIE5nPW5ldyBBZzt2YXIgT2c9e30sUGc9d2luZG93LmN1c3RvbUVsZW1lbnRzO2lmKFBnJiYhVSl7dmFyIFFnPVBnLmRlZmluZTtQZy5kZWZpbmU9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCIgU2hhZHkgRE9NIHN0eWxlcyBmb3IgXCIrYStcIiBcIiksZT1kb2N1bWVudC5oZWFkO2UuaW5zZXJ0QmVmb3JlKGQsKFFmP1FmLm5leHRTaWJsaW5nOm51bGwpfHxlLmZpcnN0Q2hpbGQpO1FmPWQ7T2dbYV09ZDtRZy5jYWxsKFBnLGEsYixjKX19O2Z1bmN0aW9uIFJnKCl7dGhpcy5jYWNoZT17fX1SZy5wcm90b3R5cGUuc3RvcmU9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcy5jYWNoZVthXXx8W107ZS5wdXNoKHtMOmIsc3R5bGVFbGVtZW50OmMsSTpkfSk7MTAwPGUubGVuZ3RoJiZlLnNoaWZ0KCk7dGhpcy5jYWNoZVthXT1lfTtSZy5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24oYSxiLGMpe2lmKGE9dGhpcy5jYWNoZVthXSlmb3IodmFyIGQ9YS5sZW5ndGgtMTswPD1kO2QtLSl7dmFyIGU9YVtkXSxmO2E6e2ZvcihmPTA7ZjxjLmxlbmd0aDtmKyspe3ZhciBnPWNbZl07aWYoZS5MW2ddIT09YltnXSl7Zj0hMTticmVhayBhfX1mPSEwfWlmKGYpcmV0dXJuIGV9fTtmdW5jdGlvbiBTZygpe31cbmZ1bmN0aW9uIFRnKGEpe2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO2lmKGMudGFyZ2V0IT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZjLnRhcmdldCE9PWRvY3VtZW50LmhlYWQpZm9yKHZhciBkPTA7ZDxjLmFkZGVkTm9kZXMubGVuZ3RoO2QrKyl7dmFyIGU9Yy5hZGRlZE5vZGVzW2RdO2lmKGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSl7dmFyIGY9ZS5nZXRSb290Tm9kZSgpO3ZhciBnPWU7dmFyIGg9W107Zy5jbGFzc0xpc3Q/aD1BcnJheS5mcm9tKGcuY2xhc3NMaXN0KTpnIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQmJmcuaGFzQXR0cmlidXRlKFwiY2xhc3NcIikmJihoPWcuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikuc3BsaXQoL1xccysvKSk7Zz1oO2g9Zy5pbmRleE9mKFcuYSk7aWYoKGc9LTE8aD9nW2grMV06XCJcIikmJmY9PT1lLm93bmVyRG9jdW1lbnQpVmYoZSxnLCEwKTtlbHNlIGlmKGYubm9kZVR5cGU9PT1Ob2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUmJlxuKGY9Zi5ob3N0KSlpZihmPVRmKGYpLmlzLGc9PT1mKWZvcihlPXdpbmRvdy5TaGFkeURPTS5uYXRpdmVNZXRob2RzLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbChlLFwiOm5vdCguXCIrVy5hK1wiKVwiKSxmPTA7ZjxlLmxlbmd0aDtmKyspWGYoZVtmXSxnKTtlbHNlIGcmJlZmKGUsZywhMCksVmYoZSxmKX19fX1cbmlmKCFVKXt2YXIgVWc9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoVGcpLFZnPWZ1bmN0aW9uKGEpe1VnLm9ic2VydmUoYSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KX07aWYod2luZG93LmN1c3RvbUVsZW1lbnRzJiYhd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2spVmcoZG9jdW1lbnQpO2Vsc2V7dmFyIFdnPWZ1bmN0aW9uKCl7VmcoZG9jdW1lbnQuYm9keSl9O3dpbmRvdy5IVE1MSW1wb3J0cz93aW5kb3cuSFRNTEltcG9ydHMud2hlblJlYWR5KFdnKTpyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXtpZihcImxvYWRpbmdcIj09PWRvY3VtZW50LnJlYWR5U3RhdGUpe3ZhciBhPWZ1bmN0aW9uKCl7V2coKTtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLGEpfTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLGEpfWVsc2UgV2coKX0pfVNnPWZ1bmN0aW9uKCl7VGcoVWcudGFrZVJlY29yZHMoKSl9fVxudmFyIFhnPVNnO3ZhciBZZz17fTt2YXIgWmc9UHJvbWlzZS5yZXNvbHZlKCk7ZnVuY3Rpb24gJGcoYSl7aWYoYT1ZZ1thXSlhLl9hcHBseVNoaW1DdXJyZW50VmVyc2lvbj1hLl9hcHBseVNoaW1DdXJyZW50VmVyc2lvbnx8MCxhLl9hcHBseVNoaW1WYWxpZGF0aW5nVmVyc2lvbj1hLl9hcHBseVNoaW1WYWxpZGF0aW5nVmVyc2lvbnx8MCxhLl9hcHBseVNoaW1OZXh0VmVyc2lvbj0oYS5fYXBwbHlTaGltTmV4dFZlcnNpb258fDApKzF9ZnVuY3Rpb24gYWgoYSl7cmV0dXJuIGEuX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uPT09YS5fYXBwbHlTaGltTmV4dFZlcnNpb259ZnVuY3Rpb24gYmgoYSl7YS5fYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb249YS5fYXBwbHlTaGltTmV4dFZlcnNpb247YS5ifHwoYS5iPSEwLFpnLnRoZW4oZnVuY3Rpb24oKXthLl9hcHBseVNoaW1DdXJyZW50VmVyc2lvbj1hLl9hcHBseVNoaW1OZXh0VmVyc2lvbjthLmI9ITF9KSl9O3ZhciBjaD1uZXcgUmc7ZnVuY3Rpb24gWSgpe3RoaXMuUz17fTt0aGlzLmM9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3ZhciBhPW5ldyBhZjthLnJ1bGVzPVtdO3RoaXMuZj14Zyh0aGlzLmMsbmV3IHdnKGEpKTt0aGlzLkI9ITE7dGhpcy5iPXRoaXMuYT1udWxsfXI9WS5wcm90b3R5cGU7ci5mbHVzaD1mdW5jdGlvbigpe1hnKCl9O3IuWGE9ZnVuY3Rpb24oYSl7cmV0dXJuIE1mKGEpfTtyLmliPWZ1bmN0aW9uKGEpe3JldHVybiBLZihhKX07ci5wcmVwYXJlVGVtcGxhdGU9ZnVuY3Rpb24oYSxiLGMpe3RoaXMucHJlcGFyZVRlbXBsYXRlRG9tKGEsYik7dGhpcy5wcmVwYXJlVGVtcGxhdGVTdHlsZXMoYSxiLGMpfTtcbnIucHJlcGFyZVRlbXBsYXRlU3R5bGVzPWZ1bmN0aW9uKGEsYixjKXtpZighYS5CKXthLkI9ITA7YS5uYW1lPWI7YS5leHRlbmRzPWM7WWdbYl09YTt2YXIgZD0oZD1hLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcInN0eWxlXCIpKT9kLmdldEF0dHJpYnV0ZShcImNzcy1idWlsZFwiKXx8XCJcIjpcIlwiO3ZhciBlPVtdO2Zvcih2YXIgZj1hLmNvbnRlbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlXCIpLGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZihoLmhhc0F0dHJpYnV0ZShcInNoYWR5LXVuc2NvcGVkXCIpKXtpZighVSl7dmFyIGs9aC50ZXh0Q29udGVudDtKZi5oYXMoayl8fChKZi5hZGQoayksaz1oLmNsb25lTm9kZSghMCksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChrKSk7aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpfX1lbHNlIGUucHVzaChoLnRleHRDb250ZW50KSxoLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCl9ZT1lLmpvaW4oXCJcIikudHJpbSgpO2M9e2lzOmIsZXh0ZW5kczpjLFxub2I6ZH07ZGgodGhpcyk7Zj1FZi50ZXN0KGUpfHxEZi50ZXN0KGUpO0VmLmxhc3RJbmRleD0wO0RmLmxhc3RJbmRleD0wO2U9YmYoZSk7ZiYmViYmdGhpcy5hJiZ0aGlzLmEudHJhbnNmb3JtUnVsZXMoZSxiKTthLl9zdHlsZUFzdD1lO2EuUz1kO2Q9W107Vnx8KGQ9QmcoYS5fc3R5bGVBc3QpKTtpZighZC5sZW5ndGh8fFYpZT1VP2EuY29udGVudDpudWxsLGI9T2dbYl0sZj1aZihjLGEuX3N0eWxlQXN0KSxiPWYubGVuZ3RoP09mKGYsYy5pcyxlLGIpOnZvaWQgMCxhLmE9YjthLmY9ZH19O3IucHJlcGFyZVRlbXBsYXRlRG9tPWZ1bmN0aW9uKGEsYil7VXx8YS5jfHwoYS5jPSEwLFZmKGEuY29udGVudCxiKSl9O1xuZnVuY3Rpb24gZWgoYSl7IWEuYiYmd2luZG93LlNoYWR5Q1NTJiZ3aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2UmJihhLmI9d2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlLGEuYi50cmFuc2Zvcm1DYWxsYmFjaz1mdW5jdGlvbihiKXthLkdhKGIpfSxhLmIudmFsaWRhdGVDYWxsYmFjaz1mdW5jdGlvbigpe3JlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpeyhhLmIuZW5xdWV1ZWR8fGEuQikmJmEuZmx1c2hDdXN0b21TdHlsZXMoKX0pfSl9ZnVuY3Rpb24gZGgoYSl7IWEuYSYmd2luZG93LlNoYWR5Q1NTJiZ3aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltJiYoYS5hPXdpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW0sYS5hLmludmFsaWRDYWxsYmFjaz0kZyk7ZWgoYSl9XG5yLmZsdXNoQ3VzdG9tU3R5bGVzPWZ1bmN0aW9uKCl7ZGgodGhpcyk7aWYodGhpcy5iKXt2YXIgYT10aGlzLmIucHJvY2Vzc1N0eWxlcygpO2lmKHRoaXMuYi5lbnF1ZXVlZCl7aWYoVilmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9dGhpcy5iLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoYVtiXSk7aWYoYyYmViYmdGhpcy5hKXt2YXIgZD1NZihjKTtkaCh0aGlzKTt0aGlzLmEudHJhbnNmb3JtUnVsZXMoZCk7Yy50ZXh0Q29udGVudD1LZihkKX19ZWxzZSBmb3IoZmgodGhpcyx0aGlzLmMsdGhpcy5mKSxiPTA7YjxhLmxlbmd0aDtiKyspKGM9dGhpcy5iLmdldFN0eWxlRm9yQ3VzdG9tU3R5bGUoYVtiXSkpJiZNZyhjLHRoaXMuZi5PKTt0aGlzLmIuZW5xdWV1ZWQ9ITE7dGhpcy5CJiYhViYmdGhpcy5zdHlsZURvY3VtZW50KCl9fX07XG5yLnN0eWxlRWxlbWVudD1mdW5jdGlvbihhLGIpe3ZhciBjPVRmKGEpLmlzLGQ9WChhKTtpZighZCl7dmFyIGU9VGYoYSk7ZD1lLmlzO2U9ZS5ZO3ZhciBmPU9nW2RdO2Q9WWdbZF07aWYoZCl7dmFyIGc9ZC5fc3R5bGVBc3Q7dmFyIGg9ZC5mfWQ9eGcoYSxuZXcgd2coZyxmLGgsZSkpfWEhPT10aGlzLmMmJih0aGlzLkI9ITApO2ImJihkLlU9ZC5VfHx7fSxPYmplY3QuYXNzaWduKGQuVSxiKSk7aWYoVil7aWYoZC5VKXtiPWQuVTtmb3IodmFyIGsgaW4gYiludWxsPT09az9hLnN0eWxlLnJlbW92ZVByb3BlcnR5KGspOmEuc3R5bGUuc2V0UHJvcGVydHkoayxiW2tdKX1pZigoKGs9WWdbY10pfHxhPT09dGhpcy5jKSYmayYmay5hJiYhYWgoaykpe2lmKGFoKGspfHxrLl9hcHBseVNoaW1WYWxpZGF0aW5nVmVyc2lvbiE9PWsuX2FwcGx5U2hpbU5leHRWZXJzaW9uKWRoKHRoaXMpLHRoaXMuYSYmdGhpcy5hLnRyYW5zZm9ybVJ1bGVzKGsuX3N0eWxlQXN0LGMpLGsuYS50ZXh0Q29udGVudD1cblpmKGEsZC5NKSxiaChrKTtVJiYoYz1hLnNoYWRvd1Jvb3QpJiYoYy5xdWVyeVNlbGVjdG9yKFwic3R5bGVcIikudGV4dENvbnRlbnQ9WmYoYSxkLk0pKTtkLk09ay5fc3R5bGVBc3R9fWVsc2UgaWYodGhpcy5mbHVzaCgpLGZoKHRoaXMsYSxkKSxkLnVhJiZkLnVhLmxlbmd0aCl7Yz1kO2s9VGYoYSkuaXM7ZD0oYj1jaC5mZXRjaChrLGMuTyxjLnVhKSk/Yi5zdHlsZUVsZW1lbnQ6bnVsbDtnPWMuSTsoaD1iJiZiLkkpfHwoaD10aGlzLlNba109KHRoaXMuU1trXXx8MCkrMSxoPWsrXCItXCIraCk7Yy5JPWg7aD1jLkk7ZT1OZztlPWQ/ZC50ZXh0Q29udGVudHx8XCJcIjpKZyhlLGEsYy5PLGgpO2Y9WChhKTt2YXIgbT1mLmE7bSYmIVUmJm0hPT1kJiYobS5fdXNlQ291bnQtLSwwPj1tLl91c2VDb3VudCYmbS5wYXJlbnROb2RlJiZtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobSkpO1U/Zi5hPyhmLmEudGV4dENvbnRlbnQ9ZSxkPWYuYSk6ZSYmKGQ9T2YoZSxoLGEuc2hhZG93Um9vdCxmLmIpKTpkP1xuZC5wYXJlbnROb2RlfHwoemcmJi0xPGUuaW5kZXhPZihcIkBtZWRpYVwiKSYmKGQudGV4dENvbnRlbnQ9ZSksUGYoZCxudWxsLGYuYikpOmUmJihkPU9mKGUsaCxudWxsLGYuYikpO2QmJihkLl91c2VDb3VudD1kLl91c2VDb3VudHx8MCxmLmEhPWQmJmQuX3VzZUNvdW50KyssZi5hPWQpO2g9ZDtVfHwoZD1jLkksZj1lPWEuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIsZyYmKGY9ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxccyp4LXNjb3BlXFxcXHMqXCIrZytcIlxcXFxzKlwiLFwiZ1wiKSxcIiBcIikpLGYrPShmP1wiIFwiOlwiXCIpK1wieC1zY29wZSBcIitkLGUhPT1mJiZTZihhLGYpKTtifHxjaC5zdG9yZShrLGMuTyxoLGMuSSl9fTtmdW5jdGlvbiBnaChhLGIpe3JldHVybihiPWIuZ2V0Um9vdE5vZGUoKS5ob3N0KT9YKGIpP2I6Z2goYSxiKTphLmN9XG5mdW5jdGlvbiBmaChhLGIsYyl7YT1naChhLGIpO3ZhciBkPVgoYSk7YT1PYmplY3QuY3JlYXRlKGQuT3x8bnVsbCk7dmFyIGU9SWcoYixjLk0pO2I9R2coZC5NLGIpLkw7T2JqZWN0LmFzc2lnbihhLGUuWmEsYixlLmZiKTtiPWMuVTtmb3IodmFyIGYgaW4gYilpZigoZT1iW2ZdKXx8MD09PWUpYVtmXT1lO2Y9Tmc7Yj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhKTtmb3IoZT0wO2U8Yi5sZW5ndGg7ZSsrKWQ9YltlXSxhW2RdPUVnKGYsYVtkXSxhKTtjLk89YX1yLnN0eWxlRG9jdW1lbnQ9ZnVuY3Rpb24oYSl7dGhpcy5zdHlsZVN1YnRyZWUodGhpcy5jLGEpfTtcbnIuc3R5bGVTdWJ0cmVlPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zaGFkb3dSb290OyhjfHxhPT09dGhpcy5jKSYmdGhpcy5zdHlsZUVsZW1lbnQoYSxiKTtpZihiPWMmJihjLmNoaWxkcmVufHxjLmNoaWxkTm9kZXMpKWZvcihhPTA7YTxiLmxlbmd0aDthKyspdGhpcy5zdHlsZVN1YnRyZWUoYlthXSk7ZWxzZSBpZihhPWEuY2hpbGRyZW58fGEuY2hpbGROb2Rlcylmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXRoaXMuc3R5bGVTdWJ0cmVlKGFbYl0pfTtyLkdhPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1NZihhKTtMZihjLGZ1bmN0aW9uKGEpe2lmKFUpdGcoYSk7ZWxzZXt2YXIgYz1XO2Euc2VsZWN0b3I9YS5wYXJzZWRTZWxlY3Rvcjt0ZyhhKTthLnNlbGVjdG9yPWEuRz1jZyhjLGEsYy5jLHZvaWQgMCx2b2lkIDApfVYmJihkaChiKSxiLmEmJmIuYS50cmFuc2Zvcm1SdWxlKGEpKX0pO1Y/YS50ZXh0Q29udGVudD1LZihjKTp0aGlzLmYuTS5ydWxlcy5wdXNoKGMpfTtcbnIuZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlPWZ1bmN0aW9uKGEsYil7dmFyIGM7Vnx8KGM9KFgoYSl8fFgoZ2godGhpcyxhKSkpLk9bYl0pO3JldHVybihjPWN8fHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGEpLmdldFByb3BlcnR5VmFsdWUoYikpP2MudHJpbSgpOlwiXCJ9O3IuaGI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmdldFJvb3ROb2RlKCk7Yj1iP2Iuc3BsaXQoL1xccy8pOltdO2M9Yy5ob3N0JiZjLmhvc3QubG9jYWxOYW1lO2lmKCFjKXt2YXIgZD1hLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO2lmKGQpe2Q9ZC5zcGxpdCgvXFxzLyk7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspaWYoZFtlXT09PVcuYSl7Yz1kW2UrMV07YnJlYWt9fX1jJiZiLnB1c2goVy5hLGMpO1Z8fChjPVgoYSkpJiZjLkkmJmIucHVzaChOZy5hLGMuSSk7U2YoYSxiLmpvaW4oXCIgXCIpKX07ci5TYT1mdW5jdGlvbihhKXtyZXR1cm4gWChhKX07WS5wcm90b3R5cGUuZmx1c2g9WS5wcm90b3R5cGUuZmx1c2g7XG5ZLnByb3RvdHlwZS5wcmVwYXJlVGVtcGxhdGU9WS5wcm90b3R5cGUucHJlcGFyZVRlbXBsYXRlO1kucHJvdG90eXBlLnN0eWxlRWxlbWVudD1ZLnByb3RvdHlwZS5zdHlsZUVsZW1lbnQ7WS5wcm90b3R5cGUuc3R5bGVEb2N1bWVudD1ZLnByb3RvdHlwZS5zdHlsZURvY3VtZW50O1kucHJvdG90eXBlLnN0eWxlU3VidHJlZT1ZLnByb3RvdHlwZS5zdHlsZVN1YnRyZWU7WS5wcm90b3R5cGUuZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlPVkucHJvdG90eXBlLmdldENvbXB1dGVkU3R5bGVWYWx1ZTtZLnByb3RvdHlwZS5zZXRFbGVtZW50Q2xhc3M9WS5wcm90b3R5cGUuaGI7WS5wcm90b3R5cGUuX3N0eWxlSW5mb0Zvck5vZGU9WS5wcm90b3R5cGUuU2E7WS5wcm90b3R5cGUudHJhbnNmb3JtQ3VzdG9tU3R5bGVGb3JEb2N1bWVudD1ZLnByb3RvdHlwZS5HYTtZLnByb3RvdHlwZS5nZXRTdHlsZUFzdD1ZLnByb3RvdHlwZS5YYTtZLnByb3RvdHlwZS5zdHlsZUFzdFRvU3RyaW5nPVkucHJvdG90eXBlLmliO1xuWS5wcm90b3R5cGUuZmx1c2hDdXN0b21TdHlsZXM9WS5wcm90b3R5cGUuZmx1c2hDdXN0b21TdHlsZXM7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoWS5wcm90b3R5cGUse25hdGl2ZVNoYWRvdzp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFV9fSxuYXRpdmVDc3M6e2dldDpmdW5jdGlvbigpe3JldHVybiBWfX19KTt2YXIgWj1uZXcgWSxoaCxpaDt3aW5kb3cuU2hhZHlDU1MmJihoaD13aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltLGloPXdpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSk7XG53aW5kb3cuU2hhZHlDU1M9e1Njb3BpbmdTaGltOloscHJlcGFyZVRlbXBsYXRlOmZ1bmN0aW9uKGEsYixjKXtaLmZsdXNoQ3VzdG9tU3R5bGVzKCk7Wi5wcmVwYXJlVGVtcGxhdGUoYSxiLGMpfSxwcmVwYXJlVGVtcGxhdGVEb206ZnVuY3Rpb24oYSxiKXtaLnByZXBhcmVUZW1wbGF0ZURvbShhLGIpfSxwcmVwYXJlVGVtcGxhdGVTdHlsZXM6ZnVuY3Rpb24oYSxiLGMpe1ouZmx1c2hDdXN0b21TdHlsZXMoKTtaLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyhhLGIsYyl9LHN0eWxlU3VidHJlZTpmdW5jdGlvbihhLGIpe1ouZmx1c2hDdXN0b21TdHlsZXMoKTtaLnN0eWxlU3VidHJlZShhLGIpfSxzdHlsZUVsZW1lbnQ6ZnVuY3Rpb24oYSl7Wi5mbHVzaEN1c3RvbVN0eWxlcygpO1ouc3R5bGVFbGVtZW50KGEpfSxzdHlsZURvY3VtZW50OmZ1bmN0aW9uKGEpe1ouZmx1c2hDdXN0b21TdHlsZXMoKTtaLnN0eWxlRG9jdW1lbnQoYSl9LGZsdXNoQ3VzdG9tU3R5bGVzOmZ1bmN0aW9uKCl7Wi5mbHVzaEN1c3RvbVN0eWxlcygpfSxcbmdldENvbXB1dGVkU3R5bGVWYWx1ZTpmdW5jdGlvbihhLGIpe3JldHVybiBaLmdldENvbXB1dGVkU3R5bGVWYWx1ZShhLGIpfSxuYXRpdmVDc3M6VixuYXRpdmVTaGFkb3c6VX07aGgmJih3aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltPWhoKTtpaCYmKHdpbmRvdy5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZT1paCk7KGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7XCJcIj09YSYmKGYuY2FsbCh0aGlzKSx0aGlzLmk9ITApO3JldHVybiBhLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gYyhhKXt2YXIgYj1hLmNoYXJDb2RlQXQoMCk7cmV0dXJuIDMyPGImJjEyNz5iJiYtMT09WzM0LDM1LDYwLDYyLDYzLDk2XS5pbmRleE9mKGIpP2E6ZW5jb2RlVVJJQ29tcG9uZW50KGEpfWZ1bmN0aW9uIGQoYSl7dmFyIGI9YS5jaGFyQ29kZUF0KDApO3JldHVybiAzMjxiJiYxMjc+YiYmLTE9PVszNCwzNSw2MCw2Miw5Nl0uaW5kZXhPZihiKT9hOmVuY29kZVVSSUNvbXBvbmVudChhKX1mdW5jdGlvbiBlKGEsZSxnKXtmdW5jdGlvbiBoKGEpe29iLnB1c2goYSl9dmFyIGs9ZXx8XCJzY2hlbWUgc3RhcnRcIixBPTAscT1cIlwiLEI9ITEsdWE9ITEsb2I9W107YTpmb3IoOyh2b2lkIDAhPWFbQS0xXXx8MD09QSkmJiF0aGlzLmk7KXt2YXIgbD1hW0FdO3N3aXRjaChrKXtjYXNlIFwic2NoZW1lIHN0YXJ0XCI6aWYobCYmcC50ZXN0KGwpKXErPVxubC50b0xvd2VyQ2FzZSgpLGs9XCJzY2hlbWVcIjtlbHNlIGlmKGUpe2goXCJJbnZhbGlkIHNjaGVtZS5cIik7YnJlYWsgYX1lbHNle3E9XCJcIjtrPVwibm8gc2NoZW1lXCI7Y29udGludWV9YnJlYWs7Y2FzZSBcInNjaGVtZVwiOmlmKGwmJkcudGVzdChsKSlxKz1sLnRvTG93ZXJDYXNlKCk7ZWxzZSBpZihcIjpcIj09bCl7dGhpcy5oPXE7cT1cIlwiO2lmKGUpYnJlYWsgYTt2b2lkIDAhPT1tW3RoaXMuaF0mJih0aGlzLkY9ITApO2s9XCJmaWxlXCI9PXRoaXMuaD9cInJlbGF0aXZlXCI6dGhpcy5GJiZnJiZnLmg9PXRoaXMuaD9cInJlbGF0aXZlIG9yIGF1dGhvcml0eVwiOnRoaXMuRj9cImF1dGhvcml0eSBmaXJzdCBzbGFzaFwiOlwic2NoZW1lIGRhdGFcIn1lbHNlIGlmKGUpe3ZvaWQgMCE9bCYmaChcIkNvZGUgcG9pbnQgbm90IGFsbG93ZWQgaW4gc2NoZW1lOiBcIitsKTticmVhayBhfWVsc2V7cT1cIlwiO0E9MDtrPVwibm8gc2NoZW1lXCI7Y29udGludWV9YnJlYWs7Y2FzZSBcInNjaGVtZSBkYXRhXCI6XCI/XCI9PWw/KHRoaXMucz1cIj9cIixcbms9XCJxdWVyeVwiKTpcIiNcIj09bD8odGhpcy5EPVwiI1wiLGs9XCJmcmFnbWVudFwiKTp2b2lkIDAhPWwmJlwiXFx0XCIhPWwmJlwiXFxuXCIhPWwmJlwiXFxyXCIhPWwmJih0aGlzLnJhKz1jKGwpKTticmVhaztjYXNlIFwibm8gc2NoZW1lXCI6aWYoZyYmdm9pZCAwIT09bVtnLmhdKXtrPVwicmVsYXRpdmVcIjtjb250aW51ZX1lbHNlIGgoXCJNaXNzaW5nIHNjaGVtZS5cIiksZi5jYWxsKHRoaXMpLHRoaXMuaT0hMDticmVhaztjYXNlIFwicmVsYXRpdmUgb3IgYXV0aG9yaXR5XCI6aWYoXCIvXCI9PWwmJlwiL1wiPT1hW0ErMV0paz1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2Vsc2V7aChcIkV4cGVjdGVkIC8sIGdvdDogXCIrbCk7az1cInJlbGF0aXZlXCI7Y29udGludWV9YnJlYWs7Y2FzZSBcInJlbGF0aXZlXCI6dGhpcy5GPSEwO1wiZmlsZVwiIT10aGlzLmgmJih0aGlzLmg9Zy5oKTtpZih2b2lkIDA9PWwpe3RoaXMuaj1nLmo7dGhpcy5vPWcubzt0aGlzLmw9Zy5sLnNsaWNlKCk7dGhpcy5zPWcuczt0aGlzLnU9Zy51O3RoaXMuZz1nLmc7XG5icmVhayBhfWVsc2UgaWYoXCIvXCI9PWx8fFwiXFxcXFwiPT1sKVwiXFxcXFwiPT1sJiZoKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGs9XCJyZWxhdGl2ZSBzbGFzaFwiO2Vsc2UgaWYoXCI/XCI9PWwpdGhpcy5qPWcuaix0aGlzLm89Zy5vLHRoaXMubD1nLmwuc2xpY2UoKSx0aGlzLnM9XCI/XCIsdGhpcy51PWcudSx0aGlzLmc9Zy5nLGs9XCJxdWVyeVwiO2Vsc2UgaWYoXCIjXCI9PWwpdGhpcy5qPWcuaix0aGlzLm89Zy5vLHRoaXMubD1nLmwuc2xpY2UoKSx0aGlzLnM9Zy5zLHRoaXMuRD1cIiNcIix0aGlzLnU9Zy51LHRoaXMuZz1nLmcsaz1cImZyYWdtZW50XCI7ZWxzZXtrPWFbQSsxXTt2YXIgRD1hW0ErMl07aWYoXCJmaWxlXCIhPXRoaXMuaHx8IXAudGVzdChsKXx8XCI6XCIhPWsmJlwifFwiIT1rfHx2b2lkIDAhPUQmJlwiL1wiIT1EJiZcIlxcXFxcIiE9RCYmXCI/XCIhPUQmJlwiI1wiIT1EKXRoaXMuaj1nLmosdGhpcy5vPWcubyx0aGlzLnU9Zy51LHRoaXMuZz1nLmcsdGhpcy5sPWcubC5zbGljZSgpLHRoaXMubC5wb3AoKTtrPVxuXCJyZWxhdGl2ZSBwYXRoXCI7Y29udGludWV9YnJlYWs7Y2FzZSBcInJlbGF0aXZlIHNsYXNoXCI6aWYoXCIvXCI9PWx8fFwiXFxcXFwiPT1sKVwiXFxcXFwiPT1sJiZoKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGs9XCJmaWxlXCI9PXRoaXMuaD9cImZpbGUgaG9zdFwiOlwiYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7ZWxzZXtcImZpbGVcIiE9dGhpcy5oJiYodGhpcy5qPWcuaix0aGlzLm89Zy5vLHRoaXMudT1nLnUsdGhpcy5nPWcuZyk7az1cInJlbGF0aXZlIHBhdGhcIjtjb250aW51ZX1icmVhaztjYXNlIFwiYXV0aG9yaXR5IGZpcnN0IHNsYXNoXCI6aWYoXCIvXCI9PWwpaz1cImF1dGhvcml0eSBzZWNvbmQgc2xhc2hcIjtlbHNle2goXCJFeHBlY3RlZCAnLycsIGdvdDogXCIrbCk7az1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2NvbnRpbnVlfWJyZWFrO2Nhc2UgXCJhdXRob3JpdHkgc2Vjb25kIHNsYXNoXCI6az1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2lmKFwiL1wiIT1sKXtoKFwiRXhwZWN0ZWQgJy8nLCBnb3Q6IFwiK1xubCk7Y29udGludWV9YnJlYWs7Y2FzZSBcImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiOmlmKFwiL1wiIT1sJiZcIlxcXFxcIiE9bCl7az1cImF1dGhvcml0eVwiO2NvbnRpbnVlfWVsc2UgaChcIkV4cGVjdGVkIGF1dGhvcml0eSwgZ290OiBcIitsKTticmVhaztjYXNlIFwiYXV0aG9yaXR5XCI6aWYoXCJAXCI9PWwpe0ImJihoKFwiQCBhbHJlYWR5IHNlZW4uXCIpLHErPVwiJTQwXCIpO0I9ITA7Zm9yKGw9MDtsPHEubGVuZ3RoO2wrKylEPXFbbF0sXCJcXHRcIj09RHx8XCJcXG5cIj09RHx8XCJcXHJcIj09RD9oKFwiSW52YWxpZCB3aGl0ZXNwYWNlIGluIGF1dGhvcml0eS5cIik6XCI6XCI9PUQmJm51bGw9PT10aGlzLmc/dGhpcy5nPVwiXCI6KEQ9YyhEKSxudWxsIT09dGhpcy5nP3RoaXMuZys9RDp0aGlzLnUrPUQpO3E9XCJcIn1lbHNlIGlmKHZvaWQgMD09bHx8XCIvXCI9PWx8fFwiXFxcXFwiPT1sfHxcIj9cIj09bHx8XCIjXCI9PWwpe0EtPXEubGVuZ3RoO3E9XCJcIjtrPVwiaG9zdFwiO2NvbnRpbnVlfWVsc2UgcSs9bDticmVhaztjYXNlIFwiZmlsZSBob3N0XCI6aWYodm9pZCAwPT1cbmx8fFwiL1wiPT1sfHxcIlxcXFxcIj09bHx8XCI/XCI9PWx8fFwiI1wiPT1sKXsyIT1xLmxlbmd0aHx8IXAudGVzdChxWzBdKXx8XCI6XCIhPXFbMV0mJlwifFwiIT1xWzFdPygwIT1xLmxlbmd0aCYmKHRoaXMuaj1iLmNhbGwodGhpcyxxKSxxPVwiXCIpLGs9XCJyZWxhdGl2ZSBwYXRoIHN0YXJ0XCIpOms9XCJyZWxhdGl2ZSBwYXRoXCI7Y29udGludWV9ZWxzZVwiXFx0XCI9PWx8fFwiXFxuXCI9PWx8fFwiXFxyXCI9PWw/aChcIkludmFsaWQgd2hpdGVzcGFjZSBpbiBmaWxlIGhvc3QuXCIpOnErPWw7YnJlYWs7Y2FzZSBcImhvc3RcIjpjYXNlIFwiaG9zdG5hbWVcIjppZihcIjpcIiE9bHx8dWEpaWYodm9pZCAwPT1sfHxcIi9cIj09bHx8XCJcXFxcXCI9PWx8fFwiP1wiPT1sfHxcIiNcIj09bCl7dGhpcy5qPWIuY2FsbCh0aGlzLHEpO3E9XCJcIjtrPVwicmVsYXRpdmUgcGF0aCBzdGFydFwiO2lmKGUpYnJlYWsgYTtjb250aW51ZX1lbHNlXCJcXHRcIiE9bCYmXCJcXG5cIiE9bCYmXCJcXHJcIiE9bD8oXCJbXCI9PWw/dWE9ITA6XCJdXCI9PWwmJih1YT0hMSkscSs9bCk6aChcIkludmFsaWQgY29kZSBwb2ludCBpbiBob3N0L2hvc3RuYW1lOiBcIitcbmwpO2Vsc2UgaWYodGhpcy5qPWIuY2FsbCh0aGlzLHEpLHE9XCJcIixrPVwicG9ydFwiLFwiaG9zdG5hbWVcIj09ZSlicmVhayBhO2JyZWFrO2Nhc2UgXCJwb3J0XCI6aWYoL1swLTldLy50ZXN0KGwpKXErPWw7ZWxzZSBpZih2b2lkIDA9PWx8fFwiL1wiPT1sfHxcIlxcXFxcIj09bHx8XCI/XCI9PWx8fFwiI1wiPT1sfHxlKXtcIlwiIT1xJiYocT1wYXJzZUludChxLDEwKSxxIT1tW3RoaXMuaF0mJih0aGlzLm89cStcIlwiKSxxPVwiXCIpO2lmKGUpYnJlYWsgYTtrPVwicmVsYXRpdmUgcGF0aCBzdGFydFwiO2NvbnRpbnVlfWVsc2VcIlxcdFwiPT1sfHxcIlxcblwiPT1sfHxcIlxcclwiPT1sP2goXCJJbnZhbGlkIGNvZGUgcG9pbnQgaW4gcG9ydDogXCIrbCk6KGYuY2FsbCh0aGlzKSx0aGlzLmk9ITApO2JyZWFrO2Nhc2UgXCJyZWxhdGl2ZSBwYXRoIHN0YXJ0XCI6XCJcXFxcXCI9PWwmJmgoXCInXFxcXCcgbm90IGFsbG93ZWQgaW4gcGF0aC5cIik7az1cInJlbGF0aXZlIHBhdGhcIjtpZihcIi9cIiE9bCYmXCJcXFxcXCIhPWwpY29udGludWU7YnJlYWs7Y2FzZSBcInJlbGF0aXZlIHBhdGhcIjppZih2b2lkIDAhPVxubCYmXCIvXCIhPWwmJlwiXFxcXFwiIT1sJiYoZXx8XCI/XCIhPWwmJlwiI1wiIT1sKSlcIlxcdFwiIT1sJiZcIlxcblwiIT1sJiZcIlxcclwiIT1sJiYocSs9YyhsKSk7ZWxzZXtcIlxcXFxcIj09bCYmaChcIlxcXFwgbm90IGFsbG93ZWQgaW4gcmVsYXRpdmUgcGF0aC5cIik7aWYoRD1uW3EudG9Mb3dlckNhc2UoKV0pcT1EO1wiLi5cIj09cT8odGhpcy5sLnBvcCgpLFwiL1wiIT1sJiZcIlxcXFxcIiE9bCYmdGhpcy5sLnB1c2goXCJcIikpOlwiLlwiPT1xJiZcIi9cIiE9bCYmXCJcXFxcXCIhPWw/dGhpcy5sLnB1c2goXCJcIik6XCIuXCIhPXEmJihcImZpbGVcIj09dGhpcy5oJiYwPT10aGlzLmwubGVuZ3RoJiYyPT1xLmxlbmd0aCYmcC50ZXN0KHFbMF0pJiZcInxcIj09cVsxXSYmKHE9cVswXStcIjpcIiksdGhpcy5sLnB1c2gocSkpO3E9XCJcIjtcIj9cIj09bD8odGhpcy5zPVwiP1wiLGs9XCJxdWVyeVwiKTpcIiNcIj09bCYmKHRoaXMuRD1cIiNcIixrPVwiZnJhZ21lbnRcIil9YnJlYWs7Y2FzZSBcInF1ZXJ5XCI6ZXx8XCIjXCIhPWw/dm9pZCAwIT1sJiZcIlxcdFwiIT1sJiZcIlxcblwiIT1sJiZcIlxcclwiIT1sJiYodGhpcy5zKz1cbmQobCkpOih0aGlzLkQ9XCIjXCIsaz1cImZyYWdtZW50XCIpO2JyZWFrO2Nhc2UgXCJmcmFnbWVudFwiOnZvaWQgMCE9bCYmXCJcXHRcIiE9bCYmXCJcXG5cIiE9bCYmXCJcXHJcIiE9bCYmKHRoaXMuRCs9bCl9QSsrfX1mdW5jdGlvbiBmKCl7dGhpcy51PXRoaXMucmE9dGhpcy5oPVwiXCI7dGhpcy5nPW51bGw7dGhpcy5vPXRoaXMuaj1cIlwiO3RoaXMubD1bXTt0aGlzLkQ9dGhpcy5zPVwiXCI7dGhpcy5GPXRoaXMuaT0hMX1mdW5jdGlvbiBnKGEsYil7dm9pZCAwPT09Ynx8YiBpbnN0YW5jZW9mIGd8fChiPW5ldyBnKFN0cmluZyhiKSkpO3RoaXMuVGE9YTtmLmNhbGwodGhpcyk7YT1hLnJlcGxhY2UoL15bIFxcdFxcclxcblxcZl0rfFsgXFx0XFxyXFxuXFxmXSskL2csXCJcIik7ZS5jYWxsKHRoaXMsYSxudWxsLGIpfXZhciBoPSExO2lmKCFhLnhiKXRyeXt2YXIgaz1uZXcgVVJMKFwiYlwiLFwiaHR0cDovL2FcIik7ay5wYXRobmFtZT1cImMlMjBkXCI7aD1cImh0dHA6Ly9hL2MlMjBkXCI9PT1rLmhyZWZ9Y2F0Y2goQSl7fWlmKCFoKXt2YXIgbT1PYmplY3QuY3JlYXRlKG51bGwpO1xubS5mdHA9MjE7bS5maWxlPTA7bS5nb3BoZXI9NzA7bS5odHRwPTgwO20uaHR0cHM9NDQzO20ud3M9ODA7bS53c3M9NDQzO3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7bltcIiUyZVwiXT1cIi5cIjtuW1wiLiUyZVwiXT1cIi4uXCI7bltcIiUyZS5cIl09XCIuLlwiO25bXCIlMmUlMmVcIl09XCIuLlwiO3ZhciBwPS9bYS16QS1aXS8sRz0vW2EtekEtWjAtOVxcK1xcLVxcLl0vO2cucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhyZWZ9LGdldCBocmVmKCl7aWYodGhpcy5pKXJldHVybiB0aGlzLlRhO3ZhciBhPVwiXCI7aWYoXCJcIiE9dGhpcy51fHxudWxsIT10aGlzLmcpYT10aGlzLnUrKG51bGwhPXRoaXMuZz9cIjpcIit0aGlzLmc6XCJcIikrXCJAXCI7cmV0dXJuIHRoaXMucHJvdG9jb2wrKHRoaXMuRj9cIi8vXCIrYSt0aGlzLmhvc3Q6XCJcIikrdGhpcy5wYXRobmFtZSt0aGlzLnMrdGhpcy5EfSxzZXQgaHJlZihhKXtmLmNhbGwodGhpcyk7ZS5jYWxsKHRoaXMsYSl9LGdldCBwcm90b2NvbCgpe3JldHVybiB0aGlzLmgrXG5cIjpcIn0sc2V0IHByb3RvY29sKGEpe3RoaXMuaXx8ZS5jYWxsKHRoaXMsYStcIjpcIixcInNjaGVtZSBzdGFydFwiKX0sZ2V0IGhvc3QoKXtyZXR1cm4gdGhpcy5pP1wiXCI6dGhpcy5vP3RoaXMuaitcIjpcIit0aGlzLm86dGhpcy5qfSxzZXQgaG9zdChhKXshdGhpcy5pJiZ0aGlzLkYmJmUuY2FsbCh0aGlzLGEsXCJob3N0XCIpfSxnZXQgaG9zdG5hbWUoKXtyZXR1cm4gdGhpcy5qfSxzZXQgaG9zdG5hbWUoYSl7IXRoaXMuaSYmdGhpcy5GJiZlLmNhbGwodGhpcyxhLFwiaG9zdG5hbWVcIil9LGdldCBwb3J0KCl7cmV0dXJuIHRoaXMub30sc2V0IHBvcnQoYSl7IXRoaXMuaSYmdGhpcy5GJiZlLmNhbGwodGhpcyxhLFwicG9ydFwiKX0sZ2V0IHBhdGhuYW1lKCl7cmV0dXJuIHRoaXMuaT9cIlwiOnRoaXMuRj9cIi9cIit0aGlzLmwuam9pbihcIi9cIik6dGhpcy5yYX0sc2V0IHBhdGhuYW1lKGEpeyF0aGlzLmkmJnRoaXMuRiYmKHRoaXMubD1bXSxlLmNhbGwodGhpcyxhLFwicmVsYXRpdmUgcGF0aCBzdGFydFwiKSl9LGdldCBzZWFyY2goKXtyZXR1cm4gdGhpcy5pfHxcbiF0aGlzLnN8fFwiP1wiPT10aGlzLnM/XCJcIjp0aGlzLnN9LHNldCBzZWFyY2goYSl7IXRoaXMuaSYmdGhpcy5GJiYodGhpcy5zPVwiP1wiLFwiP1wiPT1hWzBdJiYoYT1hLnNsaWNlKDEpKSxlLmNhbGwodGhpcyxhLFwicXVlcnlcIikpfSxnZXQgaGFzaCgpe3JldHVybiB0aGlzLml8fCF0aGlzLkR8fFwiI1wiPT10aGlzLkQ/XCJcIjp0aGlzLkR9LHNldCBoYXNoKGEpe3RoaXMuaXx8KHRoaXMuRD1cIiNcIixcIiNcIj09YVswXSYmKGE9YS5zbGljZSgxKSksZS5jYWxsKHRoaXMsYSxcImZyYWdtZW50XCIpKX0sZ2V0IG9yaWdpbigpe3ZhciBhO2lmKHRoaXMuaXx8IXRoaXMuaClyZXR1cm5cIlwiO3N3aXRjaCh0aGlzLmgpe2Nhc2UgXCJkYXRhXCI6Y2FzZSBcImZpbGVcIjpjYXNlIFwiamF2YXNjcmlwdFwiOmNhc2UgXCJtYWlsdG9cIjpyZXR1cm5cIm51bGxcIn1yZXR1cm4oYT10aGlzLmhvc3QpP3RoaXMuaCtcIjovL1wiK2E6XCJcIn19O3ZhciBCPWEuVVJMO0ImJihnLmNyZWF0ZU9iamVjdFVSTD1mdW5jdGlvbihhKXtyZXR1cm4gQi5jcmVhdGVPYmplY3RVUkwuYXBwbHkoQixcbmFyZ3VtZW50cyl9LGcucmV2b2tlT2JqZWN0VVJMPWZ1bmN0aW9uKGEpe0IucmV2b2tlT2JqZWN0VVJMKGEpfSk7YS5VUkw9Z319KSh3aW5kb3cpO3ZhciBqaD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7amgudGV4dENvbnRlbnQ9XCJib2R5IHt0cmFuc2l0aW9uOiBvcGFjaXR5IGVhc2UtaW4gMC4yczsgfSBcXG5ib2R5W3VucmVzb2x2ZWRdIHtvcGFjaXR5OiAwOyBkaXNwbGF5OiBibG9jazsgb3ZlcmZsb3c6IGhpZGRlbjsgcG9zaXRpb246IHJlbGF0aXZlOyB9IFxcblwiO3ZhciBraD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZFwiKTtraC5pbnNlcnRCZWZvcmUoamgsa2guZmlyc3RDaGlsZCk7dmFyIGxoPXdpbmRvdy5jdXN0b21FbGVtZW50cyxtaD0hMSxuaD1udWxsO2xoLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2smJmxoLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2soZnVuY3Rpb24oYSl7bmg9YTttaCYmYSgpfSk7ZnVuY3Rpb24gb2goKXt3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXAmJndpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50LmJvb3RzdHJhcCh3aW5kb3cuZG9jdW1lbnQpO25oJiZuaCgpO21oPSEwO3dpbmRvdy5XZWJDb21wb25lbnRzLnJlYWR5PSEwO2RvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiV2ViQ29tcG9uZW50c1JlYWR5XCIse2J1YmJsZXM6ITB9KSl9XG5cImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlPyh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixvaCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIixvaCk7b2goKX0pKTpvaCgpO30pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYmNvbXBvbmVudHMtYnVuZGxlLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==